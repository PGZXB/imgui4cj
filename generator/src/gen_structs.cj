package cimgui_generator

from std import collection.{HashMap, withIndex}
from std import io.{OutputStream, StringWriter}
from std import fs.{File, OpenOption}

struct StructMemberDef {
    let ty: String
    let name: String
    let templateType: ?String
    let size: ?Int64
    let bitfield: ?String

    init(ty: String, name: String, templateType: ?String, size: ?Int64, bitfield: ?String) {
        this.ty = ty
        this.name = name
        this.templateType = templateType
        this.size = size
        this.bitfield = bitfield
    }
}

struct StructDef {
    public StructDef(let name: String, let members: ArrayList<StructMemberDef>) {
    }
}

func parseStructsJson(structsJson: JsonValue): ArrayList<StructDef> {
    let result = ArrayList<StructDef>()

    for ((k, vJ) in structsJson.asObject().getFields()) {
        let values = ArrayList<StructMemberDef>()
        for (vDefJ in vJ.asArray().getItems()) {
            let vDefJObj = vDefJ.asObject()
            values.append(
                StructMemberDef(
                    vDefJObj["type"].asString().getValue(),
                    vDefJObj["name"].asString().getValue(),
                    vDefJObj.get("template_type")?.asString().getValue(),
                    vDefJObj.get("size")?.asInt().getValue(),
                    vDefJObj.get("bitfield")?.asString().getValue(),
                )
            )
        }
        result.append(StructDef(k, values))
    }

    return result
}

func genStructsCode<T>(os: StringWriter<T>, pkgName: String, structDefs: ArrayList<StructDef>,
    typeAlias: ?HashMap<String, CjType>) where T <: OutputStream {
    // SOME COMMENTS ....
    //
    // package xxx
    //
    // // struct StructName0
    // @C
    // public struct StructName0 {
    //     public StructName0(var field0!: FieldType0, var field1!: FieldType1, ...) {
    //     }
    // 
    //     public init() {
    //         field0 = default value
    //         field1 = default value
    //         ...
    //     }
    // }
    //
    // 
    // // struct EnumName2
    // ...

    os.writeln(AUTOGENERATED_FILE_HEAD_COMMENTS)
    os.writeln()
    os.writeln("package ${pkgName}")
    os.writeln()
    for ((i, def) in withIndex(structDefs)) {
        os.writeln("// struct ${def.name}")
        os.writeln("@C")
        os.writeln("public struct ${def.name} {")

        // Main constructor
        os.write("    public ${def.name}(")
        for ((i, mDef) in withIndex(def.members)) {
            let mCjName = getCjStructMemberName(mDef)
            let mCjType = CjType.fromCType(mDef.ty, size: mDef.size)
            os.write("public var ${mCjName}!: ${mCjType}")
            if (i != def.members.size - 1) {
                os.write(", ")
            }
        }
        os.writeln(") {")
        os.writeln("    }")
        os.writeln()

        // Empty init (default-init all members)
        os.writeln("    public init() {")
        for ((i, mDef) in withIndex(def.members)) {
            let mCjName = getCjStructMemberName(mDef)
            let mCjType = CjType.fromCType(mDef.ty, size: mDef.size)
            os.writeln("        ${mCjName} = ${mCjType.getDefaultValueLiteral(typeAlias: typeAlias)}")
        }
        os.writeln("    }")

        os.writeln("}")

        if (i != structDefs.size - 1) {
            os.writeln()
        }
    }
}

func genStructsCode(filename: String, pkgName: String, structDefs: ArrayList<StructDef>,
    typeAlias!: ?HashMap<String, CjType> = None) {
    try (fp = File(filename, OpenOption.CreateOrTruncate(false))) {
        try (sw = StringWriter(fp)) {
            return genStructsCode(sw, pkgName, structDefs, typeAlias)
        }
    }
}
