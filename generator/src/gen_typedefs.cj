package cimgui_generator

from std import io.{OutputStream, StringWriter}
from std import fs.{File, OpenOption}

struct TypeDef {
    TypeDef(let alias: String, let typename: String) {
    }
}

func parseTypeDefsJson(typeDefsJson: JsonValue): ArrayList<TypeDef> {
    let result = ArrayList<TypeDef>()

    for ((k, v) in typeDefsJson.asObject().getFields()) {
        result.append(TypeDef(k, v.asString().getValue()))
    }

    return result
}

func genTypeDefsCode<T>(os: StringWriter<T>, pkgName: String, defs: ArrayList<TypeDef>) where T <: OutputStream {
    // SOME COMMENTS ....
    //
    // package xxx
    //
    // public type alias0 = typename0
    // public type alias1 = typename1
    // ...

    os.writeln(AUTOGENERATED_FILE_HEAD_COMMENTS)
    os.writeln()
    os.writeln("package ${pkgName}")
    os.writeln()
    for (def in defs) {
        if (def.alias == "const_iterator" || def.alias == "iterator" || def.alias == "value_type") {
            continue // SKIP the three
        }
        if (def.alias == "ImGuiErrorLogCallback") {
            // Cangjie CFunc template type does not support `...` argument now
            os.writeln("public type ImGuiErrorLogCallback = CPointer<Unit>")
            continue
        }
        let cjType = CjType.fromCType(def.typename)
        match (cjType) {
            case StructType(name) => continue
            case _ =>
                let typename = match (cjType) {
                    case TypeAlias(name) => tryConvertTemplateTypename(name) ?? name
                    case _ => cjType.toString()
                }
                os.writeln("public type ${def.alias} = ${typename}")
        }
    }
    os.flush()
}

func genTypeDefsCode(filename: String, pkgName: String, defs: ArrayList<TypeDef>) {
    try (fp = File(filename, OpenOption.CreateOrTruncate(false))) {
        try (sw = StringWriter(fp)) {
            return genTypeDefsCode(sw, pkgName, defs)
        }
    }
}
