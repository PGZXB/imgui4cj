package cimgui_generator

import std.collection.ArrayList
import std.io.{OutputStream, StringWriter}
import std.fs.{File, OpenOption}
import encoding.json.*

struct EnumValueDef {
    public EnumValueDef(let calcValue: Int32, let name: String, let value: String) {
    }
}

struct EnumDef {
    public EnumDef(let name: String, let values: ArrayList<EnumValueDef>) {
    }
}

func parseEnumsJson(enumsJson: JsonValue): ArrayList<EnumDef> {
    let result = ArrayList<EnumDef>()

    let enumsJsonObj = enumsJson.asObject()
    for ((k, vJ) in enumsJsonObj.getFields()) {
        let values = ArrayList<EnumValueDef>()
        for (vDefJ in vJ.asArray().getItems()) {
            let vDefJObj = vDefJ.asObject()
            values.append(
                EnumValueDef(
                    Int32(vDefJObj["calc_value"].asInt().getValue()),
                    vDefJObj["name"].asString().getValue(),
                    vDefJObj["value"].asString().getValue(),
                )
            )
        }
        result.append(EnumDef(k, values))
    }

    return result
}

func genEnumsCodeImpl<T>(os: StringWriter<T>, pkgName: String, enumDefs: ArrayList<EnumDef>) where T <: OutputStream {
    // SOME COMMENTS ....
    //
    // package xxx
    //
    // // enum EnumName0
    // public type EnumName0 = Int32
    // 
    // public const EnumName0_Value0: EnumName0 = ...
    // public const EnumName0_Value1: EnumName0 = ...
    // public const EnumName0_Value2: EnumName0 = ...
    // 
    // // enum EnumName1
    // type EnumName1 = Int32
    // ...

    let symbols = ArrayList<String>()
    os.writeln(AUTOGENERATED_FILE_HEAD_COMMENTS)
    os.writeln()
    os.writeln("package ${pkgName}")
    os.writeln()
    for (def in enumDefs) {
        os.writeln("// enum ${def.name}")
        os.writeln("public type ${def.name} = Int32")
        os.writeln()
        symbols.append(def.name)
        for (valueDef in def.values) {
            os.writeln("public const ${valueDef.name}: ${def.name} = ${valueDef.calcValue}")
            symbols.append(valueDef.name)
        }
        os.writeln()
    }
    return symbols
}

func genEnumsCode(filename: String, pkgName: String, enumDefs: ArrayList<EnumDef>): ArrayList<String> {
    try (fp = File(filename, OpenOption.CreateOrTruncate(false))) {
        try (sw = StringWriter(fp)) {
            return genEnumsCodeImpl(sw, pkgName, enumDefs)
        }
    }
    throw IllegalStateException("illegal state")
}
