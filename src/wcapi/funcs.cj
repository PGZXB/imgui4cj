// +----------------------------------------------------+
// + THIS FILE IS AUTO-GENERATED BY `cimgui_generator`. +
// +      FROM: https://github.com/PGZXB/imgui4cj       +
// +------------------- DO NOT EDIT. -------------------+

package wcapi

import capi.*

func ImBitVector_Clear(self: ImBitVector): Unit {
    return capi.ImBitVector_Clear(self.getCPointer())
}

func ImBitVector_ClearBit(self: ImBitVector, n: Int32): Unit {
    return capi.ImBitVector_ClearBit(self.getCPointer(), n)
}

func ImBitVector_Create(self: ImBitVector, sz: Int32): Unit {
    return capi.ImBitVector_Create(self.getCPointer(), sz)
}

func ImBitVector_SetBit(self: ImBitVector, n: Int32): Unit {
    return capi.ImBitVector_SetBit(self.getCPointer(), n)
}

func ImBitVector_TestBit(self: ImBitVector, n: Int32): Bool {
    return capi.ImBitVector_TestBit(self.getCPointer(), n)
}

func ImColor_HSV(pOut: ImColor, h: Float32, s: Float32, v: Float32, a: Float32): Unit {
    return capi.ImColor_HSV(pOut.getCPointer(), h, s, v, a)
}

func ImColor_ImColor_Nil(): ImColor {
    return ImColor(capi.ImColor_ImColor_Nil(), owned: false)
}

func ImColor_ImColor_Float(r: Float32, g: Float32, b: Float32, a: Float32): ImColor {
    return ImColor(capi.ImColor_ImColor_Float(r, g, b, a), owned: false)
}

func ImColor_ImColor_Vec4(col: ImVec4): ImColor {
    return ImColor(capi.ImColor_ImColor_Vec4(unsafe { col.getCPointer().read() }), owned: false)
}

func ImColor_ImColor_Int(r: Int32, g: Int32, b: Int32, a: Int32): ImColor {
    return ImColor(capi.ImColor_ImColor_Int(r, g, b, a), owned: false)
}

func ImColor_ImColor_U32(rgba: ImU32): ImColor {
    return ImColor(capi.ImColor_ImColor_U32(rgba), owned: false)
}

func ImColor_SetHSV(self: ImColor, h: Float32, s: Float32, v: Float32, a: Float32): Unit {
    return capi.ImColor_SetHSV(self.getCPointer(), h, s, v, a)
}

func ImDrawCmd_GetTexID(self: ImDrawCmd): ImTextureID {
    return capi.ImDrawCmd_GetTexID(self.getCPointer())
}

func ImDrawCmd_ImDrawCmd(): ImDrawCmd {
    return ImDrawCmd(capi.ImDrawCmd_ImDrawCmd(), owned: false)
}

func ImDrawDataBuilder_ImDrawDataBuilder(): ImDrawDataBuilder {
    return ImDrawDataBuilder(capi.ImDrawDataBuilder_ImDrawDataBuilder(), owned: false)
}

func ImDrawData_AddDrawList(self: ImDrawData, draw_list: ImDrawList): Unit {
    return capi.ImDrawData_AddDrawList(self.getCPointer(), draw_list.getCPointer())
}

func ImDrawData_Clear(self: ImDrawData): Unit {
    return capi.ImDrawData_Clear(self.getCPointer())
}

func ImDrawData_DeIndexAllBuffers(self: ImDrawData): Unit {
    return capi.ImDrawData_DeIndexAllBuffers(self.getCPointer())
}

func ImDrawData_ImDrawData(): ImDrawData {
    return ImDrawData(capi.ImDrawData_ImDrawData(), owned: false)
}

func ImDrawData_ScaleClipRects(self: ImDrawData, fb_scale: ImVec2): Unit {
    return capi.ImDrawData_ScaleClipRects(self.getCPointer(), unsafe { fb_scale.getCPointer().read() })
}

func ImDrawListSharedData_ImDrawListSharedData(): ImDrawListSharedData {
    return ImDrawListSharedData(capi.ImDrawListSharedData_ImDrawListSharedData(), owned: false)
}

func ImDrawListSharedData_SetCircleTessellationMaxError(self: ImDrawListSharedData, max_error: Float32): Unit {
    return capi.ImDrawListSharedData_SetCircleTessellationMaxError(self.getCPointer(), max_error)
}

func ImDrawListSplitter_Clear(self: ImDrawListSplitter): Unit {
    return capi.ImDrawListSplitter_Clear(self.getCPointer())
}

func ImDrawListSplitter_ClearFreeMemory(self: ImDrawListSplitter): Unit {
    return capi.ImDrawListSplitter_ClearFreeMemory(self.getCPointer())
}

func ImDrawListSplitter_ImDrawListSplitter(): ImDrawListSplitter {
    return ImDrawListSplitter(capi.ImDrawListSplitter_ImDrawListSplitter(), owned: false)
}

func ImDrawListSplitter_Merge(self: ImDrawListSplitter, draw_list: ImDrawList): Unit {
    return capi.ImDrawListSplitter_Merge(self.getCPointer(), draw_list.getCPointer())
}

func ImDrawListSplitter_SetCurrentChannel(self: ImDrawListSplitter, draw_list: ImDrawList, channel_idx: Int32): Unit {
    return capi.ImDrawListSplitter_SetCurrentChannel(self.getCPointer(), draw_list.getCPointer(), channel_idx)
}

func ImDrawListSplitter_Split(self: ImDrawListSplitter, draw_list: ImDrawList, count: Int32): Unit {
    return capi.ImDrawListSplitter_Split(self.getCPointer(), draw_list.getCPointer(), count)
}

func ImDrawList_AddBezierCubic(self: ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: ImU32, thickness: Float32, num_segments: Int32): Unit {
    return capi.ImDrawList_AddBezierCubic(self.getCPointer(), unsafe { p1.getCPointer().read() }, unsafe { p2.getCPointer().read() }, unsafe { p3.getCPointer().read() }, unsafe { p4.getCPointer().read() }, col, thickness, num_segments)
}

func ImDrawList_AddBezierQuadratic(self: ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, col: ImU32, thickness: Float32, num_segments: Int32): Unit {
    return capi.ImDrawList_AddBezierQuadratic(self.getCPointer(), unsafe { p1.getCPointer().read() }, unsafe { p2.getCPointer().read() }, unsafe { p3.getCPointer().read() }, col, thickness, num_segments)
}

func ImDrawList_AddCallback(self: ImDrawList, callback: ImDrawCallback, callback_data: Ref<Unit>): Unit {
    return capi.ImDrawList_AddCallback(self.getCPointer(), callback, callback_data.getCPointer())
}

func ImDrawList_AddCircle(self: ImDrawList, center: ImVec2, radius: Float32, col: ImU32, num_segments: Int32, thickness: Float32): Unit {
    return capi.ImDrawList_AddCircle(self.getCPointer(), unsafe { center.getCPointer().read() }, radius, col, num_segments, thickness)
}

func ImDrawList_AddCircleFilled(self: ImDrawList, center: ImVec2, radius: Float32, col: ImU32, num_segments: Int32): Unit {
    return capi.ImDrawList_AddCircleFilled(self.getCPointer(), unsafe { center.getCPointer().read() }, radius, col, num_segments)
}

func ImDrawList_AddConcavePolyFilled(self: ImDrawList, points: ImVec2, num_points: Int32, col: ImU32): Unit {
    return capi.ImDrawList_AddConcavePolyFilled(self.getCPointer(), points.getCPointer(), num_points, col)
}

func ImDrawList_AddConvexPolyFilled(self: ImDrawList, points: ImVec2, num_points: Int32, col: ImU32): Unit {
    return capi.ImDrawList_AddConvexPolyFilled(self.getCPointer(), points.getCPointer(), num_points, col)
}

func ImDrawList_AddDrawCmd(self: ImDrawList): Unit {
    return capi.ImDrawList_AddDrawCmd(self.getCPointer())
}

func ImDrawList_AddEllipse(self: ImDrawList, center: ImVec2, radius: ImVec2, col: ImU32, rot: Float32, num_segments: Int32, thickness: Float32): Unit {
    return capi.ImDrawList_AddEllipse(self.getCPointer(), unsafe { center.getCPointer().read() }, unsafe { radius.getCPointer().read() }, col, rot, num_segments, thickness)
}

func ImDrawList_AddEllipseFilled(self: ImDrawList, center: ImVec2, radius: ImVec2, col: ImU32, rot: Float32, num_segments: Int32): Unit {
    return capi.ImDrawList_AddEllipseFilled(self.getCPointer(), unsafe { center.getCPointer().read() }, unsafe { radius.getCPointer().read() }, col, rot, num_segments)
}

func ImDrawList_AddImage(self: ImDrawList, user_texture_id: ImTextureID, p_min: ImVec2, p_max: ImVec2, uv_min: ImVec2, uv_max: ImVec2, col: ImU32): Unit {
    return capi.ImDrawList_AddImage(self.getCPointer(), user_texture_id, unsafe { p_min.getCPointer().read() }, unsafe { p_max.getCPointer().read() }, unsafe { uv_min.getCPointer().read() }, unsafe { uv_max.getCPointer().read() }, col)
}

func ImDrawList_AddImageQuad(self: ImDrawList, user_texture_id: ImTextureID, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, uv1: ImVec2, uv2: ImVec2, uv3: ImVec2, uv4: ImVec2, col: ImU32): Unit {
    return capi.ImDrawList_AddImageQuad(self.getCPointer(), user_texture_id, unsafe { p1.getCPointer().read() }, unsafe { p2.getCPointer().read() }, unsafe { p3.getCPointer().read() }, unsafe { p4.getCPointer().read() }, unsafe { uv1.getCPointer().read() }, unsafe { uv2.getCPointer().read() }, unsafe { uv3.getCPointer().read() }, unsafe { uv4.getCPointer().read() }, col)
}

func ImDrawList_AddImageRounded(self: ImDrawList, user_texture_id: ImTextureID, p_min: ImVec2, p_max: ImVec2, uv_min: ImVec2, uv_max: ImVec2, col: ImU32, rounding: Float32, flags: ImDrawFlags): Unit {
    return capi.ImDrawList_AddImageRounded(self.getCPointer(), user_texture_id, unsafe { p_min.getCPointer().read() }, unsafe { p_max.getCPointer().read() }, unsafe { uv_min.getCPointer().read() }, unsafe { uv_max.getCPointer().read() }, col, rounding, flags)
}

func ImDrawList_AddLine(self: ImDrawList, p1: ImVec2, p2: ImVec2, col: ImU32, thickness: Float32): Unit {
    return capi.ImDrawList_AddLine(self.getCPointer(), unsafe { p1.getCPointer().read() }, unsafe { p2.getCPointer().read() }, col, thickness)
}

func ImDrawList_AddNgon(self: ImDrawList, center: ImVec2, radius: Float32, col: ImU32, num_segments: Int32, thickness: Float32): Unit {
    return capi.ImDrawList_AddNgon(self.getCPointer(), unsafe { center.getCPointer().read() }, radius, col, num_segments, thickness)
}

func ImDrawList_AddNgonFilled(self: ImDrawList, center: ImVec2, radius: Float32, col: ImU32, num_segments: Int32): Unit {
    return capi.ImDrawList_AddNgonFilled(self.getCPointer(), unsafe { center.getCPointer().read() }, radius, col, num_segments)
}

func ImDrawList_AddPolyline(self: ImDrawList, points: ImVec2, num_points: Int32, col: ImU32, flags: ImDrawFlags, thickness: Float32): Unit {
    return capi.ImDrawList_AddPolyline(self.getCPointer(), points.getCPointer(), num_points, col, flags, thickness)
}

func ImDrawList_AddQuad(self: ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: ImU32, thickness: Float32): Unit {
    return capi.ImDrawList_AddQuad(self.getCPointer(), unsafe { p1.getCPointer().read() }, unsafe { p2.getCPointer().read() }, unsafe { p3.getCPointer().read() }, unsafe { p4.getCPointer().read() }, col, thickness)
}

func ImDrawList_AddQuadFilled(self: ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: ImU32): Unit {
    return capi.ImDrawList_AddQuadFilled(self.getCPointer(), unsafe { p1.getCPointer().read() }, unsafe { p2.getCPointer().read() }, unsafe { p3.getCPointer().read() }, unsafe { p4.getCPointer().read() }, col)
}

func ImDrawList_AddRect(self: ImDrawList, p_min: ImVec2, p_max: ImVec2, col: ImU32, rounding: Float32, flags: ImDrawFlags, thickness: Float32): Unit {
    return capi.ImDrawList_AddRect(self.getCPointer(), unsafe { p_min.getCPointer().read() }, unsafe { p_max.getCPointer().read() }, col, rounding, flags, thickness)
}

func ImDrawList_AddRectFilled(self: ImDrawList, p_min: ImVec2, p_max: ImVec2, col: ImU32, rounding: Float32, flags: ImDrawFlags): Unit {
    return capi.ImDrawList_AddRectFilled(self.getCPointer(), unsafe { p_min.getCPointer().read() }, unsafe { p_max.getCPointer().read() }, col, rounding, flags)
}

func ImDrawList_AddRectFilledMultiColor(self: ImDrawList, p_min: ImVec2, p_max: ImVec2, col_upr_left: ImU32, col_upr_right: ImU32, col_bot_right: ImU32, col_bot_left: ImU32): Unit {
    return capi.ImDrawList_AddRectFilledMultiColor(self.getCPointer(), unsafe { p_min.getCPointer().read() }, unsafe { p_max.getCPointer().read() }, col_upr_left, col_upr_right, col_bot_right, col_bot_left)
}

func ImDrawList_AddText_Vec2(self: ImDrawList, pos: ImVec2, col: ImU32, text_begin: CStringConvertable, text_end: CStringConvertable): Unit {
    return capi.ImDrawList_AddText_Vec2(self.getCPointer(), unsafe { pos.getCPointer().read() }, col, text_begin.asCString(), text_end.asCString())
}

func ImDrawList_AddText_FontPtr(self: ImDrawList, font: ImFont, font_size: Float32, pos: ImVec2, col: ImU32, text_begin: CStringConvertable, text_end: CStringConvertable, wrap_width: Float32, cpu_fine_clip_rect: ImVec4): Unit {
    return capi.ImDrawList_AddText_FontPtr(self.getCPointer(), font.getCPointer(), font_size, unsafe { pos.getCPointer().read() }, col, text_begin.asCString(), text_end.asCString(), wrap_width, cpu_fine_clip_rect.getCPointer())
}

func ImDrawList_AddTriangle(self: ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, col: ImU32, thickness: Float32): Unit {
    return capi.ImDrawList_AddTriangle(self.getCPointer(), unsafe { p1.getCPointer().read() }, unsafe { p2.getCPointer().read() }, unsafe { p3.getCPointer().read() }, col, thickness)
}

func ImDrawList_AddTriangleFilled(self: ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, col: ImU32): Unit {
    return capi.ImDrawList_AddTriangleFilled(self.getCPointer(), unsafe { p1.getCPointer().read() }, unsafe { p2.getCPointer().read() }, unsafe { p3.getCPointer().read() }, col)
}

func ImDrawList_ChannelsMerge(self: ImDrawList): Unit {
    return capi.ImDrawList_ChannelsMerge(self.getCPointer())
}

func ImDrawList_ChannelsSetCurrent(self: ImDrawList, n: Int32): Unit {
    return capi.ImDrawList_ChannelsSetCurrent(self.getCPointer(), n)
}

func ImDrawList_ChannelsSplit(self: ImDrawList, count: Int32): Unit {
    return capi.ImDrawList_ChannelsSplit(self.getCPointer(), count)
}

func ImDrawList_CloneOutput(self: ImDrawList): ImDrawList {
    return ImDrawList(capi.ImDrawList_CloneOutput(self.getCPointer()), owned: false)
}

func ImDrawList_GetClipRectMax(pOut: ImVec2, self: ImDrawList): Unit {
    return capi.ImDrawList_GetClipRectMax(pOut.getCPointer(), self.getCPointer())
}

func ImDrawList_GetClipRectMin(pOut: ImVec2, self: ImDrawList): Unit {
    return capi.ImDrawList_GetClipRectMin(pOut.getCPointer(), self.getCPointer())
}

func ImDrawList_ImDrawList(shared_data: ImDrawListSharedData): ImDrawList {
    return ImDrawList(capi.ImDrawList_ImDrawList(shared_data.getCPointer()), owned: false)
}

func ImDrawList_PathArcTo(self: ImDrawList, center: ImVec2, radius: Float32, a_min: Float32, a_max: Float32, num_segments: Int32): Unit {
    return capi.ImDrawList_PathArcTo(self.getCPointer(), unsafe { center.getCPointer().read() }, radius, a_min, a_max, num_segments)
}

func ImDrawList_PathArcToFast(self: ImDrawList, center: ImVec2, radius: Float32, a_min_of_12: Int32, a_max_of_12: Int32): Unit {
    return capi.ImDrawList_PathArcToFast(self.getCPointer(), unsafe { center.getCPointer().read() }, radius, a_min_of_12, a_max_of_12)
}

func ImDrawList_PathBezierCubicCurveTo(self: ImDrawList, p2: ImVec2, p3: ImVec2, p4: ImVec2, num_segments: Int32): Unit {
    return capi.ImDrawList_PathBezierCubicCurveTo(self.getCPointer(), unsafe { p2.getCPointer().read() }, unsafe { p3.getCPointer().read() }, unsafe { p4.getCPointer().read() }, num_segments)
}

func ImDrawList_PathBezierQuadraticCurveTo(self: ImDrawList, p2: ImVec2, p3: ImVec2, num_segments: Int32): Unit {
    return capi.ImDrawList_PathBezierQuadraticCurveTo(self.getCPointer(), unsafe { p2.getCPointer().read() }, unsafe { p3.getCPointer().read() }, num_segments)
}

func ImDrawList_PathClear(self: ImDrawList): Unit {
    return capi.ImDrawList_PathClear(self.getCPointer())
}

func ImDrawList_PathEllipticalArcTo(self: ImDrawList, center: ImVec2, radius: ImVec2, rot: Float32, a_min: Float32, a_max: Float32, num_segments: Int32): Unit {
    return capi.ImDrawList_PathEllipticalArcTo(self.getCPointer(), unsafe { center.getCPointer().read() }, unsafe { radius.getCPointer().read() }, rot, a_min, a_max, num_segments)
}

func ImDrawList_PathFillConcave(self: ImDrawList, col: ImU32): Unit {
    return capi.ImDrawList_PathFillConcave(self.getCPointer(), col)
}

func ImDrawList_PathFillConvex(self: ImDrawList, col: ImU32): Unit {
    return capi.ImDrawList_PathFillConvex(self.getCPointer(), col)
}

func ImDrawList_PathLineTo(self: ImDrawList, pos: ImVec2): Unit {
    return capi.ImDrawList_PathLineTo(self.getCPointer(), unsafe { pos.getCPointer().read() })
}

func ImDrawList_PathLineToMergeDuplicate(self: ImDrawList, pos: ImVec2): Unit {
    return capi.ImDrawList_PathLineToMergeDuplicate(self.getCPointer(), unsafe { pos.getCPointer().read() })
}

func ImDrawList_PathRect(self: ImDrawList, rect_min: ImVec2, rect_max: ImVec2, rounding: Float32, flags: ImDrawFlags): Unit {
    return capi.ImDrawList_PathRect(self.getCPointer(), unsafe { rect_min.getCPointer().read() }, unsafe { rect_max.getCPointer().read() }, rounding, flags)
}

func ImDrawList_PathStroke(self: ImDrawList, col: ImU32, flags: ImDrawFlags, thickness: Float32): Unit {
    return capi.ImDrawList_PathStroke(self.getCPointer(), col, flags, thickness)
}

func ImDrawList_PopClipRect(self: ImDrawList): Unit {
    return capi.ImDrawList_PopClipRect(self.getCPointer())
}

func ImDrawList_PopTextureID(self: ImDrawList): Unit {
    return capi.ImDrawList_PopTextureID(self.getCPointer())
}

func ImDrawList_PrimQuadUV(self: ImDrawList, a: ImVec2, b: ImVec2, c: ImVec2, d: ImVec2, uv_a: ImVec2, uv_b: ImVec2, uv_c: ImVec2, uv_d: ImVec2, col: ImU32): Unit {
    return capi.ImDrawList_PrimQuadUV(self.getCPointer(), unsafe { a.getCPointer().read() }, unsafe { b.getCPointer().read() }, unsafe { c.getCPointer().read() }, unsafe { d.getCPointer().read() }, unsafe { uv_a.getCPointer().read() }, unsafe { uv_b.getCPointer().read() }, unsafe { uv_c.getCPointer().read() }, unsafe { uv_d.getCPointer().read() }, col)
}

func ImDrawList_PrimRect(self: ImDrawList, a: ImVec2, b: ImVec2, col: ImU32): Unit {
    return capi.ImDrawList_PrimRect(self.getCPointer(), unsafe { a.getCPointer().read() }, unsafe { b.getCPointer().read() }, col)
}

func ImDrawList_PrimRectUV(self: ImDrawList, a: ImVec2, b: ImVec2, uv_a: ImVec2, uv_b: ImVec2, col: ImU32): Unit {
    return capi.ImDrawList_PrimRectUV(self.getCPointer(), unsafe { a.getCPointer().read() }, unsafe { b.getCPointer().read() }, unsafe { uv_a.getCPointer().read() }, unsafe { uv_b.getCPointer().read() }, col)
}

func ImDrawList_PrimReserve(self: ImDrawList, idx_count: Int32, vtx_count: Int32): Unit {
    return capi.ImDrawList_PrimReserve(self.getCPointer(), idx_count, vtx_count)
}

func ImDrawList_PrimUnreserve(self: ImDrawList, idx_count: Int32, vtx_count: Int32): Unit {
    return capi.ImDrawList_PrimUnreserve(self.getCPointer(), idx_count, vtx_count)
}

func ImDrawList_PrimVtx(self: ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32): Unit {
    return capi.ImDrawList_PrimVtx(self.getCPointer(), unsafe { pos.getCPointer().read() }, unsafe { uv.getCPointer().read() }, col)
}

func ImDrawList_PrimWriteIdx(self: ImDrawList, idx: ImDrawIdx): Unit {
    return capi.ImDrawList_PrimWriteIdx(self.getCPointer(), idx)
}

func ImDrawList_PrimWriteVtx(self: ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32): Unit {
    return capi.ImDrawList_PrimWriteVtx(self.getCPointer(), unsafe { pos.getCPointer().read() }, unsafe { uv.getCPointer().read() }, col)
}

func ImDrawList_PushClipRect(self: ImDrawList, clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: Bool): Unit {
    return capi.ImDrawList_PushClipRect(self.getCPointer(), unsafe { clip_rect_min.getCPointer().read() }, unsafe { clip_rect_max.getCPointer().read() }, intersect_with_current_clip_rect)
}

func ImDrawList_PushClipRectFullScreen(self: ImDrawList): Unit {
    return capi.ImDrawList_PushClipRectFullScreen(self.getCPointer())
}

func ImDrawList_PushTextureID(self: ImDrawList, texture_id: ImTextureID): Unit {
    return capi.ImDrawList_PushTextureID(self.getCPointer(), texture_id)
}

func ImDrawList__CalcCircleAutoSegmentCount(self: ImDrawList, radius: Float32): Int32 {
    return capi.ImDrawList__CalcCircleAutoSegmentCount(self.getCPointer(), radius)
}

func ImDrawList__ClearFreeMemory(self: ImDrawList): Unit {
    return capi.ImDrawList__ClearFreeMemory(self.getCPointer())
}

func ImDrawList__OnChangedClipRect(self: ImDrawList): Unit {
    return capi.ImDrawList__OnChangedClipRect(self.getCPointer())
}

func ImDrawList__OnChangedTextureID(self: ImDrawList): Unit {
    return capi.ImDrawList__OnChangedTextureID(self.getCPointer())
}

func ImDrawList__OnChangedVtxOffset(self: ImDrawList): Unit {
    return capi.ImDrawList__OnChangedVtxOffset(self.getCPointer())
}

func ImDrawList__PathArcToFastEx(self: ImDrawList, center: ImVec2, radius: Float32, a_min_sample: Int32, a_max_sample: Int32, a_step: Int32): Unit {
    return capi.ImDrawList__PathArcToFastEx(self.getCPointer(), unsafe { center.getCPointer().read() }, radius, a_min_sample, a_max_sample, a_step)
}

func ImDrawList__PathArcToN(self: ImDrawList, center: ImVec2, radius: Float32, a_min: Float32, a_max: Float32, num_segments: Int32): Unit {
    return capi.ImDrawList__PathArcToN(self.getCPointer(), unsafe { center.getCPointer().read() }, radius, a_min, a_max, num_segments)
}

func ImDrawList__PopUnusedDrawCmd(self: ImDrawList): Unit {
    return capi.ImDrawList__PopUnusedDrawCmd(self.getCPointer())
}

func ImDrawList__ResetForNewFrame(self: ImDrawList): Unit {
    return capi.ImDrawList__ResetForNewFrame(self.getCPointer())
}

func ImDrawList__TryMergeDrawCmds(self: ImDrawList): Unit {
    return capi.ImDrawList__TryMergeDrawCmds(self.getCPointer())
}

func ImFontAtlasCustomRect_ImFontAtlasCustomRect(): ImFontAtlasCustomRect {
    return ImFontAtlasCustomRect(capi.ImFontAtlasCustomRect_ImFontAtlasCustomRect(), owned: false)
}

func ImFontAtlasCustomRect_IsPacked(self: ImFontAtlasCustomRect): Bool {
    return capi.ImFontAtlasCustomRect_IsPacked(self.getCPointer())
}

func ImFontAtlas_AddCustomRectFontGlyph(self: ImFontAtlas, font: ImFont, id: ImWchar, width: Int32, height: Int32, advance_x: Float32, offset: ImVec2): Int32 {
    return capi.ImFontAtlas_AddCustomRectFontGlyph(self.getCPointer(), font.getCPointer(), id, width, height, advance_x, unsafe { offset.getCPointer().read() })
}

func ImFontAtlas_AddCustomRectRegular(self: ImFontAtlas, width: Int32, height: Int32): Int32 {
    return capi.ImFontAtlas_AddCustomRectRegular(self.getCPointer(), width, height)
}

func ImFontAtlas_AddFont(self: ImFontAtlas, font_cfg: ImFontConfig): ImFont {
    return ImFont(capi.ImFontAtlas_AddFont(self.getCPointer(), font_cfg.getCPointer()), owned: false)
}

func ImFontAtlas_AddFontDefault(self: ImFontAtlas, font_cfg: ImFontConfig): ImFont {
    return ImFont(capi.ImFontAtlas_AddFontDefault(self.getCPointer(), font_cfg.getCPointer()), owned: false)
}

func ImFontAtlas_AddFontFromFileTTF(self: ImFontAtlas, filename: CStringConvertable, size_pixels: Float32, font_cfg: ImFontConfig, glyph_ranges: Ref<ImWchar>): ImFont {
    return ImFont(capi.ImFontAtlas_AddFontFromFileTTF(self.getCPointer(), filename.asCString(), size_pixels, font_cfg.getCPointer(), glyph_ranges.getCPointer()), owned: false)
}

func ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(self: ImFontAtlas, compressed_font_data_base85: CStringConvertable, size_pixels: Float32, font_cfg: ImFontConfig, glyph_ranges: Ref<ImWchar>): ImFont {
    return ImFont(capi.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(self.getCPointer(), compressed_font_data_base85.asCString(), size_pixels, font_cfg.getCPointer(), glyph_ranges.getCPointer()), owned: false)
}

func ImFontAtlas_AddFontFromMemoryCompressedTTF(self: ImFontAtlas, compressed_font_data: Ref<Unit>, compressed_font_data_size: Int32, size_pixels: Float32, font_cfg: ImFontConfig, glyph_ranges: Ref<ImWchar>): ImFont {
    return ImFont(capi.ImFontAtlas_AddFontFromMemoryCompressedTTF(self.getCPointer(), compressed_font_data.getCPointer(), compressed_font_data_size, size_pixels, font_cfg.getCPointer(), glyph_ranges.getCPointer()), owned: false)
}

func ImFontAtlas_AddFontFromMemoryTTF(self: ImFontAtlas, font_data: Ref<Unit>, font_data_size: Int32, size_pixels: Float32, font_cfg: ImFontConfig, glyph_ranges: Ref<ImWchar>): ImFont {
    return ImFont(capi.ImFontAtlas_AddFontFromMemoryTTF(self.getCPointer(), font_data.getCPointer(), font_data_size, size_pixels, font_cfg.getCPointer(), glyph_ranges.getCPointer()), owned: false)
}

func ImFontAtlas_Build(self: ImFontAtlas): Bool {
    return capi.ImFontAtlas_Build(self.getCPointer())
}

func ImFontAtlas_CalcCustomRectUV(self: ImFontAtlas, rect: ImFontAtlasCustomRect, out_uv_min: ImVec2, out_uv_max: ImVec2): Unit {
    return capi.ImFontAtlas_CalcCustomRectUV(self.getCPointer(), rect.getCPointer(), out_uv_min.getCPointer(), out_uv_max.getCPointer())
}

func ImFontAtlas_Clear(self: ImFontAtlas): Unit {
    return capi.ImFontAtlas_Clear(self.getCPointer())
}

func ImFontAtlas_ClearFonts(self: ImFontAtlas): Unit {
    return capi.ImFontAtlas_ClearFonts(self.getCPointer())
}

func ImFontAtlas_ClearInputData(self: ImFontAtlas): Unit {
    return capi.ImFontAtlas_ClearInputData(self.getCPointer())
}

func ImFontAtlas_ClearTexData(self: ImFontAtlas): Unit {
    return capi.ImFontAtlas_ClearTexData(self.getCPointer())
}

func ImFontAtlas_GetCustomRectByIndex(self: ImFontAtlas, index: Int32): ImFontAtlasCustomRect {
    return ImFontAtlasCustomRect(capi.ImFontAtlas_GetCustomRectByIndex(self.getCPointer(), index), owned: false)
}

func ImFontAtlas_GetGlyphRangesChineseFull(self: ImFontAtlas): Ref<ImWchar> {
    return Ref<UInt16>.unsafeMake(capi.ImFontAtlas_GetGlyphRangesChineseFull(self.getCPointer()), count: -1, owned: false)
}

func ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(self: ImFontAtlas): Ref<ImWchar> {
    return Ref<UInt16>.unsafeMake(capi.ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(self.getCPointer()), count: -1, owned: false)
}

func ImFontAtlas_GetGlyphRangesCyrillic(self: ImFontAtlas): Ref<ImWchar> {
    return Ref<UInt16>.unsafeMake(capi.ImFontAtlas_GetGlyphRangesCyrillic(self.getCPointer()), count: -1, owned: false)
}

func ImFontAtlas_GetGlyphRangesDefault(self: ImFontAtlas): Ref<ImWchar> {
    return Ref<UInt16>.unsafeMake(capi.ImFontAtlas_GetGlyphRangesDefault(self.getCPointer()), count: -1, owned: false)
}

func ImFontAtlas_GetGlyphRangesGreek(self: ImFontAtlas): Ref<ImWchar> {
    return Ref<UInt16>.unsafeMake(capi.ImFontAtlas_GetGlyphRangesGreek(self.getCPointer()), count: -1, owned: false)
}

func ImFontAtlas_GetGlyphRangesJapanese(self: ImFontAtlas): Ref<ImWchar> {
    return Ref<UInt16>.unsafeMake(capi.ImFontAtlas_GetGlyphRangesJapanese(self.getCPointer()), count: -1, owned: false)
}

func ImFontAtlas_GetGlyphRangesKorean(self: ImFontAtlas): Ref<ImWchar> {
    return Ref<UInt16>.unsafeMake(capi.ImFontAtlas_GetGlyphRangesKorean(self.getCPointer()), count: -1, owned: false)
}

func ImFontAtlas_GetGlyphRangesThai(self: ImFontAtlas): Ref<ImWchar> {
    return Ref<UInt16>.unsafeMake(capi.ImFontAtlas_GetGlyphRangesThai(self.getCPointer()), count: -1, owned: false)
}

func ImFontAtlas_GetGlyphRangesVietnamese(self: ImFontAtlas): Ref<ImWchar> {
    return Ref<UInt16>.unsafeMake(capi.ImFontAtlas_GetGlyphRangesVietnamese(self.getCPointer()), count: -1, owned: false)
}

func ImFontAtlas_GetMouseCursorTexData(self: ImFontAtlas, cursor: ImGuiMouseCursor, out_offset: ImVec2, out_size: ImVec2, out_uv_border: ImVec2, out_uv_fill: ImVec2): Bool {
    return capi.ImFontAtlas_GetMouseCursorTexData(self.getCPointer(), cursor, out_offset.getCPointer(), out_size.getCPointer(), out_uv_border.getCPointer(), out_uv_fill.getCPointer())
}

func ImFontAtlas_GetTexDataAsAlpha8(self: ImFontAtlas, out_pixels: CPointer<CPointer<UInt8>>, out_width: Ref<Int32>, out_height: Ref<Int32>, out_bytes_per_pixel: Ref<Int32>): Unit {
    return capi.ImFontAtlas_GetTexDataAsAlpha8(self.getCPointer(), out_pixels, out_width.getCPointer(), out_height.getCPointer(), out_bytes_per_pixel.getCPointer())
}

func ImFontAtlas_GetTexDataAsRGBA32(self: ImFontAtlas, out_pixels: CPointer<CPointer<UInt8>>, out_width: Ref<Int32>, out_height: Ref<Int32>, out_bytes_per_pixel: Ref<Int32>): Unit {
    return capi.ImFontAtlas_GetTexDataAsRGBA32(self.getCPointer(), out_pixels, out_width.getCPointer(), out_height.getCPointer(), out_bytes_per_pixel.getCPointer())
}

func ImFontAtlas_ImFontAtlas(): ImFontAtlas {
    return ImFontAtlas(capi.ImFontAtlas_ImFontAtlas(), owned: false)
}

func ImFontAtlas_IsBuilt(self: ImFontAtlas): Bool {
    return capi.ImFontAtlas_IsBuilt(self.getCPointer())
}

func ImFontAtlas_SetTexID(self: ImFontAtlas, id: ImTextureID): Unit {
    return capi.ImFontAtlas_SetTexID(self.getCPointer(), id)
}

func ImFontConfig_ImFontConfig(): ImFontConfig {
    return ImFontConfig(capi.ImFontConfig_ImFontConfig(), owned: false)
}

func ImFontGlyphRangesBuilder_AddChar(self: ImFontGlyphRangesBuilder, c: ImWchar): Unit {
    return capi.ImFontGlyphRangesBuilder_AddChar(self.getCPointer(), c)
}

func ImFontGlyphRangesBuilder_AddRanges(self: ImFontGlyphRangesBuilder, ranges: Ref<ImWchar>): Unit {
    return capi.ImFontGlyphRangesBuilder_AddRanges(self.getCPointer(), ranges.getCPointer())
}

func ImFontGlyphRangesBuilder_AddText(self: ImFontGlyphRangesBuilder, text: CStringConvertable, text_end: CStringConvertable): Unit {
    return capi.ImFontGlyphRangesBuilder_AddText(self.getCPointer(), text.asCString(), text_end.asCString())
}

func ImFontGlyphRangesBuilder_BuildRanges(self: ImFontGlyphRangesBuilder, out_ranges: ImVector_ImWchar): Unit {
    return capi.ImFontGlyphRangesBuilder_BuildRanges(self.getCPointer(), out_ranges.getCPointer())
}

func ImFontGlyphRangesBuilder_Clear(self: ImFontGlyphRangesBuilder): Unit {
    return capi.ImFontGlyphRangesBuilder_Clear(self.getCPointer())
}

func ImFontGlyphRangesBuilder_GetBit(self: ImFontGlyphRangesBuilder, n: UIntNative): Bool {
    return capi.ImFontGlyphRangesBuilder_GetBit(self.getCPointer(), n)
}

func ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder(): ImFontGlyphRangesBuilder {
    return ImFontGlyphRangesBuilder(capi.ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder(), owned: false)
}

func ImFontGlyphRangesBuilder_SetBit(self: ImFontGlyphRangesBuilder, n: UIntNative): Unit {
    return capi.ImFontGlyphRangesBuilder_SetBit(self.getCPointer(), n)
}

func ImFont_AddGlyph(self: ImFont, src_cfg: ImFontConfig, c: ImWchar, x0: Float32, y0: Float32, x1: Float32, y1: Float32, u0: Float32, v0: Float32, u1: Float32, v1: Float32, advance_x: Float32): Unit {
    return capi.ImFont_AddGlyph(self.getCPointer(), src_cfg.getCPointer(), c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x)
}

func ImFont_AddRemapChar(self: ImFont, dst: ImWchar, src: ImWchar, overwrite_dst: Bool): Unit {
    return capi.ImFont_AddRemapChar(self.getCPointer(), dst, src, overwrite_dst)
}

func ImFont_BuildLookupTable(self: ImFont): Unit {
    return capi.ImFont_BuildLookupTable(self.getCPointer())
}

func ImFont_CalcTextSizeA(pOut: ImVec2, self: ImFont, size: Float32, max_width: Float32, wrap_width: Float32, text_begin: CStringConvertable, text_end: CStringConvertable, remaining: Ref<CPointer<UInt8>>): Unit {
    return capi.ImFont_CalcTextSizeA(pOut.getCPointer(), self.getCPointer(), size, max_width, wrap_width, text_begin.asCString(), text_end.asCString(), remaining.getCPointer())
}

func ImFont_CalcWordWrapPositionA(self: ImFont, scale: Float32, text: CStringConvertable, text_end: CStringConvertable, wrap_width: Float32): String {
    return CString(capi.ImFont_CalcWordWrapPositionA(self.getCPointer(), scale, text.asCString(), text_end.asCString(), wrap_width)).toString()
}

func ImFont_ClearOutputData(self: ImFont): Unit {
    return capi.ImFont_ClearOutputData(self.getCPointer())
}

func ImFont_FindGlyph(self: ImFont, c: ImWchar): Ref<ImFontGlyph> {
    return Ref<Unit>.unsafeMake(capi.ImFont_FindGlyph(self.getCPointer(), c), count: -1, owned: false)
}

func ImFont_FindGlyphNoFallback(self: ImFont, c: ImWchar): Ref<ImFontGlyph> {
    return Ref<Unit>.unsafeMake(capi.ImFont_FindGlyphNoFallback(self.getCPointer(), c), count: -1, owned: false)
}

func ImFont_GetCharAdvance(self: ImFont, c: ImWchar): Float32 {
    return capi.ImFont_GetCharAdvance(self.getCPointer(), c)
}

func ImFont_GetDebugName(self: ImFont): String {
    return CString(capi.ImFont_GetDebugName(self.getCPointer())).toString()
}

func ImFont_GrowIndex(self: ImFont, new_size: Int32): Unit {
    return capi.ImFont_GrowIndex(self.getCPointer(), new_size)
}

func ImFont_ImFont(): ImFont {
    return ImFont(capi.ImFont_ImFont(), owned: false)
}

func ImFont_IsGlyphRangeUnused(self: ImFont, c_begin: UInt32, c_last: UInt32): Bool {
    return capi.ImFont_IsGlyphRangeUnused(self.getCPointer(), c_begin, c_last)
}

func ImFont_IsLoaded(self: ImFont): Bool {
    return capi.ImFont_IsLoaded(self.getCPointer())
}

func ImFont_RenderChar(self: ImFont, draw_list: ImDrawList, size: Float32, pos: ImVec2, col: ImU32, c: ImWchar): Unit {
    return capi.ImFont_RenderChar(self.getCPointer(), draw_list.getCPointer(), size, unsafe { pos.getCPointer().read() }, col, c)
}

func ImFont_RenderText(self: ImFont, draw_list: ImDrawList, size: Float32, pos: ImVec2, col: ImU32, clip_rect: ImVec4, text_begin: CStringConvertable, text_end: CStringConvertable, wrap_width: Float32, cpu_fine_clip: Bool): Unit {
    return capi.ImFont_RenderText(self.getCPointer(), draw_list.getCPointer(), size, unsafe { pos.getCPointer().read() }, col, unsafe { clip_rect.getCPointer().read() }, text_begin.asCString(), text_end.asCString(), wrap_width, cpu_fine_clip)
}

func ImFont_SetGlyphVisible(self: ImFont, c: ImWchar, visible: Bool): Unit {
    return capi.ImFont_SetGlyphVisible(self.getCPointer(), c, visible)
}

func ImGuiComboPreviewData_ImGuiComboPreviewData(): ImGuiComboPreviewData {
    return ImGuiComboPreviewData(capi.ImGuiComboPreviewData_ImGuiComboPreviewData(), owned: false)
}

func ImGuiContextHook_ImGuiContextHook(): ImGuiContextHook {
    return ImGuiContextHook(capi.ImGuiContextHook_ImGuiContextHook(), owned: false)
}

func ImGuiDataVarInfo_GetVarPtr(self: ImGuiDataVarInfo, parent: Ref<Unit>): Ref<Unit> {
    return Ref<Unit>.unsafeMake(capi.ImGuiDataVarInfo_GetVarPtr(self.getCPointer(), parent.getCPointer()), count: -1, owned: false)
}

func ImGuiDebugAllocInfo_ImGuiDebugAllocInfo(): ImGuiDebugAllocInfo {
    return ImGuiDebugAllocInfo(capi.ImGuiDebugAllocInfo_ImGuiDebugAllocInfo(), owned: false)
}

func ImGuiDockContext_ImGuiDockContext(): ImGuiDockContext {
    return ImGuiDockContext(capi.ImGuiDockContext_ImGuiDockContext(), owned: false)
}

func ImGuiIDStackTool_ImGuiIDStackTool(): ImGuiIDStackTool {
    return ImGuiIDStackTool(capi.ImGuiIDStackTool_ImGuiIDStackTool(), owned: false)
}

func ImGuiIO_AddFocusEvent(self: ImGuiIO, focused: Bool): Unit {
    return capi.ImGuiIO_AddFocusEvent(self.getCPointer(), focused)
}

func ImGuiIO_AddInputCharacter(self: ImGuiIO, c: UInt32): Unit {
    return capi.ImGuiIO_AddInputCharacter(self.getCPointer(), c)
}

func ImGuiIO_AddInputCharacterUTF16(self: ImGuiIO, c: ImWchar16): Unit {
    return capi.ImGuiIO_AddInputCharacterUTF16(self.getCPointer(), c)
}

func ImGuiIO_AddInputCharactersUTF8(self: ImGuiIO, str: CStringConvertable): Unit {
    return capi.ImGuiIO_AddInputCharactersUTF8(self.getCPointer(), str.asCString())
}

func ImGuiIO_AddKeyAnalogEvent(self: ImGuiIO, key: ImGuiKey, down: Bool, v: Float32): Unit {
    return capi.ImGuiIO_AddKeyAnalogEvent(self.getCPointer(), key, down, v)
}

func ImGuiIO_AddKeyEvent(self: ImGuiIO, key: ImGuiKey, down: Bool): Unit {
    return capi.ImGuiIO_AddKeyEvent(self.getCPointer(), key, down)
}

func ImGuiIO_AddMouseButtonEvent(self: ImGuiIO, button: Int32, down: Bool): Unit {
    return capi.ImGuiIO_AddMouseButtonEvent(self.getCPointer(), button, down)
}

func ImGuiIO_AddMousePosEvent(self: ImGuiIO, x: Float32, y: Float32): Unit {
    return capi.ImGuiIO_AddMousePosEvent(self.getCPointer(), x, y)
}

func ImGuiIO_AddMouseSourceEvent(self: ImGuiIO, source: ImGuiMouseSource): Unit {
    return capi.ImGuiIO_AddMouseSourceEvent(self.getCPointer(), source)
}

func ImGuiIO_AddMouseViewportEvent(self: ImGuiIO, id: ImGuiID): Unit {
    return capi.ImGuiIO_AddMouseViewportEvent(self.getCPointer(), id)
}

func ImGuiIO_AddMouseWheelEvent(self: ImGuiIO, wheel_x: Float32, wheel_y: Float32): Unit {
    return capi.ImGuiIO_AddMouseWheelEvent(self.getCPointer(), wheel_x, wheel_y)
}

func ImGuiIO_ClearEventsQueue(self: ImGuiIO): Unit {
    return capi.ImGuiIO_ClearEventsQueue(self.getCPointer())
}

func ImGuiIO_ClearInputKeys(self: ImGuiIO): Unit {
    return capi.ImGuiIO_ClearInputKeys(self.getCPointer())
}

func ImGuiIO_ImGuiIO(): ImGuiIO {
    return ImGuiIO(capi.ImGuiIO_ImGuiIO(), owned: false)
}

func ImGuiIO_SetAppAcceptingEvents(self: ImGuiIO, accepting_events: Bool): Unit {
    return capi.ImGuiIO_SetAppAcceptingEvents(self.getCPointer(), accepting_events)
}

func ImGuiIO_SetKeyEventNativeData(self: ImGuiIO, key: ImGuiKey, native_keycode: Int32, native_scancode: Int32, native_legacy_index: Int32): Unit {
    return capi.ImGuiIO_SetKeyEventNativeData(self.getCPointer(), key, native_keycode, native_scancode, native_legacy_index)
}

func ImGuiInputTextCallbackData_ClearSelection(self: ImGuiInputTextCallbackData): Unit {
    return capi.ImGuiInputTextCallbackData_ClearSelection(self.getCPointer())
}

func ImGuiInputTextCallbackData_DeleteChars(self: ImGuiInputTextCallbackData, pos: Int32, bytes_count: Int32): Unit {
    return capi.ImGuiInputTextCallbackData_DeleteChars(self.getCPointer(), pos, bytes_count)
}

func ImGuiInputTextCallbackData_HasSelection(self: ImGuiInputTextCallbackData): Bool {
    return capi.ImGuiInputTextCallbackData_HasSelection(self.getCPointer())
}

func ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(): ImGuiInputTextCallbackData {
    return ImGuiInputTextCallbackData(capi.ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(), owned: false)
}

func ImGuiInputTextCallbackData_InsertChars(self: ImGuiInputTextCallbackData, pos: Int32, text: CStringConvertable, text_end: CStringConvertable): Unit {
    return capi.ImGuiInputTextCallbackData_InsertChars(self.getCPointer(), pos, text.asCString(), text_end.asCString())
}

func ImGuiInputTextCallbackData_SelectAll(self: ImGuiInputTextCallbackData): Unit {
    return capi.ImGuiInputTextCallbackData_SelectAll(self.getCPointer())
}

func ImGuiInputTextDeactivatedState_ClearFreeMemory(self: ImGuiInputTextDeactivatedState): Unit {
    return capi.ImGuiInputTextDeactivatedState_ClearFreeMemory(self.getCPointer())
}

func ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState(): ImGuiInputTextDeactivatedState {
    return ImGuiInputTextDeactivatedState(capi.ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState(), owned: false)
}

func ImGuiInputTextState_ClearFreeMemory(self: ImGuiInputTextState): Unit {
    return capi.ImGuiInputTextState_ClearFreeMemory(self.getCPointer())
}

func ImGuiInputTextState_ClearSelection(self: ImGuiInputTextState): Unit {
    return capi.ImGuiInputTextState_ClearSelection(self.getCPointer())
}

func ImGuiInputTextState_ClearText(self: ImGuiInputTextState): Unit {
    return capi.ImGuiInputTextState_ClearText(self.getCPointer())
}

func ImGuiInputTextState_CursorAnimReset(self: ImGuiInputTextState): Unit {
    return capi.ImGuiInputTextState_CursorAnimReset(self.getCPointer())
}

func ImGuiInputTextState_CursorClamp(self: ImGuiInputTextState): Unit {
    return capi.ImGuiInputTextState_CursorClamp(self.getCPointer())
}

func ImGuiInputTextState_GetCursorPos(self: ImGuiInputTextState): Int32 {
    return capi.ImGuiInputTextState_GetCursorPos(self.getCPointer())
}

func ImGuiInputTextState_GetRedoAvailCount(self: ImGuiInputTextState): Int32 {
    return capi.ImGuiInputTextState_GetRedoAvailCount(self.getCPointer())
}

func ImGuiInputTextState_GetSelectionEnd(self: ImGuiInputTextState): Int32 {
    return capi.ImGuiInputTextState_GetSelectionEnd(self.getCPointer())
}

func ImGuiInputTextState_GetSelectionStart(self: ImGuiInputTextState): Int32 {
    return capi.ImGuiInputTextState_GetSelectionStart(self.getCPointer())
}

func ImGuiInputTextState_GetUndoAvailCount(self: ImGuiInputTextState): Int32 {
    return capi.ImGuiInputTextState_GetUndoAvailCount(self.getCPointer())
}

func ImGuiInputTextState_HasSelection(self: ImGuiInputTextState): Bool {
    return capi.ImGuiInputTextState_HasSelection(self.getCPointer())
}

func ImGuiInputTextState_ImGuiInputTextState(): ImGuiInputTextState {
    return ImGuiInputTextState(capi.ImGuiInputTextState_ImGuiInputTextState(), owned: false)
}

func ImGuiInputTextState_OnKeyPressed(self: ImGuiInputTextState, key: Int32): Unit {
    return capi.ImGuiInputTextState_OnKeyPressed(self.getCPointer(), key)
}

func ImGuiInputTextState_ReloadUserBufAndKeepSelection(self: ImGuiInputTextState): Unit {
    return capi.ImGuiInputTextState_ReloadUserBufAndKeepSelection(self.getCPointer())
}

func ImGuiInputTextState_ReloadUserBufAndMoveToEnd(self: ImGuiInputTextState): Unit {
    return capi.ImGuiInputTextState_ReloadUserBufAndMoveToEnd(self.getCPointer())
}

func ImGuiInputTextState_ReloadUserBufAndSelectAll(self: ImGuiInputTextState): Unit {
    return capi.ImGuiInputTextState_ReloadUserBufAndSelectAll(self.getCPointer())
}

func ImGuiInputTextState_SelectAll(self: ImGuiInputTextState): Unit {
    return capi.ImGuiInputTextState_SelectAll(self.getCPointer())
}

func ImGuiKeyOwnerData_ImGuiKeyOwnerData(): ImGuiKeyOwnerData {
    return ImGuiKeyOwnerData(capi.ImGuiKeyOwnerData_ImGuiKeyOwnerData(), owned: false)
}

func ImGuiKeyRoutingData_ImGuiKeyRoutingData(): ImGuiKeyRoutingData {
    return ImGuiKeyRoutingData(capi.ImGuiKeyRoutingData_ImGuiKeyRoutingData(), owned: false)
}

func ImGuiKeyRoutingTable_Clear(self: ImGuiKeyRoutingTable): Unit {
    return capi.ImGuiKeyRoutingTable_Clear(self.getCPointer())
}

func ImGuiKeyRoutingTable_ImGuiKeyRoutingTable(): ImGuiKeyRoutingTable {
    return ImGuiKeyRoutingTable(capi.ImGuiKeyRoutingTable_ImGuiKeyRoutingTable(), owned: false)
}

func ImGuiLastItemData_ImGuiLastItemData(): ImGuiLastItemData {
    return ImGuiLastItemData(capi.ImGuiLastItemData_ImGuiLastItemData(), owned: false)
}

func ImGuiListClipperData_ImGuiListClipperData(): ImGuiListClipperData {
    return ImGuiListClipperData(capi.ImGuiListClipperData_ImGuiListClipperData(), owned: false)
}

func ImGuiListClipperData_Reset(self: ImGuiListClipperData, clipper: ImGuiListClipper): Unit {
    return capi.ImGuiListClipperData_Reset(self.getCPointer(), clipper.getCPointer())
}

func ImGuiListClipperRange_FromIndices(min: Int32, max: Int32): ImGuiListClipperRange {
    return ImGuiListClipperRange(value: Some(capi.ImGuiListClipperRange_FromIndices(min, max)))
}

func ImGuiListClipperRange_FromPositions(y1: Float32, y2: Float32, off_min: Int32, off_max: Int32): ImGuiListClipperRange {
    return ImGuiListClipperRange(value: Some(capi.ImGuiListClipperRange_FromPositions(y1, y2, off_min, off_max)))
}

func ImGuiListClipper_Begin(self: ImGuiListClipper, items_count: Int32, items_height: Float32): Unit {
    return capi.ImGuiListClipper_Begin(self.getCPointer(), items_count, items_height)
}

func ImGuiListClipper_End(self: ImGuiListClipper): Unit {
    return capi.ImGuiListClipper_End(self.getCPointer())
}

func ImGuiListClipper_ImGuiListClipper(): ImGuiListClipper {
    return ImGuiListClipper(capi.ImGuiListClipper_ImGuiListClipper(), owned: false)
}

func ImGuiListClipper_IncludeItemByIndex(self: ImGuiListClipper, item_index: Int32): Unit {
    return capi.ImGuiListClipper_IncludeItemByIndex(self.getCPointer(), item_index)
}

func ImGuiListClipper_IncludeItemsByIndex(self: ImGuiListClipper, item_begin: Int32, item_end: Int32): Unit {
    return capi.ImGuiListClipper_IncludeItemsByIndex(self.getCPointer(), item_begin, item_end)
}

func ImGuiListClipper_Step(self: ImGuiListClipper): Bool {
    return capi.ImGuiListClipper_Step(self.getCPointer())
}

func ImGuiMenuColumns_CalcNextTotalWidth(self: ImGuiMenuColumns, update_offsets: Bool): Unit {
    return capi.ImGuiMenuColumns_CalcNextTotalWidth(self.getCPointer(), update_offsets)
}

func ImGuiMenuColumns_DeclColumns(self: ImGuiMenuColumns, w_icon: Float32, w_label: Float32, w_shortcut: Float32, w_mark: Float32): Float32 {
    return capi.ImGuiMenuColumns_DeclColumns(self.getCPointer(), w_icon, w_label, w_shortcut, w_mark)
}

func ImGuiMenuColumns_ImGuiMenuColumns(): ImGuiMenuColumns {
    return ImGuiMenuColumns(capi.ImGuiMenuColumns_ImGuiMenuColumns(), owned: false)
}

func ImGuiMenuColumns_Update(self: ImGuiMenuColumns, spacing: Float32, window_reappearing: Bool): Unit {
    return capi.ImGuiMenuColumns_Update(self.getCPointer(), spacing, window_reappearing)
}

func ImGuiNavItemData_Clear(self: ImGuiNavItemData): Unit {
    return capi.ImGuiNavItemData_Clear(self.getCPointer())
}

func ImGuiNavItemData_ImGuiNavItemData(): ImGuiNavItemData {
    return ImGuiNavItemData(capi.ImGuiNavItemData_ImGuiNavItemData(), owned: false)
}

func ImGuiNextItemData_ClearFlags(self: ImGuiNextItemData): Unit {
    return capi.ImGuiNextItemData_ClearFlags(self.getCPointer())
}

func ImGuiNextItemData_ImGuiNextItemData(): ImGuiNextItemData {
    return ImGuiNextItemData(capi.ImGuiNextItemData_ImGuiNextItemData(), owned: false)
}

func ImGuiNextWindowData_ClearFlags(self: ImGuiNextWindowData): Unit {
    return capi.ImGuiNextWindowData_ClearFlags(self.getCPointer())
}

func ImGuiNextWindowData_ImGuiNextWindowData(): ImGuiNextWindowData {
    return ImGuiNextWindowData(capi.ImGuiNextWindowData_ImGuiNextWindowData(), owned: false)
}

func ImGuiOldColumnData_ImGuiOldColumnData(): ImGuiOldColumnData {
    return ImGuiOldColumnData(capi.ImGuiOldColumnData_ImGuiOldColumnData(), owned: false)
}

func ImGuiOldColumns_ImGuiOldColumns(): ImGuiOldColumns {
    return ImGuiOldColumns(capi.ImGuiOldColumns_ImGuiOldColumns(), owned: false)
}

func ImGuiOnceUponAFrame_ImGuiOnceUponAFrame(): ImGuiOnceUponAFrame {
    return ImGuiOnceUponAFrame(capi.ImGuiOnceUponAFrame_ImGuiOnceUponAFrame(), owned: false)
}

func ImGuiPayload_Clear(self: ImGuiPayload): Unit {
    return capi.ImGuiPayload_Clear(self.getCPointer())
}

func ImGuiPayload_ImGuiPayload(): ImGuiPayload {
    return ImGuiPayload(capi.ImGuiPayload_ImGuiPayload(), owned: false)
}

func ImGuiPayload_IsDataType(self: ImGuiPayload, `type`: CStringConvertable): Bool {
    return capi.ImGuiPayload_IsDataType(self.getCPointer(), `type`.asCString())
}

func ImGuiPayload_IsDelivery(self: ImGuiPayload): Bool {
    return capi.ImGuiPayload_IsDelivery(self.getCPointer())
}

func ImGuiPayload_IsPreview(self: ImGuiPayload): Bool {
    return capi.ImGuiPayload_IsPreview(self.getCPointer())
}

func ImGuiPlatformIO_ImGuiPlatformIO(): ImGuiPlatformIO {
    return ImGuiPlatformIO(capi.ImGuiPlatformIO_ImGuiPlatformIO(), owned: false)
}

func ImGuiPlatformImeData_ImGuiPlatformImeData(): ImGuiPlatformImeData {
    return ImGuiPlatformImeData(capi.ImGuiPlatformImeData_ImGuiPlatformImeData(), owned: false)
}

func ImGuiPlatformMonitor_ImGuiPlatformMonitor(): ImGuiPlatformMonitor {
    return ImGuiPlatformMonitor(capi.ImGuiPlatformMonitor_ImGuiPlatformMonitor(), owned: false)
}

func ImGuiPopupData_ImGuiPopupData(): ImGuiPopupData {
    return ImGuiPopupData(capi.ImGuiPopupData_ImGuiPopupData(), owned: false)
}

func ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(ptr: Ref<Unit>): ImGuiPtrOrIndex {
    return ImGuiPtrOrIndex(capi.ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(ptr.getCPointer()), owned: false)
}

func ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(index: Int32): ImGuiPtrOrIndex {
    return ImGuiPtrOrIndex(capi.ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(index), owned: false)
}

func ImGuiSettingsHandler_ImGuiSettingsHandler(): ImGuiSettingsHandler {
    return ImGuiSettingsHandler(capi.ImGuiSettingsHandler_ImGuiSettingsHandler(), owned: false)
}

func ImGuiStackSizes_CompareWithContextState(self: ImGuiStackSizes, ctx: Ref<ImGuiContext>): Unit {
    return capi.ImGuiStackSizes_CompareWithContextState(self.getCPointer(), ctx.getCPointer())
}

func ImGuiStackSizes_ImGuiStackSizes(): ImGuiStackSizes {
    return ImGuiStackSizes(capi.ImGuiStackSizes_ImGuiStackSizes(), owned: false)
}

func ImGuiStackSizes_SetToContextState(self: ImGuiStackSizes, ctx: Ref<ImGuiContext>): Unit {
    return capi.ImGuiStackSizes_SetToContextState(self.getCPointer(), ctx.getCPointer())
}

func ImGuiStorage_BuildSortByKey(self: ImGuiStorage): Unit {
    return capi.ImGuiStorage_BuildSortByKey(self.getCPointer())
}

func ImGuiStorage_Clear(self: ImGuiStorage): Unit {
    return capi.ImGuiStorage_Clear(self.getCPointer())
}

func ImGuiStorage_GetBool(self: ImGuiStorage, key: ImGuiID, default_val: Bool): Bool {
    return capi.ImGuiStorage_GetBool(self.getCPointer(), key, default_val)
}

func ImGuiStorage_GetBoolRef(self: ImGuiStorage, key: ImGuiID, default_val: Bool): Ref<Bool> {
    return Ref<Bool>.unsafeMake(capi.ImGuiStorage_GetBoolRef(self.getCPointer(), key, default_val), count: -1, owned: false)
}

func ImGuiStorage_GetFloat(self: ImGuiStorage, key: ImGuiID, default_val: Float32): Float32 {
    return capi.ImGuiStorage_GetFloat(self.getCPointer(), key, default_val)
}

func ImGuiStorage_GetFloatRef(self: ImGuiStorage, key: ImGuiID, default_val: Float32): Ref<Float32> {
    return Ref<Float32>.unsafeMake(capi.ImGuiStorage_GetFloatRef(self.getCPointer(), key, default_val), count: -1, owned: false)
}

func ImGuiStorage_GetInt(self: ImGuiStorage, key: ImGuiID, default_val: Int32): Int32 {
    return capi.ImGuiStorage_GetInt(self.getCPointer(), key, default_val)
}

func ImGuiStorage_GetIntRef(self: ImGuiStorage, key: ImGuiID, default_val: Int32): Ref<Int32> {
    return Ref<Int32>.unsafeMake(capi.ImGuiStorage_GetIntRef(self.getCPointer(), key, default_val), count: -1, owned: false)
}

func ImGuiStorage_GetVoidPtr(self: ImGuiStorage, key: ImGuiID): Ref<Unit> {
    return Ref<Unit>.unsafeMake(capi.ImGuiStorage_GetVoidPtr(self.getCPointer(), key), count: -1, owned: false)
}

func ImGuiStorage_GetVoidPtrRef(self: ImGuiStorage, key: ImGuiID, default_val: Ref<Unit>): CPointer<CPointer<Unit>> {
    return capi.ImGuiStorage_GetVoidPtrRef(self.getCPointer(), key, default_val.getCPointer())
}

func ImGuiStorage_SetAllInt(self: ImGuiStorage, val: Int32): Unit {
    return capi.ImGuiStorage_SetAllInt(self.getCPointer(), val)
}

func ImGuiStorage_SetBool(self: ImGuiStorage, key: ImGuiID, val: Bool): Unit {
    return capi.ImGuiStorage_SetBool(self.getCPointer(), key, val)
}

func ImGuiStorage_SetFloat(self: ImGuiStorage, key: ImGuiID, val: Float32): Unit {
    return capi.ImGuiStorage_SetFloat(self.getCPointer(), key, val)
}

func ImGuiStorage_SetInt(self: ImGuiStorage, key: ImGuiID, val: Int32): Unit {
    return capi.ImGuiStorage_SetInt(self.getCPointer(), key, val)
}

func ImGuiStorage_SetVoidPtr(self: ImGuiStorage, key: ImGuiID, val: Ref<Unit>): Unit {
    return capi.ImGuiStorage_SetVoidPtr(self.getCPointer(), key, val.getCPointer())
}

func ImGuiStyle_ImGuiStyle(): ImGuiStyle {
    return ImGuiStyle(capi.ImGuiStyle_ImGuiStyle(), owned: false)
}

func ImGuiStyle_ScaleAllSizes(self: ImGuiStyle, scale_factor: Float32): Unit {
    return capi.ImGuiStyle_ScaleAllSizes(self.getCPointer(), scale_factor)
}

func ImGuiTabBar_ImGuiTabBar(): ImGuiTabBar {
    return ImGuiTabBar(capi.ImGuiTabBar_ImGuiTabBar(), owned: false)
}

func ImGuiTabItem_ImGuiTabItem(): ImGuiTabItem {
    return ImGuiTabItem(capi.ImGuiTabItem_ImGuiTabItem(), owned: false)
}

func ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs(): ImGuiTableColumnSortSpecs {
    return ImGuiTableColumnSortSpecs(capi.ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs(), owned: false)
}

func ImGuiTableInstanceData_ImGuiTableInstanceData(): ImGuiTableInstanceData {
    return ImGuiTableInstanceData(capi.ImGuiTableInstanceData_ImGuiTableInstanceData(), owned: false)
}

func ImGuiTableSettings_GetColumnSettings(self: ImGuiTableSettings): Ref<ImGuiTableColumnSettings> {
    return Ref<Unit>.unsafeMake(capi.ImGuiTableSettings_GetColumnSettings(self.getCPointer()), count: -1, owned: false)
}

func ImGuiTableSettings_ImGuiTableSettings(): ImGuiTableSettings {
    return ImGuiTableSettings(capi.ImGuiTableSettings_ImGuiTableSettings(), owned: false)
}

func ImGuiTableSortSpecs_ImGuiTableSortSpecs(): ImGuiTableSortSpecs {
    return ImGuiTableSortSpecs(capi.ImGuiTableSortSpecs_ImGuiTableSortSpecs(), owned: false)
}

func ImGuiTableTempData_ImGuiTableTempData(): ImGuiTableTempData {
    return ImGuiTableTempData(capi.ImGuiTableTempData_ImGuiTableTempData(), owned: false)
}

func ImGuiTextBuffer_ImGuiTextBuffer(): ImGuiTextBuffer {
    return ImGuiTextBuffer(capi.ImGuiTextBuffer_ImGuiTextBuffer(), owned: false)
}

func ImGuiTextBuffer_append(self: ImGuiTextBuffer, str: CStringConvertable, str_end: CStringConvertable): Unit {
    return capi.ImGuiTextBuffer_append(self.getCPointer(), str.asCString(), str_end.asCString())
}

func ImGuiTextBuffer_appendf(self: ImGuiTextBuffer, fmt: CStringConvertable): Unit {
    return capi.ImGuiTextBuffer_appendf(self.getCPointer(), fmt.asCString())
}

// Cangjie does not support `va_list`
// func ImGuiTextBuffer_appendfv(self: ImGuiTextBuffer, fmt: CStringConvertable, args: va_list) ...

func ImGuiTextBuffer_begin(self: ImGuiTextBuffer): String {
    return CString(capi.ImGuiTextBuffer_begin(self.getCPointer())).toString()
}

func ImGuiTextBuffer_c_str(self: ImGuiTextBuffer): String {
    return CString(capi.ImGuiTextBuffer_c_str(self.getCPointer())).toString()
}

func ImGuiTextBuffer_clear(self: ImGuiTextBuffer): Unit {
    return capi.ImGuiTextBuffer_clear(self.getCPointer())
}

func ImGuiTextBuffer_empty(self: ImGuiTextBuffer): Bool {
    return capi.ImGuiTextBuffer_empty(self.getCPointer())
}

func ImGuiTextBuffer_end(self: ImGuiTextBuffer): String {
    return CString(capi.ImGuiTextBuffer_end(self.getCPointer())).toString()
}

func ImGuiTextBuffer_reserve(self: ImGuiTextBuffer, capacity: Int32): Unit {
    return capi.ImGuiTextBuffer_reserve(self.getCPointer(), capacity)
}

func ImGuiTextBuffer_size(self: ImGuiTextBuffer): Int32 {
    return capi.ImGuiTextBuffer_size(self.getCPointer())
}

func ImGuiTextFilter_Build(self: ImGuiTextFilter): Unit {
    return capi.ImGuiTextFilter_Build(self.getCPointer())
}

func ImGuiTextFilter_Clear(self: ImGuiTextFilter): Unit {
    return capi.ImGuiTextFilter_Clear(self.getCPointer())
}

func ImGuiTextFilter_Draw(self: ImGuiTextFilter, label: CStringConvertable, width: Float32): Bool {
    return capi.ImGuiTextFilter_Draw(self.getCPointer(), label.asCString(), width)
}

func ImGuiTextFilter_ImGuiTextFilter(default_filter: CStringConvertable): ImGuiTextFilter {
    return ImGuiTextFilter(capi.ImGuiTextFilter_ImGuiTextFilter(default_filter.asCString()), owned: false)
}

func ImGuiTextFilter_IsActive(self: ImGuiTextFilter): Bool {
    return capi.ImGuiTextFilter_IsActive(self.getCPointer())
}

func ImGuiTextFilter_PassFilter(self: ImGuiTextFilter, text: CStringConvertable, text_end: CStringConvertable): Bool {
    return capi.ImGuiTextFilter_PassFilter(self.getCPointer(), text.asCString(), text_end.asCString())
}

func ImGuiTextIndex_append(self: ImGuiTextIndex, base: CStringConvertable, old_size: Int32, new_size: Int32): Unit {
    return capi.ImGuiTextIndex_append(self.getCPointer(), base.asCString(), old_size, new_size)
}

func ImGuiTextIndex_clear(self: ImGuiTextIndex): Unit {
    return capi.ImGuiTextIndex_clear(self.getCPointer())
}

func ImGuiTextIndex_get_line_begin(self: ImGuiTextIndex, base: CStringConvertable, n: Int32): String {
    return CString(capi.ImGuiTextIndex_get_line_begin(self.getCPointer(), base.asCString(), n)).toString()
}

func ImGuiTextIndex_get_line_end(self: ImGuiTextIndex, base: CStringConvertable, n: Int32): String {
    return CString(capi.ImGuiTextIndex_get_line_end(self.getCPointer(), base.asCString(), n)).toString()
}

func ImGuiTextIndex_size(self: ImGuiTextIndex): Int32 {
    return capi.ImGuiTextIndex_size(self.getCPointer())
}

func ImGuiTextRange_ImGuiTextRange_Nil(): ImGuiTextRange {
    return ImGuiTextRange(capi.ImGuiTextRange_ImGuiTextRange_Nil(), owned: false)
}

func ImGuiTextRange_ImGuiTextRange_Str(_b: CStringConvertable, _e: CStringConvertable): ImGuiTextRange {
    return ImGuiTextRange(capi.ImGuiTextRange_ImGuiTextRange_Str(_b.asCString(), _e.asCString()), owned: false)
}

func ImGuiTextRange_empty(self: ImGuiTextRange): Bool {
    return capi.ImGuiTextRange_empty(self.getCPointer())
}

func ImGuiTextRange_split(self: ImGuiTextRange, separator: UInt8, out: ImVector_ImGuiTextRange): Unit {
    return capi.ImGuiTextRange_split(self.getCPointer(), separator, out.getCPointer())
}

func ImGuiTypingSelectState_Clear(self: ImGuiTypingSelectState): Unit {
    return capi.ImGuiTypingSelectState_Clear(self.getCPointer())
}

func ImGuiTypingSelectState_ImGuiTypingSelectState(): ImGuiTypingSelectState {
    return ImGuiTypingSelectState(capi.ImGuiTypingSelectState_ImGuiTypingSelectState(), owned: false)
}

func ImGuiViewportP_CalcWorkRectPos(pOut: ImVec2, self: ImGuiViewportP, off_min: ImVec2): Unit {
    return capi.ImGuiViewportP_CalcWorkRectPos(pOut.getCPointer(), self.getCPointer(), unsafe { off_min.getCPointer().read() })
}

func ImGuiViewportP_CalcWorkRectSize(pOut: ImVec2, self: ImGuiViewportP, off_min: ImVec2, off_max: ImVec2): Unit {
    return capi.ImGuiViewportP_CalcWorkRectSize(pOut.getCPointer(), self.getCPointer(), unsafe { off_min.getCPointer().read() }, unsafe { off_max.getCPointer().read() })
}

func ImGuiViewportP_ClearRequestFlags(self: ImGuiViewportP): Unit {
    return capi.ImGuiViewportP_ClearRequestFlags(self.getCPointer())
}

func ImGuiViewportP_GetBuildWorkRect(pOut: ImRect, self: ImGuiViewportP): Unit {
    return capi.ImGuiViewportP_GetBuildWorkRect(pOut.getCPointer(), self.getCPointer())
}

func ImGuiViewportP_GetMainRect(pOut: ImRect, self: ImGuiViewportP): Unit {
    return capi.ImGuiViewportP_GetMainRect(pOut.getCPointer(), self.getCPointer())
}

func ImGuiViewportP_GetWorkRect(pOut: ImRect, self: ImGuiViewportP): Unit {
    return capi.ImGuiViewportP_GetWorkRect(pOut.getCPointer(), self.getCPointer())
}

func ImGuiViewportP_ImGuiViewportP(): ImGuiViewportP {
    return ImGuiViewportP(capi.ImGuiViewportP_ImGuiViewportP(), owned: false)
}

func ImGuiViewportP_UpdateWorkRect(self: ImGuiViewportP): Unit {
    return capi.ImGuiViewportP_UpdateWorkRect(self.getCPointer())
}

func ImGuiViewport_GetCenter(pOut: ImVec2, self: ImGuiViewport): Unit {
    return capi.ImGuiViewport_GetCenter(pOut.getCPointer(), self.getCPointer())
}

func ImGuiViewport_GetWorkCenter(pOut: ImVec2, self: ImGuiViewport): Unit {
    return capi.ImGuiViewport_GetWorkCenter(pOut.getCPointer(), self.getCPointer())
}

func ImGuiViewport_ImGuiViewport(): ImGuiViewport {
    return ImGuiViewport(capi.ImGuiViewport_ImGuiViewport(), owned: false)
}

func ImGuiWindowClass_ImGuiWindowClass(): ImGuiWindowClass {
    return ImGuiWindowClass(capi.ImGuiWindowClass_ImGuiWindowClass(), owned: false)
}

func ImGuiWindowSettings_GetName(self: ImGuiWindowSettings): String {
    return CString(capi.ImGuiWindowSettings_GetName(self.getCPointer())).toString()
}

func ImGuiWindowSettings_ImGuiWindowSettings(): ImGuiWindowSettings {
    return ImGuiWindowSettings(capi.ImGuiWindowSettings_ImGuiWindowSettings(), owned: false)
}

func ImRect_Add_Vec2(self: ImRect, p: ImVec2): Unit {
    return capi.ImRect_Add_Vec2(self.getCPointer(), unsafe { p.getCPointer().read() })
}

func ImRect_Add_Rect(self: ImRect, r: ImRect): Unit {
    return capi.ImRect_Add_Rect(self.getCPointer(), unsafe { r.getCPointer().read() })
}

func ImRect_ClipWith(self: ImRect, r: ImRect): Unit {
    return capi.ImRect_ClipWith(self.getCPointer(), unsafe { r.getCPointer().read() })
}

func ImRect_ClipWithFull(self: ImRect, r: ImRect): Unit {
    return capi.ImRect_ClipWithFull(self.getCPointer(), unsafe { r.getCPointer().read() })
}

func ImRect_Contains_Vec2(self: ImRect, p: ImVec2): Bool {
    return capi.ImRect_Contains_Vec2(self.getCPointer(), unsafe { p.getCPointer().read() })
}

func ImRect_Contains_Rect(self: ImRect, r: ImRect): Bool {
    return capi.ImRect_Contains_Rect(self.getCPointer(), unsafe { r.getCPointer().read() })
}

func ImRect_ContainsWithPad(self: ImRect, p: ImVec2, pad: ImVec2): Bool {
    return capi.ImRect_ContainsWithPad(self.getCPointer(), unsafe { p.getCPointer().read() }, unsafe { pad.getCPointer().read() })
}

func ImRect_Expand_Float(self: ImRect, amount: Float32): Unit {
    return capi.ImRect_Expand_Float(self.getCPointer(), amount)
}

func ImRect_Expand_Vec2(self: ImRect, amount: ImVec2): Unit {
    return capi.ImRect_Expand_Vec2(self.getCPointer(), unsafe { amount.getCPointer().read() })
}

func ImRect_Floor(self: ImRect): Unit {
    return capi.ImRect_Floor(self.getCPointer())
}

func ImRect_GetArea(self: ImRect): Float32 {
    return capi.ImRect_GetArea(self.getCPointer())
}

func ImRect_GetBL(pOut: ImVec2, self: ImRect): Unit {
    return capi.ImRect_GetBL(pOut.getCPointer(), self.getCPointer())
}

func ImRect_GetBR(pOut: ImVec2, self: ImRect): Unit {
    return capi.ImRect_GetBR(pOut.getCPointer(), self.getCPointer())
}

func ImRect_GetCenter(pOut: ImVec2, self: ImRect): Unit {
    return capi.ImRect_GetCenter(pOut.getCPointer(), self.getCPointer())
}

func ImRect_GetHeight(self: ImRect): Float32 {
    return capi.ImRect_GetHeight(self.getCPointer())
}

func ImRect_GetSize(pOut: ImVec2, self: ImRect): Unit {
    return capi.ImRect_GetSize(pOut.getCPointer(), self.getCPointer())
}

func ImRect_GetTL(pOut: ImVec2, self: ImRect): Unit {
    return capi.ImRect_GetTL(pOut.getCPointer(), self.getCPointer())
}

func ImRect_GetTR(pOut: ImVec2, self: ImRect): Unit {
    return capi.ImRect_GetTR(pOut.getCPointer(), self.getCPointer())
}

func ImRect_GetWidth(self: ImRect): Float32 {
    return capi.ImRect_GetWidth(self.getCPointer())
}

func ImRect_ImRect_Nil(): ImRect {
    return ImRect(capi.ImRect_ImRect_Nil(), owned: false)
}

func ImRect_ImRect_Vec2(min: ImVec2, max: ImVec2): ImRect {
    return ImRect(capi.ImRect_ImRect_Vec2(unsafe { min.getCPointer().read() }, unsafe { max.getCPointer().read() }), owned: false)
}

func ImRect_ImRect_Vec4(v: ImVec4): ImRect {
    return ImRect(capi.ImRect_ImRect_Vec4(unsafe { v.getCPointer().read() }), owned: false)
}

func ImRect_ImRect_Float(x1: Float32, y1: Float32, x2: Float32, y2: Float32): ImRect {
    return ImRect(capi.ImRect_ImRect_Float(x1, y1, x2, y2), owned: false)
}

func ImRect_IsInverted(self: ImRect): Bool {
    return capi.ImRect_IsInverted(self.getCPointer())
}

func ImRect_Overlaps(self: ImRect, r: ImRect): Bool {
    return capi.ImRect_Overlaps(self.getCPointer(), unsafe { r.getCPointer().read() })
}

func ImRect_ToVec4(pOut: ImVec4, self: ImRect): Unit {
    return capi.ImRect_ToVec4(pOut.getCPointer(), self.getCPointer())
}

func ImRect_Translate(self: ImRect, d: ImVec2): Unit {
    return capi.ImRect_Translate(self.getCPointer(), unsafe { d.getCPointer().read() })
}

func ImRect_TranslateX(self: ImRect, dx: Float32): Unit {
    return capi.ImRect_TranslateX(self.getCPointer(), dx)
}

func ImRect_TranslateY(self: ImRect, dy: Float32): Unit {
    return capi.ImRect_TranslateY(self.getCPointer(), dy)
}

func ImVec1_ImVec1_Nil(): ImVec1 {
    return ImVec1(capi.ImVec1_ImVec1_Nil(), owned: false)
}

func ImVec1_ImVec1_Float(_x: Float32): ImVec1 {
    return ImVec1(capi.ImVec1_ImVec1_Float(_x), owned: false)
}

func ImVec2_ImVec2_Nil(): ImVec2 {
    return ImVec2(capi.ImVec2_ImVec2_Nil(), owned: false)
}

func ImVec2_ImVec2_Float(_x: Float32, _y: Float32): ImVec2 {
    return ImVec2(capi.ImVec2_ImVec2_Float(_x, _y), owned: false)
}

func ImVec2ih_ImVec2ih_Nil(): ImVec2ih {
    return ImVec2ih(capi.ImVec2ih_ImVec2ih_Nil(), owned: false)
}

func ImVec2ih_ImVec2ih_short(_x: Int16, _y: Int16): ImVec2ih {
    return ImVec2ih(capi.ImVec2ih_ImVec2ih_short(_x, _y), owned: false)
}

func ImVec2ih_ImVec2ih_Vec2(rhs: ImVec2): ImVec2ih {
    return ImVec2ih(capi.ImVec2ih_ImVec2ih_Vec2(unsafe { rhs.getCPointer().read() }), owned: false)
}

func ImVec4_ImVec4_Nil(): ImVec4 {
    return ImVec4(capi.ImVec4_ImVec4_Nil(), owned: false)
}

func ImVec4_ImVec4_Float(_x: Float32, _y: Float32, _z: Float32, _w: Float32): ImVec4 {
    return ImVec4(capi.ImVec4_ImVec4_Float(_x, _y, _z, _w), owned: false)
}

public func AcceptDragDropPayload(`type`: CStringConvertable, flags: ImGuiDragDropFlags): ImGuiPayload {
    return ImGuiPayload(capi.igAcceptDragDropPayload(`type`.asCString(), flags), owned: false)
}

public func ActivateItemByID(id: ImGuiID): Unit {
    return capi.igActivateItemByID(id)
}

public func AddContextHook(context: Ref<ImGuiContext>, hook: ImGuiContextHook): ImGuiID {
    return capi.igAddContextHook(context.getCPointer(), hook.getCPointer())
}

public func AddDrawListToDrawDataEx(draw_data: ImDrawData, out_list: ImVector_ImDrawListPtr, draw_list: ImDrawList): Unit {
    return capi.igAddDrawListToDrawDataEx(draw_data.getCPointer(), out_list.getCPointer(), draw_list.getCPointer())
}

public func AddSettingsHandler(handler: ImGuiSettingsHandler): Unit {
    return capi.igAddSettingsHandler(handler.getCPointer())
}

public func AlignTextToFramePadding(): Unit {
    return capi.igAlignTextToFramePadding()
}

public func ArrowButton(str_id: CStringConvertable, dir: ImGuiDir): Bool {
    return capi.igArrowButton(str_id.asCString(), dir)
}

public func ArrowButtonEx(str_id: CStringConvertable, dir: ImGuiDir, size_arg: ImVec2, flags: ImGuiButtonFlags): Bool {
    return capi.igArrowButtonEx(str_id.asCString(), dir, unsafe { size_arg.getCPointer().read() }, flags)
}

public func Begin(name: CStringConvertable, p_open: Ref<Bool>, flags: ImGuiWindowFlags): Bool {
    return capi.igBegin(name.asCString(), p_open.getCPointer(), flags)
}

public func BeginChild(str_id: CStringConvertable, size: ImVec2, child_flags: ImGuiChildFlags, window_flags: ImGuiWindowFlags): Bool {
    return capi.igBeginChild_Str(str_id.asCString(), unsafe { size.getCPointer().read() }, child_flags, window_flags)
}

public func BeginChild(id: ImGuiID, size: ImVec2, child_flags: ImGuiChildFlags, window_flags: ImGuiWindowFlags): Bool {
    return capi.igBeginChild_ID(id, unsafe { size.getCPointer().read() }, child_flags, window_flags)
}

public func BeginChildEx(name: CStringConvertable, id: ImGuiID, size_arg: ImVec2, child_flags: ImGuiChildFlags, window_flags: ImGuiWindowFlags): Bool {
    return capi.igBeginChildEx(name.asCString(), id, unsafe { size_arg.getCPointer().read() }, child_flags, window_flags)
}

public func BeginColumns(str_id: CStringConvertable, count: Int32, flags: ImGuiOldColumnFlags): Unit {
    return capi.igBeginColumns(str_id.asCString(), count, flags)
}

public func BeginCombo(label: CStringConvertable, preview_value: CStringConvertable, flags: ImGuiComboFlags): Bool {
    return capi.igBeginCombo(label.asCString(), preview_value.asCString(), flags)
}

public func BeginComboPopup(popup_id: ImGuiID, bb: ImRect, flags: ImGuiComboFlags): Bool {
    return capi.igBeginComboPopup(popup_id, unsafe { bb.getCPointer().read() }, flags)
}

public func BeginComboPreview(): Bool {
    return capi.igBeginComboPreview()
}

public func BeginDisabled(disabled: Bool): Unit {
    return capi.igBeginDisabled(disabled)
}

public func BeginDisabledOverrideReenable(): Unit {
    return capi.igBeginDisabledOverrideReenable()
}

public func BeginDockableDragDropSource(window: Ref<ImGuiWindow>): Unit {
    return capi.igBeginDockableDragDropSource(window.getCPointer())
}

public func BeginDockableDragDropTarget(window: Ref<ImGuiWindow>): Unit {
    return capi.igBeginDockableDragDropTarget(window.getCPointer())
}

public func BeginDocked(window: Ref<ImGuiWindow>, p_open: Ref<Bool>): Unit {
    return capi.igBeginDocked(window.getCPointer(), p_open.getCPointer())
}

public func BeginDragDropSource(flags: ImGuiDragDropFlags): Bool {
    return capi.igBeginDragDropSource(flags)
}

public func BeginDragDropTarget(): Bool {
    return capi.igBeginDragDropTarget()
}

public func BeginDragDropTargetCustom(bb: ImRect, id: ImGuiID): Bool {
    return capi.igBeginDragDropTargetCustom(unsafe { bb.getCPointer().read() }, id)
}

public func BeginGroup(): Unit {
    return capi.igBeginGroup()
}

public func BeginItemTooltip(): Bool {
    return capi.igBeginItemTooltip()
}

public func BeginListBox(label: CStringConvertable, size: ImVec2): Bool {
    return capi.igBeginListBox(label.asCString(), unsafe { size.getCPointer().read() })
}

public func BeginMainMenuBar(): Bool {
    return capi.igBeginMainMenuBar()
}

public func BeginMenu(label: CStringConvertable, enabled: Bool): Bool {
    return capi.igBeginMenu(label.asCString(), enabled)
}

public func BeginMenuBar(): Bool {
    return capi.igBeginMenuBar()
}

public func BeginMenuEx(label: CStringConvertable, icon: CStringConvertable, enabled: Bool): Bool {
    return capi.igBeginMenuEx(label.asCString(), icon.asCString(), enabled)
}

public func BeginPopup(str_id: CStringConvertable, flags: ImGuiWindowFlags): Bool {
    return capi.igBeginPopup(str_id.asCString(), flags)
}

public func BeginPopupContextItem(str_id: CStringConvertable, popup_flags: ImGuiPopupFlags): Bool {
    return capi.igBeginPopupContextItem(str_id.asCString(), popup_flags)
}

public func BeginPopupContextVoid(str_id: CStringConvertable, popup_flags: ImGuiPopupFlags): Bool {
    return capi.igBeginPopupContextVoid(str_id.asCString(), popup_flags)
}

public func BeginPopupContextWindow(str_id: CStringConvertable, popup_flags: ImGuiPopupFlags): Bool {
    return capi.igBeginPopupContextWindow(str_id.asCString(), popup_flags)
}

public func BeginPopupEx(id: ImGuiID, extra_flags: ImGuiWindowFlags): Bool {
    return capi.igBeginPopupEx(id, extra_flags)
}

public func BeginPopupModal(name: CStringConvertable, p_open: Ref<Bool>, flags: ImGuiWindowFlags): Bool {
    return capi.igBeginPopupModal(name.asCString(), p_open.getCPointer(), flags)
}

public func BeginTabBar(str_id: CStringConvertable, flags: ImGuiTabBarFlags): Bool {
    return capi.igBeginTabBar(str_id.asCString(), flags)
}

public func BeginTabBarEx(tab_bar: ImGuiTabBar, bb: ImRect, flags: ImGuiTabBarFlags): Bool {
    return capi.igBeginTabBarEx(tab_bar.getCPointer(), unsafe { bb.getCPointer().read() }, flags)
}

public func BeginTabItem(label: CStringConvertable, p_open: Ref<Bool>, flags: ImGuiTabItemFlags): Bool {
    return capi.igBeginTabItem(label.asCString(), p_open.getCPointer(), flags)
}

public func BeginTable(str_id: CStringConvertable, column: Int32, flags: ImGuiTableFlags, outer_size: ImVec2, inner_width: Float32): Bool {
    return capi.igBeginTable(str_id.asCString(), column, flags, unsafe { outer_size.getCPointer().read() }, inner_width)
}

public func BeginTableEx(name: CStringConvertable, id: ImGuiID, columns_count: Int32, flags: ImGuiTableFlags, outer_size: ImVec2, inner_width: Float32): Bool {
    return capi.igBeginTableEx(name.asCString(), id, columns_count, flags, unsafe { outer_size.getCPointer().read() }, inner_width)
}

public func BeginTooltip(): Bool {
    return capi.igBeginTooltip()
}

public func BeginTooltipEx(tooltip_flags: ImGuiTooltipFlags, extra_window_flags: ImGuiWindowFlags): Bool {
    return capi.igBeginTooltipEx(tooltip_flags, extra_window_flags)
}

public func BeginTooltipHidden(): Bool {
    return capi.igBeginTooltipHidden()
}

public func BeginViewportSideBar(name: CStringConvertable, viewport: ImGuiViewport, dir: ImGuiDir, size: Float32, window_flags: ImGuiWindowFlags): Bool {
    return capi.igBeginViewportSideBar(name.asCString(), viewport.getCPointer(), dir, size, window_flags)
}

public func BringWindowToDisplayBack(window: Ref<ImGuiWindow>): Unit {
    return capi.igBringWindowToDisplayBack(window.getCPointer())
}

public func BringWindowToDisplayBehind(window: Ref<ImGuiWindow>, above_window: Ref<ImGuiWindow>): Unit {
    return capi.igBringWindowToDisplayBehind(window.getCPointer(), above_window.getCPointer())
}

public func BringWindowToDisplayFront(window: Ref<ImGuiWindow>): Unit {
    return capi.igBringWindowToDisplayFront(window.getCPointer())
}

public func BringWindowToFocusFront(window: Ref<ImGuiWindow>): Unit {
    return capi.igBringWindowToFocusFront(window.getCPointer())
}

public func Bullet(): Unit {
    return capi.igBullet()
}

public func BulletText(fmt: CStringConvertable): Unit {
    return capi.igBulletText(fmt.asCString())
}

// Cangjie does not support `va_list`
// public func BulletTextV(fmt: CStringConvertable, args: va_list) ...

public func Button(label: CStringConvertable, size: ImVec2): Bool {
    return capi.igButton(label.asCString(), unsafe { size.getCPointer().read() })
}

public func ButtonBehavior(bb: ImRect, id: ImGuiID, out_hovered: Ref<Bool>, out_held: Ref<Bool>, flags: ImGuiButtonFlags): Bool {
    return capi.igButtonBehavior(unsafe { bb.getCPointer().read() }, id, out_hovered.getCPointer(), out_held.getCPointer(), flags)
}

public func ButtonEx(label: CStringConvertable, size_arg: ImVec2, flags: ImGuiButtonFlags): Bool {
    return capi.igButtonEx(label.asCString(), unsafe { size_arg.getCPointer().read() }, flags)
}

public func CalcItemSize(pOut: ImVec2, size: ImVec2, default_w: Float32, default_h: Float32): Unit {
    return capi.igCalcItemSize(pOut.getCPointer(), unsafe { size.getCPointer().read() }, default_w, default_h)
}

public func CalcItemWidth(): Float32 {
    return capi.igCalcItemWidth()
}

public func CalcRoundingFlagsForRectInRect(r_in: ImRect, r_outer: ImRect, threshold: Float32): ImDrawFlags {
    return capi.igCalcRoundingFlagsForRectInRect(unsafe { r_in.getCPointer().read() }, unsafe { r_outer.getCPointer().read() }, threshold)
}

public func CalcTextSize(pOut: ImVec2, text: CStringConvertable, text_end: CStringConvertable, hide_text_after_double_hash: Bool, wrap_width: Float32): Unit {
    return capi.igCalcTextSize(pOut.getCPointer(), text.asCString(), text_end.asCString(), hide_text_after_double_hash, wrap_width)
}

public func CalcTypematicRepeatAmount(t0: Float32, t1: Float32, repeat_delay: Float32, repeat_rate: Float32): Int32 {
    return capi.igCalcTypematicRepeatAmount(t0, t1, repeat_delay, repeat_rate)
}

public func CalcWindowNextAutoFitSize(pOut: ImVec2, window: Ref<ImGuiWindow>): Unit {
    return capi.igCalcWindowNextAutoFitSize(pOut.getCPointer(), window.getCPointer())
}

public func CalcWrapWidthForPos(pos: ImVec2, wrap_pos_x: Float32): Float32 {
    return capi.igCalcWrapWidthForPos(unsafe { pos.getCPointer().read() }, wrap_pos_x)
}

public func CallContextHooks(context: Ref<ImGuiContext>, `type`: ImGuiContextHookType): Unit {
    return capi.igCallContextHooks(context.getCPointer(), `type`)
}

public func Checkbox(label: CStringConvertable, v: Ref<Bool>): Bool {
    return capi.igCheckbox(label.asCString(), v.getCPointer())
}

public func CheckboxFlags(label: CStringConvertable, flags: Ref<Int32>, flags_value: Int32): Bool {
    return capi.igCheckboxFlags_IntPtr(label.asCString(), flags.getCPointer(), flags_value)
}

public func CheckboxFlags(label: CStringConvertable, flags: Ref<UInt32>, flags_value: UInt32): Bool {
    return capi.igCheckboxFlags_UintPtr(label.asCString(), flags.getCPointer(), flags_value)
}

public func CheckboxFlags(label: CStringConvertable, flags: Ref<ImS64>, flags_value: ImS64): Bool {
    return capi.igCheckboxFlags_S64Ptr(label.asCString(), flags.getCPointer(), flags_value)
}

public func CheckboxFlags(label: CStringConvertable, flags: Ref<ImU64>, flags_value: ImU64): Bool {
    return capi.igCheckboxFlags_U64Ptr(label.asCString(), flags.getCPointer(), flags_value)
}

public func ClearActiveID(): Unit {
    return capi.igClearActiveID()
}

public func ClearDragDrop(): Unit {
    return capi.igClearDragDrop()
}

public func ClearIniSettings(): Unit {
    return capi.igClearIniSettings()
}

public func ClearWindowSettings(name: CStringConvertable): Unit {
    return capi.igClearWindowSettings(name.asCString())
}

public func CloseButton(id: ImGuiID, pos: ImVec2): Bool {
    return capi.igCloseButton(id, unsafe { pos.getCPointer().read() })
}

public func CloseCurrentPopup(): Unit {
    return capi.igCloseCurrentPopup()
}

public func ClosePopupToLevel(remaining: Int32, restore_focus_to_window_under_popup: Bool): Unit {
    return capi.igClosePopupToLevel(remaining, restore_focus_to_window_under_popup)
}

public func ClosePopupsExceptModals(): Unit {
    return capi.igClosePopupsExceptModals()
}

public func ClosePopupsOverWindow(ref_window: Ref<ImGuiWindow>, restore_focus_to_window_under_popup: Bool): Unit {
    return capi.igClosePopupsOverWindow(ref_window.getCPointer(), restore_focus_to_window_under_popup)
}

public func CollapseButton(id: ImGuiID, pos: ImVec2, dock_node: Ref<ImGuiDockNode>): Bool {
    return capi.igCollapseButton(id, unsafe { pos.getCPointer().read() }, dock_node.getCPointer())
}

public func CollapsingHeader(label: CStringConvertable, flags: ImGuiTreeNodeFlags): Bool {
    return capi.igCollapsingHeader_TreeNodeFlags(label.asCString(), flags)
}

public func CollapsingHeader(label: CStringConvertable, p_visible: Ref<Bool>, flags: ImGuiTreeNodeFlags): Bool {
    return capi.igCollapsingHeader_BoolPtr(label.asCString(), p_visible.getCPointer(), flags)
}

public func ColorButton(desc_id: CStringConvertable, col: ImVec4, flags: ImGuiColorEditFlags, size: ImVec2): Bool {
    return capi.igColorButton(desc_id.asCString(), unsafe { col.getCPointer().read() }, flags, unsafe { size.getCPointer().read() })
}

public func ColorConvertFloat4ToU32(`in`: ImVec4): ImU32 {
    return capi.igColorConvertFloat4ToU32(unsafe { `in`.getCPointer().read() })
}

public func ColorConvertHSVtoRGB(h: Float32, s: Float32, v: Float32, out_r: Ref<Float32>, out_g: Ref<Float32>, out_b: Ref<Float32>): Unit {
    return capi.igColorConvertHSVtoRGB(h, s, v, out_r.getCPointer(), out_g.getCPointer(), out_b.getCPointer())
}

public func ColorConvertRGBtoHSV(r: Float32, g: Float32, b: Float32, out_h: Ref<Float32>, out_s: Ref<Float32>, out_v: Ref<Float32>): Unit {
    return capi.igColorConvertRGBtoHSV(r, g, b, out_h.getCPointer(), out_s.getCPointer(), out_v.getCPointer())
}

public func ColorConvertU32ToFloat4(pOut: ImVec4, `in`: ImU32): Unit {
    return capi.igColorConvertU32ToFloat4(pOut.getCPointer(), `in`)
}

public func ColorEdit3(label: CStringConvertable, col: Ref<Float32>, flags: ImGuiColorEditFlags): Bool {
    return capi.igColorEdit3(label.asCString(), col.getCPointer(), flags)
}

public func ColorEdit4(label: CStringConvertable, col: Ref<Float32>, flags: ImGuiColorEditFlags): Bool {
    return capi.igColorEdit4(label.asCString(), col.getCPointer(), flags)
}

public func ColorEditOptionsPopup(col: Ref<Float32>, flags: ImGuiColorEditFlags): Unit {
    return capi.igColorEditOptionsPopup(col.getCPointer(), flags)
}

public func ColorPicker3(label: CStringConvertable, col: Ref<Float32>, flags: ImGuiColorEditFlags): Bool {
    return capi.igColorPicker3(label.asCString(), col.getCPointer(), flags)
}

public func ColorPicker4(label: CStringConvertable, col: Ref<Float32>, flags: ImGuiColorEditFlags, ref_col: Ref<Float32>): Bool {
    return capi.igColorPicker4(label.asCString(), col.getCPointer(), flags, ref_col.getCPointer())
}

public func ColorPickerOptionsPopup(ref_col: Ref<Float32>, flags: ImGuiColorEditFlags): Unit {
    return capi.igColorPickerOptionsPopup(ref_col.getCPointer(), flags)
}

public func ColorTooltip(text: CStringConvertable, col: Ref<Float32>, flags: ImGuiColorEditFlags): Unit {
    return capi.igColorTooltip(text.asCString(), col.getCPointer(), flags)
}

public func Columns(count: Int32, id: CStringConvertable, border: Bool): Unit {
    return capi.igColumns(count, id.asCString(), border)
}

public func Combo(label: CStringConvertable, current_item: Ref<Int32>, items: Ref<CPointer<UInt8>>, items_count: Int32, popup_max_height_in_items: Int32): Bool {
    return capi.igCombo_Str_arr(label.asCString(), current_item.getCPointer(), items.getCPointer(), items_count, popup_max_height_in_items)
}

public func Combo(label: CStringConvertable, current_item: Ref<Int32>, items_separated_by_zeros: CStringConvertable, popup_max_height_in_items: Int32): Bool {
    return capi.igCombo_Str(label.asCString(), current_item.getCPointer(), items_separated_by_zeros.asCString(), popup_max_height_in_items)
}

public func Combo(label: CStringConvertable, current_item: Ref<Int32>, getter: CFunc<(user_data: CPointer<Unit>, idx: Int32) -> CPointer<UInt8>>, user_data: Ref<Unit>, items_count: Int32, popup_max_height_in_items: Int32): Bool {
    return capi.igCombo_FnStrPtr(label.asCString(), current_item.getCPointer(), getter, user_data.getCPointer(), items_count, popup_max_height_in_items)
}

public func ConvertSingleModFlagToKey(key: ImGuiKey): ImGuiKey {
    return capi.igConvertSingleModFlagToKey(key)
}

public func CreateContext(shared_font_atlas: ImFontAtlas): Ref<ImGuiContext> {
    return Ref<Unit>.unsafeMake(capi.igCreateContext(shared_font_atlas.getCPointer()), count: -1, owned: false)
}

public func CreateNewWindowSettings(name: CStringConvertable): ImGuiWindowSettings {
    return ImGuiWindowSettings(capi.igCreateNewWindowSettings(name.asCString()), owned: false)
}

public func DataTypeApplyFromText(buf: CStringConvertable, data_type: ImGuiDataType, p_data: Ref<Unit>, format: CStringConvertable, p_data_when_empty: Ref<Unit>): Bool {
    return capi.igDataTypeApplyFromText(buf.asCString(), data_type, p_data.getCPointer(), format.asCString(), p_data_when_empty.getCPointer())
}

public func DataTypeApplyOp(data_type: ImGuiDataType, op: Int32, output: Ref<Unit>, arg_1: Ref<Unit>, arg_2: Ref<Unit>): Unit {
    return capi.igDataTypeApplyOp(data_type, op, output.getCPointer(), arg_1.getCPointer(), arg_2.getCPointer())
}

public func DataTypeClamp(data_type: ImGuiDataType, p_data: Ref<Unit>, p_min: Ref<Unit>, p_max: Ref<Unit>): Bool {
    return capi.igDataTypeClamp(data_type, p_data.getCPointer(), p_min.getCPointer(), p_max.getCPointer())
}

public func DataTypeCompare(data_type: ImGuiDataType, arg_1: Ref<Unit>, arg_2: Ref<Unit>): Int32 {
    return capi.igDataTypeCompare(data_type, arg_1.getCPointer(), arg_2.getCPointer())
}

public func DataTypeFormatString(buf: CStringConvertable, buf_size: Int32, data_type: ImGuiDataType, p_data: Ref<Unit>, format: CStringConvertable): Int32 {
    return capi.igDataTypeFormatString(buf.asCString(), buf_size, data_type, p_data.getCPointer(), format.asCString())
}

public func DataTypeGetInfo(data_type: ImGuiDataType): ImGuiDataTypeInfo {
    return ImGuiDataTypeInfo(capi.igDataTypeGetInfo(data_type), owned: false)
}

public func DebugAllocHook(info: ImGuiDebugAllocInfo, frame_count: Int32, ptr: Ref<Unit>, size: UIntNative): Unit {
    return capi.igDebugAllocHook(info.getCPointer(), frame_count, ptr.getCPointer(), size)
}

public func DebugBreakButton(label: CStringConvertable, description_of_location: CStringConvertable): Bool {
    return capi.igDebugBreakButton(label.asCString(), description_of_location.asCString())
}

public func DebugBreakButtonTooltip(keyboard_only: Bool, description_of_location: CStringConvertable): Unit {
    return capi.igDebugBreakButtonTooltip(keyboard_only, description_of_location.asCString())
}

public func DebugBreakClearData(): Unit {
    return capi.igDebugBreakClearData()
}

public func DebugCheckVersionAndDataLayout(version_str: CStringConvertable, sz_io: UIntNative, sz_style: UIntNative, sz_vec2: UIntNative, sz_vec4: UIntNative, sz_drawvert: UIntNative, sz_drawidx: UIntNative): Bool {
    return capi.igDebugCheckVersionAndDataLayout(version_str.asCString(), sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx)
}

public func DebugDrawCursorPos(col: ImU32): Unit {
    return capi.igDebugDrawCursorPos(col)
}

public func DebugDrawItemRect(col: ImU32): Unit {
    return capi.igDebugDrawItemRect(col)
}

public func DebugDrawLineExtents(col: ImU32): Unit {
    return capi.igDebugDrawLineExtents(col)
}

public func DebugFlashStyleColor(idx: ImGuiCol): Unit {
    return capi.igDebugFlashStyleColor(idx)
}

public func DebugHookIdInfo(id: ImGuiID, data_type: ImGuiDataType, data_id: Ref<Unit>, data_id_end: Ref<Unit>): Unit {
    return capi.igDebugHookIdInfo(id, data_type, data_id.getCPointer(), data_id_end.getCPointer())
}

public func DebugLocateItem(target_id: ImGuiID): Unit {
    return capi.igDebugLocateItem(target_id)
}

public func DebugLocateItemOnHover(target_id: ImGuiID): Unit {
    return capi.igDebugLocateItemOnHover(target_id)
}

public func DebugLocateItemResolveWithLastItem(): Unit {
    return capi.igDebugLocateItemResolveWithLastItem()
}

public func DebugLog(fmt: CStringConvertable): Unit {
    return capi.igDebugLog(fmt.asCString())
}

// Cangjie does not support `va_list`
// public func DebugLogV(fmt: CStringConvertable, args: va_list) ...

public func DebugNodeColumns(columns: ImGuiOldColumns): Unit {
    return capi.igDebugNodeColumns(columns.getCPointer())
}

public func DebugNodeDockNode(node: Ref<ImGuiDockNode>, label: CStringConvertable): Unit {
    return capi.igDebugNodeDockNode(node.getCPointer(), label.asCString())
}

public func DebugNodeDrawCmdShowMeshAndBoundingBox(out_draw_list: ImDrawList, draw_list: ImDrawList, draw_cmd: ImDrawCmd, show_mesh: Bool, show_aabb: Bool): Unit {
    return capi.igDebugNodeDrawCmdShowMeshAndBoundingBox(out_draw_list.getCPointer(), draw_list.getCPointer(), draw_cmd.getCPointer(), show_mesh, show_aabb)
}

public func DebugNodeDrawList(window: Ref<ImGuiWindow>, viewport: ImGuiViewportP, draw_list: ImDrawList, label: CStringConvertable): Unit {
    return capi.igDebugNodeDrawList(window.getCPointer(), viewport.getCPointer(), draw_list.getCPointer(), label.asCString())
}

public func DebugNodeFont(font: ImFont): Unit {
    return capi.igDebugNodeFont(font.getCPointer())
}

public func DebugNodeFontGlyph(font: ImFont, glyph: Ref<ImFontGlyph>): Unit {
    return capi.igDebugNodeFontGlyph(font.getCPointer(), glyph.getCPointer())
}

public func DebugNodeInputTextState(state: ImGuiInputTextState): Unit {
    return capi.igDebugNodeInputTextState(state.getCPointer())
}

public func DebugNodeStorage(storage: ImGuiStorage, label: CStringConvertable): Unit {
    return capi.igDebugNodeStorage(storage.getCPointer(), label.asCString())
}

public func DebugNodeTabBar(tab_bar: ImGuiTabBar, label: CStringConvertable): Unit {
    return capi.igDebugNodeTabBar(tab_bar.getCPointer(), label.asCString())
}

public func DebugNodeTable(table: Ref<ImGuiTable>): Unit {
    return capi.igDebugNodeTable(table.getCPointer())
}

public func DebugNodeTableSettings(settings: ImGuiTableSettings): Unit {
    return capi.igDebugNodeTableSettings(settings.getCPointer())
}

public func DebugNodeTypingSelectState(state: ImGuiTypingSelectState): Unit {
    return capi.igDebugNodeTypingSelectState(state.getCPointer())
}

public func DebugNodeViewport(viewport: ImGuiViewportP): Unit {
    return capi.igDebugNodeViewport(viewport.getCPointer())
}

public func DebugNodeWindow(window: Ref<ImGuiWindow>, label: CStringConvertable): Unit {
    return capi.igDebugNodeWindow(window.getCPointer(), label.asCString())
}

public func DebugNodeWindowSettings(settings: ImGuiWindowSettings): Unit {
    return capi.igDebugNodeWindowSettings(settings.getCPointer())
}

public func DebugNodeWindowsList(windows: ImVector_ImGuiWindowPtr, label: CStringConvertable): Unit {
    return capi.igDebugNodeWindowsList(windows.getCPointer(), label.asCString())
}

public func DebugNodeWindowsListByBeginStackParent(windows: CPointer<CPointer<ImGuiWindow>>, windows_size: Int32, parent_in_begin_stack: Ref<ImGuiWindow>): Unit {
    return capi.igDebugNodeWindowsListByBeginStackParent(windows, windows_size, parent_in_begin_stack.getCPointer())
}

public func DebugRenderKeyboardPreview(draw_list: ImDrawList): Unit {
    return capi.igDebugRenderKeyboardPreview(draw_list.getCPointer())
}

public func DebugRenderViewportThumbnail(draw_list: ImDrawList, viewport: ImGuiViewportP, bb: ImRect): Unit {
    return capi.igDebugRenderViewportThumbnail(draw_list.getCPointer(), viewport.getCPointer(), unsafe { bb.getCPointer().read() })
}

public func DebugStartItemPicker(): Unit {
    return capi.igDebugStartItemPicker()
}

public func DebugTextEncoding(text: CStringConvertable): Unit {
    return capi.igDebugTextEncoding(text.asCString())
}

public func DebugTextUnformattedWithLocateItem(line_begin: CStringConvertable, line_end: CStringConvertable): Unit {
    return capi.igDebugTextUnformattedWithLocateItem(line_begin.asCString(), line_end.asCString())
}

public func DestroyContext(ctx: Ref<ImGuiContext>): Unit {
    return capi.igDestroyContext(ctx.getCPointer())
}

public func DestroyPlatformWindow(viewport: ImGuiViewportP): Unit {
    return capi.igDestroyPlatformWindow(viewport.getCPointer())
}

public func DestroyPlatformWindows(): Unit {
    return capi.igDestroyPlatformWindows()
}

public func DockBuilderAddNode(node_id: ImGuiID, flags: ImGuiDockNodeFlags): ImGuiID {
    return capi.igDockBuilderAddNode(node_id, flags)
}

public func DockBuilderCopyDockSpace(src_dockspace_id: ImGuiID, dst_dockspace_id: ImGuiID, in_window_remap_pairs: ImVector_const_charPtr): Unit {
    return capi.igDockBuilderCopyDockSpace(src_dockspace_id, dst_dockspace_id, in_window_remap_pairs.getCPointer())
}

public func DockBuilderCopyNode(src_node_id: ImGuiID, dst_node_id: ImGuiID, out_node_remap_pairs: ImVector_ImGuiID): Unit {
    return capi.igDockBuilderCopyNode(src_node_id, dst_node_id, out_node_remap_pairs.getCPointer())
}

public func DockBuilderCopyWindowSettings(src_name: CStringConvertable, dst_name: CStringConvertable): Unit {
    return capi.igDockBuilderCopyWindowSettings(src_name.asCString(), dst_name.asCString())
}

public func DockBuilderDockWindow(window_name: CStringConvertable, node_id: ImGuiID): Unit {
    return capi.igDockBuilderDockWindow(window_name.asCString(), node_id)
}

public func DockBuilderFinish(node_id: ImGuiID): Unit {
    return capi.igDockBuilderFinish(node_id)
}

public func DockBuilderGetCentralNode(node_id: ImGuiID): Ref<ImGuiDockNode> {
    return Ref<Unit>.unsafeMake(capi.igDockBuilderGetCentralNode(node_id), count: -1, owned: false)
}

public func DockBuilderGetNode(node_id: ImGuiID): Ref<ImGuiDockNode> {
    return Ref<Unit>.unsafeMake(capi.igDockBuilderGetNode(node_id), count: -1, owned: false)
}

public func DockBuilderRemoveNode(node_id: ImGuiID): Unit {
    return capi.igDockBuilderRemoveNode(node_id)
}

public func DockBuilderRemoveNodeChildNodes(node_id: ImGuiID): Unit {
    return capi.igDockBuilderRemoveNodeChildNodes(node_id)
}

public func DockBuilderRemoveNodeDockedWindows(node_id: ImGuiID, clear_settings_refs: Bool): Unit {
    return capi.igDockBuilderRemoveNodeDockedWindows(node_id, clear_settings_refs)
}

public func DockBuilderSetNodePos(node_id: ImGuiID, pos: ImVec2): Unit {
    return capi.igDockBuilderSetNodePos(node_id, unsafe { pos.getCPointer().read() })
}

public func DockBuilderSetNodeSize(node_id: ImGuiID, size: ImVec2): Unit {
    return capi.igDockBuilderSetNodeSize(node_id, unsafe { size.getCPointer().read() })
}

public func DockBuilderSplitNode(node_id: ImGuiID, split_dir: ImGuiDir, size_ratio_for_node_at_dir: Float32, out_id_at_dir: Ref<ImGuiID>, out_id_at_opposite_dir: Ref<ImGuiID>): ImGuiID {
    return capi.igDockBuilderSplitNode(node_id, split_dir, size_ratio_for_node_at_dir, out_id_at_dir.getCPointer(), out_id_at_opposite_dir.getCPointer())
}

public func DockContextCalcDropPosForDocking(target: Ref<ImGuiWindow>, target_node: Ref<ImGuiDockNode>, payload_window: Ref<ImGuiWindow>, payload_node: Ref<ImGuiDockNode>, split_dir: ImGuiDir, split_outer: Bool, out_pos: ImVec2): Bool {
    return capi.igDockContextCalcDropPosForDocking(target.getCPointer(), target_node.getCPointer(), payload_window.getCPointer(), payload_node.getCPointer(), split_dir, split_outer, out_pos.getCPointer())
}

public func DockContextClearNodes(ctx: Ref<ImGuiContext>, root_id: ImGuiID, clear_settings_refs: Bool): Unit {
    return capi.igDockContextClearNodes(ctx.getCPointer(), root_id, clear_settings_refs)
}

public func DockContextEndFrame(ctx: Ref<ImGuiContext>): Unit {
    return capi.igDockContextEndFrame(ctx.getCPointer())
}

public func DockContextFindNodeByID(ctx: Ref<ImGuiContext>, id: ImGuiID): Ref<ImGuiDockNode> {
    return Ref<Unit>.unsafeMake(capi.igDockContextFindNodeByID(ctx.getCPointer(), id), count: -1, owned: false)
}

public func DockContextGenNodeID(ctx: Ref<ImGuiContext>): ImGuiID {
    return capi.igDockContextGenNodeID(ctx.getCPointer())
}

public func DockContextInitialize(ctx: Ref<ImGuiContext>): Unit {
    return capi.igDockContextInitialize(ctx.getCPointer())
}

public func DockContextNewFrameUpdateDocking(ctx: Ref<ImGuiContext>): Unit {
    return capi.igDockContextNewFrameUpdateDocking(ctx.getCPointer())
}

public func DockContextNewFrameUpdateUndocking(ctx: Ref<ImGuiContext>): Unit {
    return capi.igDockContextNewFrameUpdateUndocking(ctx.getCPointer())
}

public func DockContextProcessUndockNode(ctx: Ref<ImGuiContext>, node: Ref<ImGuiDockNode>): Unit {
    return capi.igDockContextProcessUndockNode(ctx.getCPointer(), node.getCPointer())
}

public func DockContextProcessUndockWindow(ctx: Ref<ImGuiContext>, window: Ref<ImGuiWindow>, clear_persistent_docking_ref: Bool): Unit {
    return capi.igDockContextProcessUndockWindow(ctx.getCPointer(), window.getCPointer(), clear_persistent_docking_ref)
}

public func DockContextQueueDock(ctx: Ref<ImGuiContext>, target: Ref<ImGuiWindow>, target_node: Ref<ImGuiDockNode>, payload: Ref<ImGuiWindow>, split_dir: ImGuiDir, split_ratio: Float32, split_outer: Bool): Unit {
    return capi.igDockContextQueueDock(ctx.getCPointer(), target.getCPointer(), target_node.getCPointer(), payload.getCPointer(), split_dir, split_ratio, split_outer)
}

public func DockContextQueueUndockNode(ctx: Ref<ImGuiContext>, node: Ref<ImGuiDockNode>): Unit {
    return capi.igDockContextQueueUndockNode(ctx.getCPointer(), node.getCPointer())
}

public func DockContextQueueUndockWindow(ctx: Ref<ImGuiContext>, window: Ref<ImGuiWindow>): Unit {
    return capi.igDockContextQueueUndockWindow(ctx.getCPointer(), window.getCPointer())
}

public func DockContextRebuildNodes(ctx: Ref<ImGuiContext>): Unit {
    return capi.igDockContextRebuildNodes(ctx.getCPointer())
}

public func DockContextShutdown(ctx: Ref<ImGuiContext>): Unit {
    return capi.igDockContextShutdown(ctx.getCPointer())
}

public func DockNodeBeginAmendTabBar(node: Ref<ImGuiDockNode>): Bool {
    return capi.igDockNodeBeginAmendTabBar(node.getCPointer())
}

public func DockNodeEndAmendTabBar(): Unit {
    return capi.igDockNodeEndAmendTabBar()
}

public func DockNodeGetDepth(node: Ref<ImGuiDockNode>): Int32 {
    return capi.igDockNodeGetDepth(node.getCPointer())
}

public func DockNodeGetRootNode(node: Ref<ImGuiDockNode>): Ref<ImGuiDockNode> {
    return Ref<Unit>.unsafeMake(capi.igDockNodeGetRootNode(node.getCPointer()), count: -1, owned: false)
}

public func DockNodeGetWindowMenuButtonId(node: Ref<ImGuiDockNode>): ImGuiID {
    return capi.igDockNodeGetWindowMenuButtonId(node.getCPointer())
}

public func DockNodeIsInHierarchyOf(node: Ref<ImGuiDockNode>, parent: Ref<ImGuiDockNode>): Bool {
    return capi.igDockNodeIsInHierarchyOf(node.getCPointer(), parent.getCPointer())
}

public func DockNodeWindowMenuHandler_Default(ctx: Ref<ImGuiContext>, node: Ref<ImGuiDockNode>, tab_bar: ImGuiTabBar): Unit {
    return capi.igDockNodeWindowMenuHandler_Default(ctx.getCPointer(), node.getCPointer(), tab_bar.getCPointer())
}

public func DockSpace(dockspace_id: ImGuiID, size: ImVec2, flags: ImGuiDockNodeFlags, window_class: ImGuiWindowClass): ImGuiID {
    return capi.igDockSpace(dockspace_id, unsafe { size.getCPointer().read() }, flags, window_class.getCPointer())
}

public func DockSpaceOverViewport(dockspace_id: ImGuiID, viewport: ImGuiViewport, flags: ImGuiDockNodeFlags, window_class: ImGuiWindowClass): ImGuiID {
    return capi.igDockSpaceOverViewport(dockspace_id, viewport.getCPointer(), flags, window_class.getCPointer())
}

public func DragBehavior(id: ImGuiID, data_type: ImGuiDataType, p_v: Ref<Unit>, v_speed: Float32, p_min: Ref<Unit>, p_max: Ref<Unit>, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igDragBehavior(id, data_type, p_v.getCPointer(), v_speed, p_min.getCPointer(), p_max.getCPointer(), format.asCString(), flags)
}

public func DragFloat(label: CStringConvertable, v: Ref<Float32>, v_speed: Float32, v_min: Float32, v_max: Float32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igDragFloat(label.asCString(), v.getCPointer(), v_speed, v_min, v_max, format.asCString(), flags)
}

public func DragFloat2(label: CStringConvertable, v: Ref<Float32>, v_speed: Float32, v_min: Float32, v_max: Float32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igDragFloat2(label.asCString(), v.getCPointer(), v_speed, v_min, v_max, format.asCString(), flags)
}

public func DragFloat3(label: CStringConvertable, v: Ref<Float32>, v_speed: Float32, v_min: Float32, v_max: Float32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igDragFloat3(label.asCString(), v.getCPointer(), v_speed, v_min, v_max, format.asCString(), flags)
}

public func DragFloat4(label: CStringConvertable, v: Ref<Float32>, v_speed: Float32, v_min: Float32, v_max: Float32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igDragFloat4(label.asCString(), v.getCPointer(), v_speed, v_min, v_max, format.asCString(), flags)
}

public func DragFloatRange2(label: CStringConvertable, v_current_min: Ref<Float32>, v_current_max: Ref<Float32>, v_speed: Float32, v_min: Float32, v_max: Float32, format: CStringConvertable, format_max: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igDragFloatRange2(label.asCString(), v_current_min.getCPointer(), v_current_max.getCPointer(), v_speed, v_min, v_max, format.asCString(), format_max.asCString(), flags)
}

public func DragInt(label: CStringConvertable, v: Ref<Int32>, v_speed: Float32, v_min: Int32, v_max: Int32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igDragInt(label.asCString(), v.getCPointer(), v_speed, v_min, v_max, format.asCString(), flags)
}

public func DragInt2(label: CStringConvertable, v: Ref<Int32>, v_speed: Float32, v_min: Int32, v_max: Int32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igDragInt2(label.asCString(), v.getCPointer(), v_speed, v_min, v_max, format.asCString(), flags)
}

public func DragInt3(label: CStringConvertable, v: Ref<Int32>, v_speed: Float32, v_min: Int32, v_max: Int32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igDragInt3(label.asCString(), v.getCPointer(), v_speed, v_min, v_max, format.asCString(), flags)
}

public func DragInt4(label: CStringConvertable, v: Ref<Int32>, v_speed: Float32, v_min: Int32, v_max: Int32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igDragInt4(label.asCString(), v.getCPointer(), v_speed, v_min, v_max, format.asCString(), flags)
}

public func DragIntRange2(label: CStringConvertable, v_current_min: Ref<Int32>, v_current_max: Ref<Int32>, v_speed: Float32, v_min: Int32, v_max: Int32, format: CStringConvertable, format_max: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igDragIntRange2(label.asCString(), v_current_min.getCPointer(), v_current_max.getCPointer(), v_speed, v_min, v_max, format.asCString(), format_max.asCString(), flags)
}

public func DragScalar(label: CStringConvertable, data_type: ImGuiDataType, p_data: Ref<Unit>, v_speed: Float32, p_min: Ref<Unit>, p_max: Ref<Unit>, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igDragScalar(label.asCString(), data_type, p_data.getCPointer(), v_speed, p_min.getCPointer(), p_max.getCPointer(), format.asCString(), flags)
}

public func DragScalarN(label: CStringConvertable, data_type: ImGuiDataType, p_data: Ref<Unit>, components: Int32, v_speed: Float32, p_min: Ref<Unit>, p_max: Ref<Unit>, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igDragScalarN(label.asCString(), data_type, p_data.getCPointer(), components, v_speed, p_min.getCPointer(), p_max.getCPointer(), format.asCString(), flags)
}

public func Dummy(size: ImVec2): Unit {
    return capi.igDummy(unsafe { size.getCPointer().read() })
}

public func End(): Unit {
    return capi.igEnd()
}

public func EndChild(): Unit {
    return capi.igEndChild()
}

public func EndColumns(): Unit {
    return capi.igEndColumns()
}

public func EndCombo(): Unit {
    return capi.igEndCombo()
}

public func EndComboPreview(): Unit {
    return capi.igEndComboPreview()
}

public func EndDisabled(): Unit {
    return capi.igEndDisabled()
}

public func EndDisabledOverrideReenable(): Unit {
    return capi.igEndDisabledOverrideReenable()
}

public func EndDragDropSource(): Unit {
    return capi.igEndDragDropSource()
}

public func EndDragDropTarget(): Unit {
    return capi.igEndDragDropTarget()
}

public func EndFrame(): Unit {
    return capi.igEndFrame()
}

public func EndGroup(): Unit {
    return capi.igEndGroup()
}

public func EndListBox(): Unit {
    return capi.igEndListBox()
}

public func EndMainMenuBar(): Unit {
    return capi.igEndMainMenuBar()
}

public func EndMenu(): Unit {
    return capi.igEndMenu()
}

public func EndMenuBar(): Unit {
    return capi.igEndMenuBar()
}

public func EndPopup(): Unit {
    return capi.igEndPopup()
}

public func EndTabBar(): Unit {
    return capi.igEndTabBar()
}

public func EndTabItem(): Unit {
    return capi.igEndTabItem()
}

public func EndTable(): Unit {
    return capi.igEndTable()
}

public func EndTooltip(): Unit {
    return capi.igEndTooltip()
}

public func ErrorCheckEndFrameRecover(log_callback: ImGuiErrorLogCallback, user_data: Ref<Unit>): Unit {
    return capi.igErrorCheckEndFrameRecover(log_callback, user_data.getCPointer())
}

public func ErrorCheckEndWindowRecover(log_callback: ImGuiErrorLogCallback, user_data: Ref<Unit>): Unit {
    return capi.igErrorCheckEndWindowRecover(log_callback, user_data.getCPointer())
}

public func ErrorCheckUsingSetCursorPosToExtendParentBoundaries(): Unit {
    return capi.igErrorCheckUsingSetCursorPosToExtendParentBoundaries()
}

public func FindBestWindowPosForPopup(pOut: ImVec2, window: Ref<ImGuiWindow>): Unit {
    return capi.igFindBestWindowPosForPopup(pOut.getCPointer(), window.getCPointer())
}

public func FindBestWindowPosForPopupEx(pOut: ImVec2, ref_pos: ImVec2, size: ImVec2, last_dir: Ref<ImGuiDir>, r_outer: ImRect, r_avoid: ImRect, policy: ImGuiPopupPositionPolicy): Unit {
    return capi.igFindBestWindowPosForPopupEx(pOut.getCPointer(), unsafe { ref_pos.getCPointer().read() }, unsafe { size.getCPointer().read() }, last_dir.getCPointer(), unsafe { r_outer.getCPointer().read() }, unsafe { r_avoid.getCPointer().read() }, policy)
}

public func FindBlockingModal(window: Ref<ImGuiWindow>): Ref<ImGuiWindow> {
    return Ref<Unit>.unsafeMake(capi.igFindBlockingModal(window.getCPointer()), count: -1, owned: false)
}

public func FindBottomMostVisibleWindowWithinBeginStack(window: Ref<ImGuiWindow>): Ref<ImGuiWindow> {
    return Ref<Unit>.unsafeMake(capi.igFindBottomMostVisibleWindowWithinBeginStack(window.getCPointer()), count: -1, owned: false)
}

public func FindHoveredViewportFromPlatformWindowStack(mouse_platform_pos: ImVec2): ImGuiViewportP {
    return ImGuiViewportP(capi.igFindHoveredViewportFromPlatformWindowStack(unsafe { mouse_platform_pos.getCPointer().read() }), owned: false)
}

public func FindHoveredWindowEx(pos: ImVec2, find_first_and_in_any_viewport: Bool, out_hovered_window: CPointer<CPointer<ImGuiWindow>>, out_hovered_window_under_moving_window: CPointer<CPointer<ImGuiWindow>>): Unit {
    return capi.igFindHoveredWindowEx(unsafe { pos.getCPointer().read() }, find_first_and_in_any_viewport, out_hovered_window, out_hovered_window_under_moving_window)
}

public func FindOrCreateColumns(window: Ref<ImGuiWindow>, id: ImGuiID): ImGuiOldColumns {
    return ImGuiOldColumns(capi.igFindOrCreateColumns(window.getCPointer(), id), owned: false)
}

public func FindRenderedTextEnd(text: CStringConvertable, text_end: CStringConvertable): String {
    return CString(capi.igFindRenderedTextEnd(text.asCString(), text_end.asCString())).toString()
}

public func FindSettingsHandler(type_name: CStringConvertable): ImGuiSettingsHandler {
    return ImGuiSettingsHandler(capi.igFindSettingsHandler(type_name.asCString()), owned: false)
}

public func FindViewportByID(id: ImGuiID): ImGuiViewport {
    return ImGuiViewport(capi.igFindViewportByID(id), owned: false)
}

public func FindViewportByPlatformHandle(platform_handle: Ref<Unit>): ImGuiViewport {
    return ImGuiViewport(capi.igFindViewportByPlatformHandle(platform_handle.getCPointer()), owned: false)
}

public func FindWindowByID(id: ImGuiID): Ref<ImGuiWindow> {
    return Ref<Unit>.unsafeMake(capi.igFindWindowByID(id), count: -1, owned: false)
}

public func FindWindowByName(name: CStringConvertable): Ref<ImGuiWindow> {
    return Ref<Unit>.unsafeMake(capi.igFindWindowByName(name.asCString()), count: -1, owned: false)
}

public func FindWindowDisplayIndex(window: Ref<ImGuiWindow>): Int32 {
    return capi.igFindWindowDisplayIndex(window.getCPointer())
}

public func FindWindowSettingsByID(id: ImGuiID): ImGuiWindowSettings {
    return ImGuiWindowSettings(capi.igFindWindowSettingsByID(id), owned: false)
}

public func FindWindowSettingsByWindow(window: Ref<ImGuiWindow>): ImGuiWindowSettings {
    return ImGuiWindowSettings(capi.igFindWindowSettingsByWindow(window.getCPointer()), owned: false)
}

public func FixupKeyChord(key_chord: ImGuiKeyChord): ImGuiKeyChord {
    return capi.igFixupKeyChord(key_chord)
}

public func FocusItem(): Unit {
    return capi.igFocusItem()
}

public func FocusTopMostWindowUnderOne(under_this_window: Ref<ImGuiWindow>, ignore_window: Ref<ImGuiWindow>, filter_viewport: ImGuiViewport, flags: ImGuiFocusRequestFlags): Unit {
    return capi.igFocusTopMostWindowUnderOne(under_this_window.getCPointer(), ignore_window.getCPointer(), filter_viewport.getCPointer(), flags)
}

public func FocusWindow(window: Ref<ImGuiWindow>, flags: ImGuiFocusRequestFlags): Unit {
    return capi.igFocusWindow(window.getCPointer(), flags)
}

public func GcAwakeTransientWindowBuffers(window: Ref<ImGuiWindow>): Unit {
    return capi.igGcAwakeTransientWindowBuffers(window.getCPointer())
}

public func GcCompactTransientMiscBuffers(): Unit {
    return capi.igGcCompactTransientMiscBuffers()
}

public func GcCompactTransientWindowBuffers(window: Ref<ImGuiWindow>): Unit {
    return capi.igGcCompactTransientWindowBuffers(window.getCPointer())
}

public func GetActiveID(): ImGuiID {
    return capi.igGetActiveID()
}

public func GetAllocatorFunctions(p_alloc_func: Ref<ImGuiMemAllocFunc>, p_free_func: Ref<ImGuiMemFreeFunc>, p_user_data: CPointer<CPointer<Unit>>): Unit {
    return capi.igGetAllocatorFunctions(p_alloc_func.getCPointer(), p_free_func.getCPointer(), p_user_data)
}

public func GetBackgroundDrawList(): ImDrawList {
    return ImDrawList(capi.igGetBackgroundDrawList_Nil(), owned: false)
}

public func GetBackgroundDrawList(viewport: ImGuiViewport): ImDrawList {
    return ImDrawList(capi.igGetBackgroundDrawList_ViewportPtr(viewport.getCPointer()), owned: false)
}

public func GetClipboardText(): String {
    return CString(capi.igGetClipboardText()).toString()
}

public func GetColorU32(idx: ImGuiCol, alpha_mul: Float32): ImU32 {
    return capi.igGetColorU32_Col(idx, alpha_mul)
}

public func GetColorU32(col: ImVec4): ImU32 {
    return capi.igGetColorU32_Vec4(unsafe { col.getCPointer().read() })
}

public func GetColorU32(col: ImU32, alpha_mul: Float32): ImU32 {
    return capi.igGetColorU32_U32(col, alpha_mul)
}

public func GetColumnIndex(): Int32 {
    return capi.igGetColumnIndex()
}

public func GetColumnNormFromOffset(columns: ImGuiOldColumns, offset: Float32): Float32 {
    return capi.igGetColumnNormFromOffset(columns.getCPointer(), offset)
}

public func GetColumnOffset(column_index: Int32): Float32 {
    return capi.igGetColumnOffset(column_index)
}

public func GetColumnOffsetFromNorm(columns: ImGuiOldColumns, offset_norm: Float32): Float32 {
    return capi.igGetColumnOffsetFromNorm(columns.getCPointer(), offset_norm)
}

public func GetColumnWidth(column_index: Int32): Float32 {
    return capi.igGetColumnWidth(column_index)
}

public func GetColumnsCount(): Int32 {
    return capi.igGetColumnsCount()
}

public func GetColumnsID(str_id: CStringConvertable, count: Int32): ImGuiID {
    return capi.igGetColumnsID(str_id.asCString(), count)
}

public func GetContentRegionAvail(pOut: ImVec2): Unit {
    return capi.igGetContentRegionAvail(pOut.getCPointer())
}

public func GetContentRegionMax(pOut: ImVec2): Unit {
    return capi.igGetContentRegionMax(pOut.getCPointer())
}

public func GetContentRegionMaxAbs(pOut: ImVec2): Unit {
    return capi.igGetContentRegionMaxAbs(pOut.getCPointer())
}

public func GetCurrentContext(): Ref<ImGuiContext> {
    return Ref<Unit>.unsafeMake(capi.igGetCurrentContext(), count: -1, owned: false)
}

public func GetCurrentFocusScope(): ImGuiID {
    return capi.igGetCurrentFocusScope()
}

public func GetCurrentTabBar(): ImGuiTabBar {
    return ImGuiTabBar(capi.igGetCurrentTabBar(), owned: false)
}

public func GetCurrentTable(): Ref<ImGuiTable> {
    return Ref<Unit>.unsafeMake(capi.igGetCurrentTable(), count: -1, owned: false)
}

public func GetCurrentWindow(): Ref<ImGuiWindow> {
    return Ref<Unit>.unsafeMake(capi.igGetCurrentWindow(), count: -1, owned: false)
}

public func GetCurrentWindowRead(): Ref<ImGuiWindow> {
    return Ref<Unit>.unsafeMake(capi.igGetCurrentWindowRead(), count: -1, owned: false)
}

public func GetCursorPos(pOut: ImVec2): Unit {
    return capi.igGetCursorPos(pOut.getCPointer())
}

public func GetCursorPosX(): Float32 {
    return capi.igGetCursorPosX()
}

public func GetCursorPosY(): Float32 {
    return capi.igGetCursorPosY()
}

public func GetCursorScreenPos(pOut: ImVec2): Unit {
    return capi.igGetCursorScreenPos(pOut.getCPointer())
}

public func GetCursorStartPos(pOut: ImVec2): Unit {
    return capi.igGetCursorStartPos(pOut.getCPointer())
}

public func GetDefaultFont(): ImFont {
    return ImFont(capi.igGetDefaultFont(), owned: false)
}

public func GetDragDropPayload(): ImGuiPayload {
    return ImGuiPayload(capi.igGetDragDropPayload(), owned: false)
}

public func GetDrawData(): ImDrawData {
    return ImDrawData(capi.igGetDrawData(), owned: false)
}

public func GetDrawListSharedData(): ImDrawListSharedData {
    return ImDrawListSharedData(capi.igGetDrawListSharedData(), owned: false)
}

public func GetFocusID(): ImGuiID {
    return capi.igGetFocusID()
}

public func GetFont(): ImFont {
    return ImFont(capi.igGetFont(), owned: false)
}

public func GetFontSize(): Float32 {
    return capi.igGetFontSize()
}

public func GetFontTexUvWhitePixel(pOut: ImVec2): Unit {
    return capi.igGetFontTexUvWhitePixel(pOut.getCPointer())
}

public func GetForegroundDrawList(): ImDrawList {
    return ImDrawList(capi.igGetForegroundDrawList_Nil(), owned: false)
}

public func GetForegroundDrawList(viewport: ImGuiViewport): ImDrawList {
    return ImDrawList(capi.igGetForegroundDrawList_ViewportPtr(viewport.getCPointer()), owned: false)
}

public func GetForegroundDrawList(window: Ref<ImGuiWindow>): ImDrawList {
    return ImDrawList(capi.igGetForegroundDrawList_WindowPtr(window.getCPointer()), owned: false)
}

public func GetFrameCount(): Int32 {
    return capi.igGetFrameCount()
}

public func GetFrameHeight(): Float32 {
    return capi.igGetFrameHeight()
}

public func GetFrameHeightWithSpacing(): Float32 {
    return capi.igGetFrameHeightWithSpacing()
}

public func GetHoveredID(): ImGuiID {
    return capi.igGetHoveredID()
}

public func GetID(str_id: CStringConvertable): ImGuiID {
    return capi.igGetID_Str(str_id.asCString())
}

public func GetID(str_id_begin: CStringConvertable, str_id_end: CStringConvertable): ImGuiID {
    return capi.igGetID_StrStr(str_id_begin.asCString(), str_id_end.asCString())
}

public func GetID(ptr_id: Ref<Unit>): ImGuiID {
    return capi.igGetID_Ptr(ptr_id.getCPointer())
}

public func GetIDWithSeed(str_id_begin: CStringConvertable, str_id_end: CStringConvertable, seed: ImGuiID): ImGuiID {
    return capi.igGetIDWithSeed_Str(str_id_begin.asCString(), str_id_end.asCString(), seed)
}

public func GetIDWithSeed(n: Int32, seed: ImGuiID): ImGuiID {
    return capi.igGetIDWithSeed_Int(n, seed)
}

public func GetIO(): ImGuiIO {
    return ImGuiIO(capi.igGetIO(), owned: false)
}

public func GetInputTextState(id: ImGuiID): ImGuiInputTextState {
    return ImGuiInputTextState(capi.igGetInputTextState(id), owned: false)
}

public func GetItemFlags(): ImGuiItemFlags {
    return capi.igGetItemFlags()
}

public func GetItemID(): ImGuiID {
    return capi.igGetItemID()
}

public func GetItemRectMax(pOut: ImVec2): Unit {
    return capi.igGetItemRectMax(pOut.getCPointer())
}

public func GetItemRectMin(pOut: ImVec2): Unit {
    return capi.igGetItemRectMin(pOut.getCPointer())
}

public func GetItemRectSize(pOut: ImVec2): Unit {
    return capi.igGetItemRectSize(pOut.getCPointer())
}

public func GetItemStatusFlags(): ImGuiItemStatusFlags {
    return capi.igGetItemStatusFlags()
}

public func GetKeyChordName(key_chord: ImGuiKeyChord): String {
    return CString(capi.igGetKeyChordName(key_chord)).toString()
}

public func GetKeyData(ctx: Ref<ImGuiContext>, key: ImGuiKey): ImGuiKeyData {
    return ImGuiKeyData(capi.igGetKeyData_ContextPtr(ctx.getCPointer(), key), owned: false)
}

public func GetKeyData(key: ImGuiKey): ImGuiKeyData {
    return ImGuiKeyData(capi.igGetKeyData_Key(key), owned: false)
}

public func GetKeyMagnitude2d(pOut: ImVec2, key_left: ImGuiKey, key_right: ImGuiKey, key_up: ImGuiKey, key_down: ImGuiKey): Unit {
    return capi.igGetKeyMagnitude2d(pOut.getCPointer(), key_left, key_right, key_up, key_down)
}

public func GetKeyName(key: ImGuiKey): String {
    return CString(capi.igGetKeyName(key)).toString()
}

public func GetKeyOwner(key: ImGuiKey): ImGuiID {
    return capi.igGetKeyOwner(key)
}

public func GetKeyOwnerData(ctx: Ref<ImGuiContext>, key: ImGuiKey): ImGuiKeyOwnerData {
    return ImGuiKeyOwnerData(capi.igGetKeyOwnerData(ctx.getCPointer(), key), owned: false)
}

public func GetKeyPressedAmount(key: ImGuiKey, repeat_delay: Float32, rate: Float32): Int32 {
    return capi.igGetKeyPressedAmount(key, repeat_delay, rate)
}

public func GetMainViewport(): ImGuiViewport {
    return ImGuiViewport(capi.igGetMainViewport(), owned: false)
}

public func GetMouseClickedCount(button: ImGuiMouseButton): Int32 {
    return capi.igGetMouseClickedCount(button)
}

public func GetMouseCursor(): ImGuiMouseCursor {
    return capi.igGetMouseCursor()
}

public func GetMouseDragDelta(pOut: ImVec2, button: ImGuiMouseButton, lock_threshold: Float32): Unit {
    return capi.igGetMouseDragDelta(pOut.getCPointer(), button, lock_threshold)
}

public func GetMousePos(pOut: ImVec2): Unit {
    return capi.igGetMousePos(pOut.getCPointer())
}

public func GetMousePosOnOpeningCurrentPopup(pOut: ImVec2): Unit {
    return capi.igGetMousePosOnOpeningCurrentPopup(pOut.getCPointer())
}

public func GetNavTweakPressedAmount(axis: ImGuiAxis): Float32 {
    return capi.igGetNavTweakPressedAmount(axis)
}

public func GetPlatformIO(): ImGuiPlatformIO {
    return ImGuiPlatformIO(capi.igGetPlatformIO(), owned: false)
}

public func GetPopupAllowedExtentRect(pOut: ImRect, window: Ref<ImGuiWindow>): Unit {
    return capi.igGetPopupAllowedExtentRect(pOut.getCPointer(), window.getCPointer())
}

public func GetScrollMaxX(): Float32 {
    return capi.igGetScrollMaxX()
}

public func GetScrollMaxY(): Float32 {
    return capi.igGetScrollMaxY()
}

public func GetScrollX(): Float32 {
    return capi.igGetScrollX()
}

public func GetScrollY(): Float32 {
    return capi.igGetScrollY()
}

public func GetShortcutRoutingData(key_chord: ImGuiKeyChord): ImGuiKeyRoutingData {
    return ImGuiKeyRoutingData(capi.igGetShortcutRoutingData(key_chord), owned: false)
}

public func GetStateStorage(): ImGuiStorage {
    return ImGuiStorage(capi.igGetStateStorage(), owned: false)
}

public func GetStyle(): ImGuiStyle {
    return ImGuiStyle(capi.igGetStyle(), owned: false)
}

public func GetStyleColorName(idx: ImGuiCol): String {
    return CString(capi.igGetStyleColorName(idx)).toString()
}

public func GetStyleColorVec4(idx: ImGuiCol): ImVec4 {
    return ImVec4(capi.igGetStyleColorVec4(idx), owned: false)
}

public func GetStyleVarInfo(idx: ImGuiStyleVar): ImGuiDataVarInfo {
    return ImGuiDataVarInfo(capi.igGetStyleVarInfo(idx), owned: false)
}

public func GetTextLineHeight(): Float32 {
    return capi.igGetTextLineHeight()
}

public func GetTextLineHeightWithSpacing(): Float32 {
    return capi.igGetTextLineHeightWithSpacing()
}

public func GetTime(): Float64 {
    return capi.igGetTime()
}

public func GetTopMostAndVisiblePopupModal(): Ref<ImGuiWindow> {
    return Ref<Unit>.unsafeMake(capi.igGetTopMostAndVisiblePopupModal(), count: -1, owned: false)
}

public func GetTopMostPopupModal(): Ref<ImGuiWindow> {
    return Ref<Unit>.unsafeMake(capi.igGetTopMostPopupModal(), count: -1, owned: false)
}

public func GetTreeNodeToLabelSpacing(): Float32 {
    return capi.igGetTreeNodeToLabelSpacing()
}

public func GetTypematicRepeatRate(flags: ImGuiInputFlags, repeat_delay: Ref<Float32>, repeat_rate: Ref<Float32>): Unit {
    return capi.igGetTypematicRepeatRate(flags, repeat_delay.getCPointer(), repeat_rate.getCPointer())
}

public func GetTypingSelectRequest(flags: ImGuiTypingSelectFlags): ImGuiTypingSelectRequest {
    return ImGuiTypingSelectRequest(capi.igGetTypingSelectRequest(flags), owned: false)
}

public func GetVersion(): String {
    return CString(capi.igGetVersion()).toString()
}

public func GetViewportPlatformMonitor(viewport: ImGuiViewport): ImGuiPlatformMonitor {
    return ImGuiPlatformMonitor(capi.igGetViewportPlatformMonitor(viewport.getCPointer()), owned: false)
}

public func GetWindowAlwaysWantOwnTabBar(window: Ref<ImGuiWindow>): Bool {
    return capi.igGetWindowAlwaysWantOwnTabBar(window.getCPointer())
}

public func GetWindowContentRegionMax(pOut: ImVec2): Unit {
    return capi.igGetWindowContentRegionMax(pOut.getCPointer())
}

public func GetWindowContentRegionMin(pOut: ImVec2): Unit {
    return capi.igGetWindowContentRegionMin(pOut.getCPointer())
}

public func GetWindowDockID(): ImGuiID {
    return capi.igGetWindowDockID()
}

public func GetWindowDockNode(): Ref<ImGuiDockNode> {
    return Ref<Unit>.unsafeMake(capi.igGetWindowDockNode(), count: -1, owned: false)
}

public func GetWindowDpiScale(): Float32 {
    return capi.igGetWindowDpiScale()
}

public func GetWindowDrawList(): ImDrawList {
    return ImDrawList(capi.igGetWindowDrawList(), owned: false)
}

public func GetWindowHeight(): Float32 {
    return capi.igGetWindowHeight()
}

public func GetWindowPos(pOut: ImVec2): Unit {
    return capi.igGetWindowPos(pOut.getCPointer())
}

public func GetWindowResizeBorderID(window: Ref<ImGuiWindow>, dir: ImGuiDir): ImGuiID {
    return capi.igGetWindowResizeBorderID(window.getCPointer(), dir)
}

public func GetWindowResizeCornerID(window: Ref<ImGuiWindow>, n: Int32): ImGuiID {
    return capi.igGetWindowResizeCornerID(window.getCPointer(), n)
}

public func GetWindowScrollbarID(window: Ref<ImGuiWindow>, axis: ImGuiAxis): ImGuiID {
    return capi.igGetWindowScrollbarID(window.getCPointer(), axis)
}

public func GetWindowScrollbarRect(pOut: ImRect, window: Ref<ImGuiWindow>, axis: ImGuiAxis): Unit {
    return capi.igGetWindowScrollbarRect(pOut.getCPointer(), window.getCPointer(), axis)
}

public func GetWindowSize(pOut: ImVec2): Unit {
    return capi.igGetWindowSize(pOut.getCPointer())
}

public func GetWindowViewport(): ImGuiViewport {
    return ImGuiViewport(capi.igGetWindowViewport(), owned: false)
}

public func GetWindowWidth(): Float32 {
    return capi.igGetWindowWidth()
}

public func ImAbs(x: Int32): Int32 {
    return capi.igImAbs_Int(x)
}

public func ImAbs(x: Float32): Float32 {
    return capi.igImAbs_Float(x)
}

public func ImAbs(x: Float64): Float64 {
    return capi.igImAbs_double(x)
}

public func ImAlphaBlendColors(col_a: ImU32, col_b: ImU32): ImU32 {
    return capi.igImAlphaBlendColors(col_a, col_b)
}

public func ImBezierCubicCalc(pOut: ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, t: Float32): Unit {
    return capi.igImBezierCubicCalc(pOut.getCPointer(), unsafe { p1.getCPointer().read() }, unsafe { p2.getCPointer().read() }, unsafe { p3.getCPointer().read() }, unsafe { p4.getCPointer().read() }, t)
}

public func ImBezierCubicClosestPoint(pOut: ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, p: ImVec2, num_segments: Int32): Unit {
    return capi.igImBezierCubicClosestPoint(pOut.getCPointer(), unsafe { p1.getCPointer().read() }, unsafe { p2.getCPointer().read() }, unsafe { p3.getCPointer().read() }, unsafe { p4.getCPointer().read() }, unsafe { p.getCPointer().read() }, num_segments)
}

public func ImBezierCubicClosestPointCasteljau(pOut: ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, p: ImVec2, tess_tol: Float32): Unit {
    return capi.igImBezierCubicClosestPointCasteljau(pOut.getCPointer(), unsafe { p1.getCPointer().read() }, unsafe { p2.getCPointer().read() }, unsafe { p3.getCPointer().read() }, unsafe { p4.getCPointer().read() }, unsafe { p.getCPointer().read() }, tess_tol)
}

public func ImBezierQuadraticCalc(pOut: ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, t: Float32): Unit {
    return capi.igImBezierQuadraticCalc(pOut.getCPointer(), unsafe { p1.getCPointer().read() }, unsafe { p2.getCPointer().read() }, unsafe { p3.getCPointer().read() }, t)
}

public func ImBitArrayClearAllBits(arr: Ref<ImU32>, bitcount: Int32): Unit {
    return capi.igImBitArrayClearAllBits(arr.getCPointer(), bitcount)
}

public func ImBitArrayClearBit(arr: Ref<ImU32>, n: Int32): Unit {
    return capi.igImBitArrayClearBit(arr.getCPointer(), n)
}

public func ImBitArrayGetStorageSizeInBytes(bitcount: Int32): UIntNative {
    return capi.igImBitArrayGetStorageSizeInBytes(bitcount)
}

public func ImBitArraySetBit(arr: Ref<ImU32>, n: Int32): Unit {
    return capi.igImBitArraySetBit(arr.getCPointer(), n)
}

public func ImBitArraySetBitRange(arr: Ref<ImU32>, n: Int32, n2: Int32): Unit {
    return capi.igImBitArraySetBitRange(arr.getCPointer(), n, n2)
}

public func ImBitArrayTestBit(arr: Ref<ImU32>, n: Int32): Bool {
    return capi.igImBitArrayTestBit(arr.getCPointer(), n)
}

public func ImCharIsBlankA(c: UInt8): Bool {
    return capi.igImCharIsBlankA(c)
}

public func ImCharIsBlankW(c: UInt32): Bool {
    return capi.igImCharIsBlankW(c)
}

public func ImClamp(pOut: ImVec2, v: ImVec2, mn: ImVec2, mx: ImVec2): Unit {
    return capi.igImClamp(pOut.getCPointer(), unsafe { v.getCPointer().read() }, unsafe { mn.getCPointer().read() }, unsafe { mx.getCPointer().read() })
}

public func ImDot(a: ImVec2, b: ImVec2): Float32 {
    return capi.igImDot(unsafe { a.getCPointer().read() }, unsafe { b.getCPointer().read() })
}

public func ImExponentialMovingAverage(avg: Float32, sample: Float32, n: Int32): Float32 {
    return capi.igImExponentialMovingAverage(avg, sample, n)
}

public func ImFileClose(file: ImFileHandle): Bool {
    return capi.igImFileClose(file)
}

public func ImFileGetSize(file: ImFileHandle): ImU64 {
    return capi.igImFileGetSize(file)
}

public func ImFileLoadToMemory(filename: CStringConvertable, mode: CStringConvertable, out_file_size: Ref<UIntNative>, padding_bytes: Int32): Ref<Unit> {
    return Ref<Unit>.unsafeMake(capi.igImFileLoadToMemory(filename.asCString(), mode.asCString(), out_file_size.getCPointer(), padding_bytes), count: -1, owned: false)
}

public func ImFileOpen(filename: CStringConvertable, mode: CStringConvertable): ImFileHandle {
    return capi.igImFileOpen(filename.asCString(), mode.asCString())
}

public func ImFileRead(data: Ref<Unit>, size: ImU64, count: ImU64, file: ImFileHandle): ImU64 {
    return capi.igImFileRead(data.getCPointer(), size, count, file)
}

public func ImFileWrite(data: Ref<Unit>, size: ImU64, count: ImU64, file: ImFileHandle): ImU64 {
    return capi.igImFileWrite(data.getCPointer(), size, count, file)
}

public func ImFloor(f: Float32): Float32 {
    return capi.igImFloor_Float(f)
}

public func ImFloor(pOut: ImVec2, v: ImVec2): Unit {
    return capi.igImFloor_Vec2(pOut.getCPointer(), unsafe { v.getCPointer().read() })
}

public func ImFontAtlasBuildFinish(atlas: ImFontAtlas): Unit {
    return capi.igImFontAtlasBuildFinish(atlas.getCPointer())
}

public func ImFontAtlasBuildInit(atlas: ImFontAtlas): Unit {
    return capi.igImFontAtlasBuildInit(atlas.getCPointer())
}

public func ImFontAtlasBuildMultiplyCalcLookupTable(out_table: Ref<UInt8>, in_multiply_factor: Float32): Unit {
    return capi.igImFontAtlasBuildMultiplyCalcLookupTable(out_table.getCPointer(), in_multiply_factor)
}

public func ImFontAtlasBuildMultiplyRectAlpha8(table: Ref<UInt8>, pixels: Ref<UInt8>, x: Int32, y: Int32, w: Int32, h: Int32, stride: Int32): Unit {
    return capi.igImFontAtlasBuildMultiplyRectAlpha8(table.getCPointer(), pixels.getCPointer(), x, y, w, h, stride)
}

public func ImFontAtlasBuildPackCustomRects(atlas: ImFontAtlas, stbrp_context_opaque: Ref<Unit>): Unit {
    return capi.igImFontAtlasBuildPackCustomRects(atlas.getCPointer(), stbrp_context_opaque.getCPointer())
}

public func ImFontAtlasBuildRender32bppRectFromString(atlas: ImFontAtlas, x: Int32, y: Int32, w: Int32, h: Int32, in_str: CStringConvertable, in_marker_char: UInt8, in_marker_pixel_value: UInt32): Unit {
    return capi.igImFontAtlasBuildRender32bppRectFromString(atlas.getCPointer(), x, y, w, h, in_str.asCString(), in_marker_char, in_marker_pixel_value)
}

public func ImFontAtlasBuildRender8bppRectFromString(atlas: ImFontAtlas, x: Int32, y: Int32, w: Int32, h: Int32, in_str: CStringConvertable, in_marker_char: UInt8, in_marker_pixel_value: UInt8): Unit {
    return capi.igImFontAtlasBuildRender8bppRectFromString(atlas.getCPointer(), x, y, w, h, in_str.asCString(), in_marker_char, in_marker_pixel_value)
}

public func ImFontAtlasBuildSetupFont(atlas: ImFontAtlas, font: ImFont, font_config: ImFontConfig, ascent: Float32, descent: Float32): Unit {
    return capi.igImFontAtlasBuildSetupFont(atlas.getCPointer(), font.getCPointer(), font_config.getCPointer(), ascent, descent)
}

public func ImFontAtlasGetBuilderForStbTruetype(): ImFontBuilderIO {
    return ImFontBuilderIO(capi.igImFontAtlasGetBuilderForStbTruetype(), owned: false)
}

public func ImFontAtlasUpdateConfigDataPointers(atlas: ImFontAtlas): Unit {
    return capi.igImFontAtlasUpdateConfigDataPointers(atlas.getCPointer())
}

public func ImFormatString(buf: CStringConvertable, buf_size: UIntNative, fmt: CStringConvertable): Int32 {
    return capi.igImFormatString(buf.asCString(), buf_size, fmt.asCString())
}

public func ImFormatStringToTempBuffer(out_buf: Ref<CPointer<UInt8>>, out_buf_end: Ref<CPointer<UInt8>>, fmt: CStringConvertable): Unit {
    return capi.igImFormatStringToTempBuffer(out_buf.getCPointer(), out_buf_end.getCPointer(), fmt.asCString())
}

// Cangjie does not support `va_list`
// public func ImFormatStringToTempBufferV(out_buf: Ref<CPointer<UInt8>>, out_buf_end: Ref<CPointer<UInt8>>, fmt: CStringConvertable, args: va_list) ...

// Cangjie does not support `va_list`
// public func ImFormatStringV(buf: CStringConvertable, buf_size: UIntNative, fmt: CStringConvertable, args: va_list) ...

public func ImHashData(data: Ref<Unit>, data_size: UIntNative, seed: ImGuiID): ImGuiID {
    return capi.igImHashData(data.getCPointer(), data_size, seed)
}

public func ImHashStr(data: CStringConvertable, data_size: UIntNative, seed: ImGuiID): ImGuiID {
    return capi.igImHashStr(data.asCString(), data_size, seed)
}

public func ImInvLength(lhs: ImVec2, fail_value: Float32): Float32 {
    return capi.igImInvLength(unsafe { lhs.getCPointer().read() }, fail_value)
}

public func ImIsFloatAboveGuaranteedIntegerPrecision(f: Float32): Bool {
    return capi.igImIsFloatAboveGuaranteedIntegerPrecision(f)
}

public func ImIsPowerOfTwo(v: Int32): Bool {
    return capi.igImIsPowerOfTwo_Int(v)
}

public func ImIsPowerOfTwo(v: ImU64): Bool {
    return capi.igImIsPowerOfTwo_U64(v)
}

public func ImLengthSqr(lhs: ImVec2): Float32 {
    return capi.igImLengthSqr_Vec2(unsafe { lhs.getCPointer().read() })
}

public func ImLengthSqr(lhs: ImVec4): Float32 {
    return capi.igImLengthSqr_Vec4(unsafe { lhs.getCPointer().read() })
}

public func ImLerp(pOut: ImVec2, a: ImVec2, b: ImVec2, t: Float32): Unit {
    return capi.igImLerp_Vec2Float(pOut.getCPointer(), unsafe { a.getCPointer().read() }, unsafe { b.getCPointer().read() }, t)
}

public func ImLerp(pOut: ImVec2, a: ImVec2, b: ImVec2, t: ImVec2): Unit {
    return capi.igImLerp_Vec2Vec2(pOut.getCPointer(), unsafe { a.getCPointer().read() }, unsafe { b.getCPointer().read() }, unsafe { t.getCPointer().read() })
}

public func ImLerp(pOut: ImVec4, a: ImVec4, b: ImVec4, t: Float32): Unit {
    return capi.igImLerp_Vec4(pOut.getCPointer(), unsafe { a.getCPointer().read() }, unsafe { b.getCPointer().read() }, t)
}

public func ImLineClosestPoint(pOut: ImVec2, a: ImVec2, b: ImVec2, p: ImVec2): Unit {
    return capi.igImLineClosestPoint(pOut.getCPointer(), unsafe { a.getCPointer().read() }, unsafe { b.getCPointer().read() }, unsafe { p.getCPointer().read() })
}

public func ImLinearSweep(current: Float32, target: Float32, speed: Float32): Float32 {
    return capi.igImLinearSweep(current, target, speed)
}

public func ImLog(x: Float32): Float32 {
    return capi.igImLog_Float(x)
}

public func ImLog(x: Float64): Float64 {
    return capi.igImLog_double(x)
}

public func ImMax(pOut: ImVec2, lhs: ImVec2, rhs: ImVec2): Unit {
    return capi.igImMax(pOut.getCPointer(), unsafe { lhs.getCPointer().read() }, unsafe { rhs.getCPointer().read() })
}

public func ImMin(pOut: ImVec2, lhs: ImVec2, rhs: ImVec2): Unit {
    return capi.igImMin(pOut.getCPointer(), unsafe { lhs.getCPointer().read() }, unsafe { rhs.getCPointer().read() })
}

public func ImModPositive(a: Int32, b: Int32): Int32 {
    return capi.igImModPositive(a, b)
}

public func ImMul(pOut: ImVec2, lhs: ImVec2, rhs: ImVec2): Unit {
    return capi.igImMul(pOut.getCPointer(), unsafe { lhs.getCPointer().read() }, unsafe { rhs.getCPointer().read() })
}

public func ImParseFormatFindEnd(format: CStringConvertable): String {
    return CString(capi.igImParseFormatFindEnd(format.asCString())).toString()
}

public func ImParseFormatFindStart(format: CStringConvertable): String {
    return CString(capi.igImParseFormatFindStart(format.asCString())).toString()
}

public func ImParseFormatPrecision(format: CStringConvertable, default_value: Int32): Int32 {
    return capi.igImParseFormatPrecision(format.asCString(), default_value)
}

public func ImParseFormatSanitizeForPrinting(fmt_in: CStringConvertable, fmt_out: CStringConvertable, fmt_out_size: UIntNative): Unit {
    return capi.igImParseFormatSanitizeForPrinting(fmt_in.asCString(), fmt_out.asCString(), fmt_out_size)
}

public func ImParseFormatSanitizeForScanning(fmt_in: CStringConvertable, fmt_out: CStringConvertable, fmt_out_size: UIntNative): String {
    return CString(capi.igImParseFormatSanitizeForScanning(fmt_in.asCString(), fmt_out.asCString(), fmt_out_size)).toString()
}

public func ImParseFormatTrimDecorations(format: CStringConvertable, buf: CStringConvertable, buf_size: UIntNative): String {
    return CString(capi.igImParseFormatTrimDecorations(format.asCString(), buf.asCString(), buf_size)).toString()
}

public func ImPow(x: Float32, y: Float32): Float32 {
    return capi.igImPow_Float(x, y)
}

public func ImPow(x: Float64, y: Float64): Float64 {
    return capi.igImPow_double(x, y)
}

public func ImQsort(base: Ref<Unit>, count: UIntNative, size_of_element: UIntNative, compare_func: CFunc<(arg1: CPointer<Unit>, arg2: CPointer<Unit>) -> Int32>): Unit {
    return capi.igImQsort(base.getCPointer(), count, size_of_element, compare_func)
}

public func ImRotate(pOut: ImVec2, v: ImVec2, cos_a: Float32, sin_a: Float32): Unit {
    return capi.igImRotate(pOut.getCPointer(), unsafe { v.getCPointer().read() }, cos_a, sin_a)
}

public func ImRsqrt(x: Float32): Float32 {
    return capi.igImRsqrt_Float(x)
}

public func ImRsqrt(x: Float64): Float64 {
    return capi.igImRsqrt_double(x)
}

public func ImSaturate(f: Float32): Float32 {
    return capi.igImSaturate(f)
}

public func ImSign(x: Float32): Float32 {
    return capi.igImSign_Float(x)
}

public func ImSign(x: Float64): Float64 {
    return capi.igImSign_double(x)
}

public func ImStrSkipBlank(str: CStringConvertable): String {
    return CString(capi.igImStrSkipBlank(str.asCString())).toString()
}

public func ImStrTrimBlanks(str: CStringConvertable): Unit {
    return capi.igImStrTrimBlanks(str.asCString())
}

public func ImStrbolW(buf_mid_line: Ref<ImWchar>, buf_begin: Ref<ImWchar>): Ref<ImWchar> {
    return Ref<UInt16>.unsafeMake(capi.igImStrbolW(buf_mid_line.getCPointer(), buf_begin.getCPointer()), count: -1, owned: false)
}

public func ImStrchrRange(str_begin: CStringConvertable, str_end: CStringConvertable, c: UInt8): String {
    return CString(capi.igImStrchrRange(str_begin.asCString(), str_end.asCString(), c)).toString()
}

public func ImStrdup(str: CStringConvertable): String {
    return CString(capi.igImStrdup(str.asCString())).toString()
}

public func ImStrdupcpy(dst: CStringConvertable, p_dst_size: Ref<UIntNative>, str: CStringConvertable): String {
    return CString(capi.igImStrdupcpy(dst.asCString(), p_dst_size.getCPointer(), str.asCString())).toString()
}

public func ImStreolRange(str: CStringConvertable, str_end: CStringConvertable): String {
    return CString(capi.igImStreolRange(str.asCString(), str_end.asCString())).toString()
}

public func ImStricmp(str1: CStringConvertable, str2: CStringConvertable): Int32 {
    return capi.igImStricmp(str1.asCString(), str2.asCString())
}

public func ImStristr(haystack: CStringConvertable, haystack_end: CStringConvertable, needle: CStringConvertable, needle_end: CStringConvertable): String {
    return CString(capi.igImStristr(haystack.asCString(), haystack_end.asCString(), needle.asCString(), needle_end.asCString())).toString()
}

public func ImStrlenW(str: Ref<ImWchar>): Int32 {
    return capi.igImStrlenW(str.getCPointer())
}

public func ImStrncpy(dst: CStringConvertable, src: CStringConvertable, count: UIntNative): Unit {
    return capi.igImStrncpy(dst.asCString(), src.asCString(), count)
}

public func ImStrnicmp(str1: CStringConvertable, str2: CStringConvertable, count: UIntNative): Int32 {
    return capi.igImStrnicmp(str1.asCString(), str2.asCString(), count)
}

public func ImTextCharFromUtf8(out_char: Ref<UInt32>, in_text: CStringConvertable, in_text_end: CStringConvertable): Int32 {
    return capi.igImTextCharFromUtf8(out_char.getCPointer(), in_text.asCString(), in_text_end.asCString())
}

public func ImTextCharToUtf8(out_buf: Ref<UInt8>, c: UInt32): String {
    return CString(capi.igImTextCharToUtf8(out_buf.getCPointer(), c)).toString()
}

public func ImTextCountCharsFromUtf8(in_text: CStringConvertable, in_text_end: CStringConvertable): Int32 {
    return capi.igImTextCountCharsFromUtf8(in_text.asCString(), in_text_end.asCString())
}

public func ImTextCountLines(in_text: CStringConvertable, in_text_end: CStringConvertable): Int32 {
    return capi.igImTextCountLines(in_text.asCString(), in_text_end.asCString())
}

public func ImTextCountUtf8BytesFromChar(in_text: CStringConvertable, in_text_end: CStringConvertable): Int32 {
    return capi.igImTextCountUtf8BytesFromChar(in_text.asCString(), in_text_end.asCString())
}

public func ImTextCountUtf8BytesFromStr(in_text: Ref<ImWchar>, in_text_end: Ref<ImWchar>): Int32 {
    return capi.igImTextCountUtf8BytesFromStr(in_text.getCPointer(), in_text_end.getCPointer())
}

public func ImTextFindPreviousUtf8Codepoint(in_text_start: CStringConvertable, in_text_curr: CStringConvertable): String {
    return CString(capi.igImTextFindPreviousUtf8Codepoint(in_text_start.asCString(), in_text_curr.asCString())).toString()
}

public func ImTextStrFromUtf8(out_buf: Ref<ImWchar>, out_buf_size: Int32, in_text: CStringConvertable, in_text_end: CStringConvertable, in_remaining: Ref<CPointer<UInt8>>): Int32 {
    return capi.igImTextStrFromUtf8(out_buf.getCPointer(), out_buf_size, in_text.asCString(), in_text_end.asCString(), in_remaining.getCPointer())
}

public func ImTextStrToUtf8(out_buf: CStringConvertable, out_buf_size: Int32, in_text: Ref<ImWchar>, in_text_end: Ref<ImWchar>): Int32 {
    return capi.igImTextStrToUtf8(out_buf.asCString(), out_buf_size, in_text.getCPointer(), in_text_end.getCPointer())
}

public func ImToUpper(c: UInt8): UInt8 {
    return capi.igImToUpper(c)
}

public func ImTriangleArea(a: ImVec2, b: ImVec2, c: ImVec2): Float32 {
    return capi.igImTriangleArea(unsafe { a.getCPointer().read() }, unsafe { b.getCPointer().read() }, unsafe { c.getCPointer().read() })
}

public func ImTriangleBarycentricCoords(a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2, out_u: Ref<Float32>, out_v: Ref<Float32>, out_w: Ref<Float32>): Unit {
    return capi.igImTriangleBarycentricCoords(unsafe { a.getCPointer().read() }, unsafe { b.getCPointer().read() }, unsafe { c.getCPointer().read() }, unsafe { p.getCPointer().read() }, out_u.getCPointer(), out_v.getCPointer(), out_w.getCPointer())
}

public func ImTriangleClosestPoint(pOut: ImVec2, a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2): Unit {
    return capi.igImTriangleClosestPoint(pOut.getCPointer(), unsafe { a.getCPointer().read() }, unsafe { b.getCPointer().read() }, unsafe { c.getCPointer().read() }, unsafe { p.getCPointer().read() })
}

public func ImTriangleContainsPoint(a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2): Bool {
    return capi.igImTriangleContainsPoint(unsafe { a.getCPointer().read() }, unsafe { b.getCPointer().read() }, unsafe { c.getCPointer().read() }, unsafe { p.getCPointer().read() })
}

public func ImTriangleIsClockwise(a: ImVec2, b: ImVec2, c: ImVec2): Bool {
    return capi.igImTriangleIsClockwise(unsafe { a.getCPointer().read() }, unsafe { b.getCPointer().read() }, unsafe { c.getCPointer().read() })
}

public func ImTrunc(f: Float32): Float32 {
    return capi.igImTrunc_Float(f)
}

public func ImTrunc(pOut: ImVec2, v: ImVec2): Unit {
    return capi.igImTrunc_Vec2(pOut.getCPointer(), unsafe { v.getCPointer().read() })
}

public func ImUpperPowerOfTwo(v: Int32): Int32 {
    return capi.igImUpperPowerOfTwo(v)
}

public func Image(user_texture_id: ImTextureID, image_size: ImVec2, uv0: ImVec2, uv1: ImVec2, tint_col: ImVec4, border_col: ImVec4): Unit {
    return capi.igImage(user_texture_id, unsafe { image_size.getCPointer().read() }, unsafe { uv0.getCPointer().read() }, unsafe { uv1.getCPointer().read() }, unsafe { tint_col.getCPointer().read() }, unsafe { border_col.getCPointer().read() })
}

public func ImageButton(str_id: CStringConvertable, user_texture_id: ImTextureID, image_size: ImVec2, uv0: ImVec2, uv1: ImVec2, bg_col: ImVec4, tint_col: ImVec4): Bool {
    return capi.igImageButton(str_id.asCString(), user_texture_id, unsafe { image_size.getCPointer().read() }, unsafe { uv0.getCPointer().read() }, unsafe { uv1.getCPointer().read() }, unsafe { bg_col.getCPointer().read() }, unsafe { tint_col.getCPointer().read() })
}

public func ImageButtonEx(id: ImGuiID, texture_id: ImTextureID, image_size: ImVec2, uv0: ImVec2, uv1: ImVec2, bg_col: ImVec4, tint_col: ImVec4, flags: ImGuiButtonFlags): Bool {
    return capi.igImageButtonEx(id, texture_id, unsafe { image_size.getCPointer().read() }, unsafe { uv0.getCPointer().read() }, unsafe { uv1.getCPointer().read() }, unsafe { bg_col.getCPointer().read() }, unsafe { tint_col.getCPointer().read() }, flags)
}

public func Indent(indent_w: Float32): Unit {
    return capi.igIndent(indent_w)
}

public func Initialize(): Unit {
    return capi.igInitialize()
}

public func InputDouble(label: CStringConvertable, v: Ref<Float64>, step: Float64, step_fast: Float64, format: CStringConvertable, flags: ImGuiInputTextFlags): Bool {
    return capi.igInputDouble(label.asCString(), v.getCPointer(), step, step_fast, format.asCString(), flags)
}

public func InputFloat(label: CStringConvertable, v: Ref<Float32>, step: Float32, step_fast: Float32, format: CStringConvertable, flags: ImGuiInputTextFlags): Bool {
    return capi.igInputFloat(label.asCString(), v.getCPointer(), step, step_fast, format.asCString(), flags)
}

public func InputFloat2(label: CStringConvertable, v: Ref<Float32>, format: CStringConvertable, flags: ImGuiInputTextFlags): Bool {
    return capi.igInputFloat2(label.asCString(), v.getCPointer(), format.asCString(), flags)
}

public func InputFloat3(label: CStringConvertable, v: Ref<Float32>, format: CStringConvertable, flags: ImGuiInputTextFlags): Bool {
    return capi.igInputFloat3(label.asCString(), v.getCPointer(), format.asCString(), flags)
}

public func InputFloat4(label: CStringConvertable, v: Ref<Float32>, format: CStringConvertable, flags: ImGuiInputTextFlags): Bool {
    return capi.igInputFloat4(label.asCString(), v.getCPointer(), format.asCString(), flags)
}

public func InputInt(label: CStringConvertable, v: Ref<Int32>, step: Int32, step_fast: Int32, flags: ImGuiInputTextFlags): Bool {
    return capi.igInputInt(label.asCString(), v.getCPointer(), step, step_fast, flags)
}

public func InputInt2(label: CStringConvertable, v: Ref<Int32>, flags: ImGuiInputTextFlags): Bool {
    return capi.igInputInt2(label.asCString(), v.getCPointer(), flags)
}

public func InputInt3(label: CStringConvertable, v: Ref<Int32>, flags: ImGuiInputTextFlags): Bool {
    return capi.igInputInt3(label.asCString(), v.getCPointer(), flags)
}

public func InputInt4(label: CStringConvertable, v: Ref<Int32>, flags: ImGuiInputTextFlags): Bool {
    return capi.igInputInt4(label.asCString(), v.getCPointer(), flags)
}

public func InputScalar(label: CStringConvertable, data_type: ImGuiDataType, p_data: Ref<Unit>, p_step: Ref<Unit>, p_step_fast: Ref<Unit>, format: CStringConvertable, flags: ImGuiInputTextFlags): Bool {
    return capi.igInputScalar(label.asCString(), data_type, p_data.getCPointer(), p_step.getCPointer(), p_step_fast.getCPointer(), format.asCString(), flags)
}

public func InputScalarN(label: CStringConvertable, data_type: ImGuiDataType, p_data: Ref<Unit>, components: Int32, p_step: Ref<Unit>, p_step_fast: Ref<Unit>, format: CStringConvertable, flags: ImGuiInputTextFlags): Bool {
    return capi.igInputScalarN(label.asCString(), data_type, p_data.getCPointer(), components, p_step.getCPointer(), p_step_fast.getCPointer(), format.asCString(), flags)
}

public func InputText(label: CStringConvertable, buf: CStringConvertable, buf_size: UIntNative, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: Ref<Unit>): Bool {
    return capi.igInputText(label.asCString(), buf.asCString(), buf_size, flags, callback, user_data.getCPointer())
}

public func InputTextDeactivateHook(id: ImGuiID): Unit {
    return capi.igInputTextDeactivateHook(id)
}

public func InputTextEx(label: CStringConvertable, hint: CStringConvertable, buf: CStringConvertable, buf_size: Int32, size_arg: ImVec2, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: Ref<Unit>): Bool {
    return capi.igInputTextEx(label.asCString(), hint.asCString(), buf.asCString(), buf_size, unsafe { size_arg.getCPointer().read() }, flags, callback, user_data.getCPointer())
}

public func InputTextMultiline(label: CStringConvertable, buf: CStringConvertable, buf_size: UIntNative, size: ImVec2, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: Ref<Unit>): Bool {
    return capi.igInputTextMultiline(label.asCString(), buf.asCString(), buf_size, unsafe { size.getCPointer().read() }, flags, callback, user_data.getCPointer())
}

public func InputTextWithHint(label: CStringConvertable, hint: CStringConvertable, buf: CStringConvertable, buf_size: UIntNative, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: Ref<Unit>): Bool {
    return capi.igInputTextWithHint(label.asCString(), hint.asCString(), buf.asCString(), buf_size, flags, callback, user_data.getCPointer())
}

public func InvisibleButton(str_id: CStringConvertable, size: ImVec2, flags: ImGuiButtonFlags): Bool {
    return capi.igInvisibleButton(str_id.asCString(), unsafe { size.getCPointer().read() }, flags)
}

public func IsActiveIdUsingNavDir(dir: ImGuiDir): Bool {
    return capi.igIsActiveIdUsingNavDir(dir)
}

public func IsAliasKey(key: ImGuiKey): Bool {
    return capi.igIsAliasKey(key)
}

public func IsAnyItemActive(): Bool {
    return capi.igIsAnyItemActive()
}

public func IsAnyItemFocused(): Bool {
    return capi.igIsAnyItemFocused()
}

public func IsAnyItemHovered(): Bool {
    return capi.igIsAnyItemHovered()
}

public func IsAnyMouseDown(): Bool {
    return capi.igIsAnyMouseDown()
}

public func IsClippedEx(bb: ImRect, id: ImGuiID): Bool {
    return capi.igIsClippedEx(unsafe { bb.getCPointer().read() }, id)
}

public func IsDragDropActive(): Bool {
    return capi.igIsDragDropActive()
}

public func IsDragDropPayloadBeingAccepted(): Bool {
    return capi.igIsDragDropPayloadBeingAccepted()
}

public func IsGamepadKey(key: ImGuiKey): Bool {
    return capi.igIsGamepadKey(key)
}

public func IsItemActivated(): Bool {
    return capi.igIsItemActivated()
}

public func IsItemActive(): Bool {
    return capi.igIsItemActive()
}

public func IsItemClicked(mouse_button: ImGuiMouseButton): Bool {
    return capi.igIsItemClicked(mouse_button)
}

public func IsItemDeactivated(): Bool {
    return capi.igIsItemDeactivated()
}

public func IsItemDeactivatedAfterEdit(): Bool {
    return capi.igIsItemDeactivatedAfterEdit()
}

public func IsItemEdited(): Bool {
    return capi.igIsItemEdited()
}

public func IsItemFocused(): Bool {
    return capi.igIsItemFocused()
}

public func IsItemHovered(flags: ImGuiHoveredFlags): Bool {
    return capi.igIsItemHovered(flags)
}

public func IsItemToggledOpen(): Bool {
    return capi.igIsItemToggledOpen()
}

public func IsItemToggledSelection(): Bool {
    return capi.igIsItemToggledSelection()
}

public func IsItemVisible(): Bool {
    return capi.igIsItemVisible()
}

public func IsKeyChordPressed(key_chord: ImGuiKeyChord): Bool {
    return capi.igIsKeyChordPressed_Nil(key_chord)
}

public func IsKeyChordPressed(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags, owner_id: ImGuiID): Bool {
    return capi.igIsKeyChordPressed_InputFlags(key_chord, flags, owner_id)
}

public func IsKeyDown(key: ImGuiKey): Bool {
    return capi.igIsKeyDown_Nil(key)
}

public func IsKeyDown(key: ImGuiKey, owner_id: ImGuiID): Bool {
    return capi.igIsKeyDown_ID(key, owner_id)
}

public func IsKeyPressed(key: ImGuiKey, repeat: Bool): Bool {
    return capi.igIsKeyPressed_Bool(key, repeat)
}

public func IsKeyPressed(key: ImGuiKey, flags: ImGuiInputFlags, owner_id: ImGuiID): Bool {
    return capi.igIsKeyPressed_InputFlags(key, flags, owner_id)
}

public func IsKeyReleased(key: ImGuiKey): Bool {
    return capi.igIsKeyReleased_Nil(key)
}

public func IsKeyReleased(key: ImGuiKey, owner_id: ImGuiID): Bool {
    return capi.igIsKeyReleased_ID(key, owner_id)
}

public func IsKeyboardKey(key: ImGuiKey): Bool {
    return capi.igIsKeyboardKey(key)
}

public func IsLegacyKey(key: ImGuiKey): Bool {
    return capi.igIsLegacyKey(key)
}

public func IsModKey(key: ImGuiKey): Bool {
    return capi.igIsModKey(key)
}

public func IsMouseClicked(button: ImGuiMouseButton, repeat: Bool): Bool {
    return capi.igIsMouseClicked_Bool(button, repeat)
}

public func IsMouseClicked(button: ImGuiMouseButton, flags: ImGuiInputFlags, owner_id: ImGuiID): Bool {
    return capi.igIsMouseClicked_InputFlags(button, flags, owner_id)
}

public func IsMouseDoubleClicked(button: ImGuiMouseButton): Bool {
    return capi.igIsMouseDoubleClicked_Nil(button)
}

public func IsMouseDoubleClicked(button: ImGuiMouseButton, owner_id: ImGuiID): Bool {
    return capi.igIsMouseDoubleClicked_ID(button, owner_id)
}

public func IsMouseDown(button: ImGuiMouseButton): Bool {
    return capi.igIsMouseDown_Nil(button)
}

public func IsMouseDown(button: ImGuiMouseButton, owner_id: ImGuiID): Bool {
    return capi.igIsMouseDown_ID(button, owner_id)
}

public func IsMouseDragPastThreshold(button: ImGuiMouseButton, lock_threshold: Float32): Bool {
    return capi.igIsMouseDragPastThreshold(button, lock_threshold)
}

public func IsMouseDragging(button: ImGuiMouseButton, lock_threshold: Float32): Bool {
    return capi.igIsMouseDragging(button, lock_threshold)
}

public func IsMouseHoveringRect(r_min: ImVec2, r_max: ImVec2, clip: Bool): Bool {
    return capi.igIsMouseHoveringRect(unsafe { r_min.getCPointer().read() }, unsafe { r_max.getCPointer().read() }, clip)
}

public func IsMouseKey(key: ImGuiKey): Bool {
    return capi.igIsMouseKey(key)
}

public func IsMousePosValid(mouse_pos: ImVec2): Bool {
    return capi.igIsMousePosValid(mouse_pos.getCPointer())
}

public func IsMouseReleased(button: ImGuiMouseButton): Bool {
    return capi.igIsMouseReleased_Nil(button)
}

public func IsMouseReleased(button: ImGuiMouseButton, owner_id: ImGuiID): Bool {
    return capi.igIsMouseReleased_ID(button, owner_id)
}

public func IsNamedKey(key: ImGuiKey): Bool {
    return capi.igIsNamedKey(key)
}

public func IsNamedKeyOrMod(key: ImGuiKey): Bool {
    return capi.igIsNamedKeyOrMod(key)
}

public func IsPopupOpen(str_id: CStringConvertable, flags: ImGuiPopupFlags): Bool {
    return capi.igIsPopupOpen_Str(str_id.asCString(), flags)
}

public func IsPopupOpen(id: ImGuiID, popup_flags: ImGuiPopupFlags): Bool {
    return capi.igIsPopupOpen_ID(id, popup_flags)
}

public func IsRectVisible(size: ImVec2): Bool {
    return capi.igIsRectVisible_Nil(unsafe { size.getCPointer().read() })
}

public func IsRectVisible(rect_min: ImVec2, rect_max: ImVec2): Bool {
    return capi.igIsRectVisible_Vec2(unsafe { rect_min.getCPointer().read() }, unsafe { rect_max.getCPointer().read() })
}

public func IsWindowAbove(potential_above: Ref<ImGuiWindow>, potential_below: Ref<ImGuiWindow>): Bool {
    return capi.igIsWindowAbove(potential_above.getCPointer(), potential_below.getCPointer())
}

public func IsWindowAppearing(): Bool {
    return capi.igIsWindowAppearing()
}

public func IsWindowChildOf(window: Ref<ImGuiWindow>, potential_parent: Ref<ImGuiWindow>, popup_hierarchy: Bool, dock_hierarchy: Bool): Bool {
    return capi.igIsWindowChildOf(window.getCPointer(), potential_parent.getCPointer(), popup_hierarchy, dock_hierarchy)
}

public func IsWindowCollapsed(): Bool {
    return capi.igIsWindowCollapsed()
}

public func IsWindowContentHoverable(window: Ref<ImGuiWindow>, flags: ImGuiHoveredFlags): Bool {
    return capi.igIsWindowContentHoverable(window.getCPointer(), flags)
}

public func IsWindowDocked(): Bool {
    return capi.igIsWindowDocked()
}

public func IsWindowFocused(flags: ImGuiFocusedFlags): Bool {
    return capi.igIsWindowFocused(flags)
}

public func IsWindowHovered(flags: ImGuiHoveredFlags): Bool {
    return capi.igIsWindowHovered(flags)
}

public func IsWindowNavFocusable(window: Ref<ImGuiWindow>): Bool {
    return capi.igIsWindowNavFocusable(window.getCPointer())
}

public func IsWindowWithinBeginStackOf(window: Ref<ImGuiWindow>, potential_parent: Ref<ImGuiWindow>): Bool {
    return capi.igIsWindowWithinBeginStackOf(window.getCPointer(), potential_parent.getCPointer())
}

public func ItemAdd(bb: ImRect, id: ImGuiID, nav_bb: ImRect, extra_flags: ImGuiItemFlags): Bool {
    return capi.igItemAdd(unsafe { bb.getCPointer().read() }, id, nav_bb.getCPointer(), extra_flags)
}

public func ItemHoverable(bb: ImRect, id: ImGuiID, item_flags: ImGuiItemFlags): Bool {
    return capi.igItemHoverable(unsafe { bb.getCPointer().read() }, id, item_flags)
}

public func ItemSize(size: ImVec2, text_baseline_y: Float32): Unit {
    return capi.igItemSize_Vec2(unsafe { size.getCPointer().read() }, text_baseline_y)
}

public func ItemSize(bb: ImRect, text_baseline_y: Float32): Unit {
    return capi.igItemSize_Rect(unsafe { bb.getCPointer().read() }, text_baseline_y)
}

public func KeepAliveID(id: ImGuiID): Unit {
    return capi.igKeepAliveID(id)
}

public func LabelText(label: CStringConvertable, fmt: CStringConvertable): Unit {
    return capi.igLabelText(label.asCString(), fmt.asCString())
}

// Cangjie does not support `va_list`
// public func LabelTextV(label: CStringConvertable, fmt: CStringConvertable, args: va_list) ...

public func ListBox(label: CStringConvertable, current_item: Ref<Int32>, items: Ref<CPointer<UInt8>>, items_count: Int32, height_in_items: Int32): Bool {
    return capi.igListBox_Str_arr(label.asCString(), current_item.getCPointer(), items.getCPointer(), items_count, height_in_items)
}

public func ListBox(label: CStringConvertable, current_item: Ref<Int32>, getter: CFunc<(user_data: CPointer<Unit>, idx: Int32) -> CPointer<UInt8>>, user_data: Ref<Unit>, items_count: Int32, height_in_items: Int32): Bool {
    return capi.igListBox_FnStrPtr(label.asCString(), current_item.getCPointer(), getter, user_data.getCPointer(), items_count, height_in_items)
}

public func LoadIniSettingsFromDisk(ini_filename: CStringConvertable): Unit {
    return capi.igLoadIniSettingsFromDisk(ini_filename.asCString())
}

public func LoadIniSettingsFromMemory(ini_data: CStringConvertable, ini_size: UIntNative): Unit {
    return capi.igLoadIniSettingsFromMemory(ini_data.asCString(), ini_size)
}

public func LocalizeGetMsg(key: ImGuiLocKey): String {
    return CString(capi.igLocalizeGetMsg(key)).toString()
}

public func LocalizeRegisterEntries(entries: ImGuiLocEntry, count: Int32): Unit {
    return capi.igLocalizeRegisterEntries(entries.getCPointer(), count)
}

public func LogBegin(`type`: ImGuiLogType, auto_open_depth: Int32): Unit {
    return capi.igLogBegin(`type`, auto_open_depth)
}

public func LogButtons(): Unit {
    return capi.igLogButtons()
}

public func LogFinish(): Unit {
    return capi.igLogFinish()
}

public func LogRenderedText(ref_pos: ImVec2, text: CStringConvertable, text_end: CStringConvertable): Unit {
    return capi.igLogRenderedText(ref_pos.getCPointer(), text.asCString(), text_end.asCString())
}

public func LogSetNextTextDecoration(prefix: CStringConvertable, suffix: CStringConvertable): Unit {
    return capi.igLogSetNextTextDecoration(prefix.asCString(), suffix.asCString())
}

public func LogText(fmt: CStringConvertable): Unit {
    return capi.igLogText(fmt.asCString())
}

// Cangjie does not support `va_list`
// public func LogTextV(fmt: CStringConvertable, args: va_list) ...

public func LogToBuffer(auto_open_depth: Int32): Unit {
    return capi.igLogToBuffer(auto_open_depth)
}

public func LogToClipboard(auto_open_depth: Int32): Unit {
    return capi.igLogToClipboard(auto_open_depth)
}

public func LogToFile(auto_open_depth: Int32, filename: CStringConvertable): Unit {
    return capi.igLogToFile(auto_open_depth, filename.asCString())
}

public func LogToTTY(auto_open_depth: Int32): Unit {
    return capi.igLogToTTY(auto_open_depth)
}

public func MarkIniSettingsDirty(): Unit {
    return capi.igMarkIniSettingsDirty_Nil()
}

public func MarkIniSettingsDirty(window: Ref<ImGuiWindow>): Unit {
    return capi.igMarkIniSettingsDirty_WindowPtr(window.getCPointer())
}

public func MarkItemEdited(id: ImGuiID): Unit {
    return capi.igMarkItemEdited(id)
}

public func MemAlloc(size: UIntNative): Ref<Unit> {
    return Ref<Unit>.unsafeMake(capi.igMemAlloc(size), count: -1, owned: false)
}

public func MemFree(ptr: Ref<Unit>): Unit {
    return capi.igMemFree(ptr.getCPointer())
}

public func MenuItem(label: CStringConvertable, shortcut: CStringConvertable, selected: Bool, enabled: Bool): Bool {
    return capi.igMenuItem_Bool(label.asCString(), shortcut.asCString(), selected, enabled)
}

public func MenuItem(label: CStringConvertable, shortcut: CStringConvertable, p_selected: Ref<Bool>, enabled: Bool): Bool {
    return capi.igMenuItem_BoolPtr(label.asCString(), shortcut.asCString(), p_selected.getCPointer(), enabled)
}

public func MenuItemEx(label: CStringConvertable, icon: CStringConvertable, shortcut: CStringConvertable, selected: Bool, enabled: Bool): Bool {
    return capi.igMenuItemEx(label.asCString(), icon.asCString(), shortcut.asCString(), selected, enabled)
}

public func MouseButtonToKey(button: ImGuiMouseButton): ImGuiKey {
    return capi.igMouseButtonToKey(button)
}

public func NavClearPreferredPosForAxis(axis: ImGuiAxis): Unit {
    return capi.igNavClearPreferredPosForAxis(axis)
}

public func NavHighlightActivated(id: ImGuiID): Unit {
    return capi.igNavHighlightActivated(id)
}

public func NavInitRequestApplyResult(): Unit {
    return capi.igNavInitRequestApplyResult()
}

public func NavInitWindow(window: Ref<ImGuiWindow>, force_reinit: Bool): Unit {
    return capi.igNavInitWindow(window.getCPointer(), force_reinit)
}

public func NavMoveRequestApplyResult(): Unit {
    return capi.igNavMoveRequestApplyResult()
}

public func NavMoveRequestButNoResultYet(): Bool {
    return capi.igNavMoveRequestButNoResultYet()
}

public func NavMoveRequestCancel(): Unit {
    return capi.igNavMoveRequestCancel()
}

public func NavMoveRequestForward(move_dir: ImGuiDir, clip_dir: ImGuiDir, move_flags: ImGuiNavMoveFlags, scroll_flags: ImGuiScrollFlags): Unit {
    return capi.igNavMoveRequestForward(move_dir, clip_dir, move_flags, scroll_flags)
}

public func NavMoveRequestResolveWithLastItem(result: ImGuiNavItemData): Unit {
    return capi.igNavMoveRequestResolveWithLastItem(result.getCPointer())
}

public func NavMoveRequestResolveWithPastTreeNode(result: ImGuiNavItemData, tree_node_data: ImGuiNavTreeNodeData): Unit {
    return capi.igNavMoveRequestResolveWithPastTreeNode(result.getCPointer(), tree_node_data.getCPointer())
}

public func NavMoveRequestSubmit(move_dir: ImGuiDir, clip_dir: ImGuiDir, move_flags: ImGuiNavMoveFlags, scroll_flags: ImGuiScrollFlags): Unit {
    return capi.igNavMoveRequestSubmit(move_dir, clip_dir, move_flags, scroll_flags)
}

public func NavMoveRequestTryWrapping(window: Ref<ImGuiWindow>, move_flags: ImGuiNavMoveFlags): Unit {
    return capi.igNavMoveRequestTryWrapping(window.getCPointer(), move_flags)
}

public func NavRestoreHighlightAfterMove(): Unit {
    return capi.igNavRestoreHighlightAfterMove()
}

public func NavUpdateCurrentWindowIsScrollPushableX(): Unit {
    return capi.igNavUpdateCurrentWindowIsScrollPushableX()
}

public func NewFrame(): Unit {
    return capi.igNewFrame()
}

public func NewLine(): Unit {
    return capi.igNewLine()
}

public func NextColumn(): Unit {
    return capi.igNextColumn()
}

public func OpenPopup(str_id: CStringConvertable, popup_flags: ImGuiPopupFlags): Unit {
    return capi.igOpenPopup_Str(str_id.asCString(), popup_flags)
}

public func OpenPopup(id: ImGuiID, popup_flags: ImGuiPopupFlags): Unit {
    return capi.igOpenPopup_ID(id, popup_flags)
}

public func OpenPopupEx(id: ImGuiID, popup_flags: ImGuiPopupFlags): Unit {
    return capi.igOpenPopupEx(id, popup_flags)
}

public func OpenPopupOnItemClick(str_id: CStringConvertable, popup_flags: ImGuiPopupFlags): Unit {
    return capi.igOpenPopupOnItemClick(str_id.asCString(), popup_flags)
}

public func PlotEx(plot_type: ImGuiPlotType, label: CStringConvertable, values_getter: CFunc<(data: CPointer<Unit>, idx: Int32) -> Float32>, data: Ref<Unit>, values_count: Int32, values_offset: Int32, overlay_text: CStringConvertable, scale_min: Float32, scale_max: Float32, size_arg: ImVec2): Int32 {
    return capi.igPlotEx(plot_type, label.asCString(), values_getter, data.getCPointer(), values_count, values_offset, overlay_text.asCString(), scale_min, scale_max, unsafe { size_arg.getCPointer().read() })
}

public func PlotHistogram(label: CStringConvertable, values: Ref<Float32>, values_count: Int32, values_offset: Int32, overlay_text: CStringConvertable, scale_min: Float32, scale_max: Float32, graph_size: ImVec2, stride: Int32): Unit {
    return capi.igPlotHistogram_FloatPtr(label.asCString(), values.getCPointer(), values_count, values_offset, overlay_text.asCString(), scale_min, scale_max, unsafe { graph_size.getCPointer().read() }, stride)
}

public func PlotHistogram(label: CStringConvertable, values_getter: CFunc<(data: CPointer<Unit>, idx: Int32) -> Float32>, data: Ref<Unit>, values_count: Int32, values_offset: Int32, overlay_text: CStringConvertable, scale_min: Float32, scale_max: Float32, graph_size: ImVec2): Unit {
    return capi.igPlotHistogram_FnFloatPtr(label.asCString(), values_getter, data.getCPointer(), values_count, values_offset, overlay_text.asCString(), scale_min, scale_max, unsafe { graph_size.getCPointer().read() })
}

public func PlotLines(label: CStringConvertable, values: Ref<Float32>, values_count: Int32, values_offset: Int32, overlay_text: CStringConvertable, scale_min: Float32, scale_max: Float32, graph_size: ImVec2, stride: Int32): Unit {
    return capi.igPlotLines_FloatPtr(label.asCString(), values.getCPointer(), values_count, values_offset, overlay_text.asCString(), scale_min, scale_max, unsafe { graph_size.getCPointer().read() }, stride)
}

public func PlotLines(label: CStringConvertable, values_getter: CFunc<(data: CPointer<Unit>, idx: Int32) -> Float32>, data: Ref<Unit>, values_count: Int32, values_offset: Int32, overlay_text: CStringConvertable, scale_min: Float32, scale_max: Float32, graph_size: ImVec2): Unit {
    return capi.igPlotLines_FnFloatPtr(label.asCString(), values_getter, data.getCPointer(), values_count, values_offset, overlay_text.asCString(), scale_min, scale_max, unsafe { graph_size.getCPointer().read() })
}

public func PopButtonRepeat(): Unit {
    return capi.igPopButtonRepeat()
}

public func PopClipRect(): Unit {
    return capi.igPopClipRect()
}

public func PopColumnsBackground(): Unit {
    return capi.igPopColumnsBackground()
}

public func PopFocusScope(): Unit {
    return capi.igPopFocusScope()
}

public func PopFont(): Unit {
    return capi.igPopFont()
}

public func PopID(): Unit {
    return capi.igPopID()
}

public func PopItemFlag(): Unit {
    return capi.igPopItemFlag()
}

public func PopItemWidth(): Unit {
    return capi.igPopItemWidth()
}

public func PopStyleColor(count: Int32): Unit {
    return capi.igPopStyleColor(count)
}

public func PopStyleVar(count: Int32): Unit {
    return capi.igPopStyleVar(count)
}

public func PopTabStop(): Unit {
    return capi.igPopTabStop()
}

public func PopTextWrapPos(): Unit {
    return capi.igPopTextWrapPos()
}

public func ProgressBar(fraction: Float32, size_arg: ImVec2, overlay: CStringConvertable): Unit {
    return capi.igProgressBar(fraction, unsafe { size_arg.getCPointer().read() }, overlay.asCString())
}

public func PushButtonRepeat(repeat: Bool): Unit {
    return capi.igPushButtonRepeat(repeat)
}

public func PushClipRect(clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: Bool): Unit {
    return capi.igPushClipRect(unsafe { clip_rect_min.getCPointer().read() }, unsafe { clip_rect_max.getCPointer().read() }, intersect_with_current_clip_rect)
}

public func PushColumnClipRect(column_index: Int32): Unit {
    return capi.igPushColumnClipRect(column_index)
}

public func PushColumnsBackground(): Unit {
    return capi.igPushColumnsBackground()
}

public func PushFocusScope(id: ImGuiID): Unit {
    return capi.igPushFocusScope(id)
}

public func PushFont(font: ImFont): Unit {
    return capi.igPushFont(font.getCPointer())
}

public func PushID(str_id: CStringConvertable): Unit {
    return capi.igPushID_Str(str_id.asCString())
}

public func PushID(str_id_begin: CStringConvertable, str_id_end: CStringConvertable): Unit {
    return capi.igPushID_StrStr(str_id_begin.asCString(), str_id_end.asCString())
}

public func PushID(ptr_id: Ref<Unit>): Unit {
    return capi.igPushID_Ptr(ptr_id.getCPointer())
}

public func PushID(int_id: Int32): Unit {
    return capi.igPushID_Int(int_id)
}

public func PushItemFlag(option: ImGuiItemFlags, enabled: Bool): Unit {
    return capi.igPushItemFlag(option, enabled)
}

public func PushItemWidth(item_width: Float32): Unit {
    return capi.igPushItemWidth(item_width)
}

public func PushMultiItemsWidths(components: Int32, width_full: Float32): Unit {
    return capi.igPushMultiItemsWidths(components, width_full)
}

public func PushOverrideID(id: ImGuiID): Unit {
    return capi.igPushOverrideID(id)
}

public func PushStyleColor(idx: ImGuiCol, col: ImU32): Unit {
    return capi.igPushStyleColor_U32(idx, col)
}

public func PushStyleColor(idx: ImGuiCol, col: ImVec4): Unit {
    return capi.igPushStyleColor_Vec4(idx, unsafe { col.getCPointer().read() })
}

public func PushStyleVar(idx: ImGuiStyleVar, val: Float32): Unit {
    return capi.igPushStyleVar_Float(idx, val)
}

public func PushStyleVar(idx: ImGuiStyleVar, val: ImVec2): Unit {
    return capi.igPushStyleVar_Vec2(idx, unsafe { val.getCPointer().read() })
}

public func PushTabStop(tab_stop: Bool): Unit {
    return capi.igPushTabStop(tab_stop)
}

public func PushTextWrapPos(wrap_local_pos_x: Float32): Unit {
    return capi.igPushTextWrapPos(wrap_local_pos_x)
}

public func RadioButton(label: CStringConvertable, active: Bool): Bool {
    return capi.igRadioButton_Bool(label.asCString(), active)
}

public func RadioButton(label: CStringConvertable, v: Ref<Int32>, v_button: Int32): Bool {
    return capi.igRadioButton_IntPtr(label.asCString(), v.getCPointer(), v_button)
}

public func RemoveContextHook(context: Ref<ImGuiContext>, hook_to_remove: ImGuiID): Unit {
    return capi.igRemoveContextHook(context.getCPointer(), hook_to_remove)
}

public func RemoveSettingsHandler(type_name: CStringConvertable): Unit {
    return capi.igRemoveSettingsHandler(type_name.asCString())
}

public func Render(): Unit {
    return capi.igRender()
}

public func RenderArrow(draw_list: ImDrawList, pos: ImVec2, col: ImU32, dir: ImGuiDir, scale: Float32): Unit {
    return capi.igRenderArrow(draw_list.getCPointer(), unsafe { pos.getCPointer().read() }, col, dir, scale)
}

public func RenderArrowDockMenu(draw_list: ImDrawList, p_min: ImVec2, sz: Float32, col: ImU32): Unit {
    return capi.igRenderArrowDockMenu(draw_list.getCPointer(), unsafe { p_min.getCPointer().read() }, sz, col)
}

public func RenderArrowPointingAt(draw_list: ImDrawList, pos: ImVec2, half_sz: ImVec2, direction: ImGuiDir, col: ImU32): Unit {
    return capi.igRenderArrowPointingAt(draw_list.getCPointer(), unsafe { pos.getCPointer().read() }, unsafe { half_sz.getCPointer().read() }, direction, col)
}

public func RenderBullet(draw_list: ImDrawList, pos: ImVec2, col: ImU32): Unit {
    return capi.igRenderBullet(draw_list.getCPointer(), unsafe { pos.getCPointer().read() }, col)
}

public func RenderCheckMark(draw_list: ImDrawList, pos: ImVec2, col: ImU32, sz: Float32): Unit {
    return capi.igRenderCheckMark(draw_list.getCPointer(), unsafe { pos.getCPointer().read() }, col, sz)
}

public func RenderColorRectWithAlphaCheckerboard(draw_list: ImDrawList, p_min: ImVec2, p_max: ImVec2, fill_col: ImU32, grid_step: Float32, grid_off: ImVec2, rounding: Float32, flags: ImDrawFlags): Unit {
    return capi.igRenderColorRectWithAlphaCheckerboard(draw_list.getCPointer(), unsafe { p_min.getCPointer().read() }, unsafe { p_max.getCPointer().read() }, fill_col, grid_step, unsafe { grid_off.getCPointer().read() }, rounding, flags)
}

public func RenderDragDropTargetRect(bb: ImRect, item_clip_rect: ImRect): Unit {
    return capi.igRenderDragDropTargetRect(unsafe { bb.getCPointer().read() }, unsafe { item_clip_rect.getCPointer().read() })
}

public func RenderFrame(p_min: ImVec2, p_max: ImVec2, fill_col: ImU32, border: Bool, rounding: Float32): Unit {
    return capi.igRenderFrame(unsafe { p_min.getCPointer().read() }, unsafe { p_max.getCPointer().read() }, fill_col, border, rounding)
}

public func RenderFrameBorder(p_min: ImVec2, p_max: ImVec2, rounding: Float32): Unit {
    return capi.igRenderFrameBorder(unsafe { p_min.getCPointer().read() }, unsafe { p_max.getCPointer().read() }, rounding)
}

public func RenderMouseCursor(pos: ImVec2, scale: Float32, mouse_cursor: ImGuiMouseCursor, col_fill: ImU32, col_border: ImU32, col_shadow: ImU32): Unit {
    return capi.igRenderMouseCursor(unsafe { pos.getCPointer().read() }, scale, mouse_cursor, col_fill, col_border, col_shadow)
}

public func RenderNavHighlight(bb: ImRect, id: ImGuiID, flags: ImGuiNavHighlightFlags): Unit {
    return capi.igRenderNavHighlight(unsafe { bb.getCPointer().read() }, id, flags)
}

public func RenderPlatformWindowsDefault(platform_render_arg: Ref<Unit>, renderer_render_arg: Ref<Unit>): Unit {
    return capi.igRenderPlatformWindowsDefault(platform_render_arg.getCPointer(), renderer_render_arg.getCPointer())
}

public func RenderRectFilledRangeH(draw_list: ImDrawList, rect: ImRect, col: ImU32, x_start_norm: Float32, x_end_norm: Float32, rounding: Float32): Unit {
    return capi.igRenderRectFilledRangeH(draw_list.getCPointer(), unsafe { rect.getCPointer().read() }, col, x_start_norm, x_end_norm, rounding)
}

public func RenderRectFilledWithHole(draw_list: ImDrawList, outer: ImRect, inner: ImRect, col: ImU32, rounding: Float32): Unit {
    return capi.igRenderRectFilledWithHole(draw_list.getCPointer(), unsafe { outer.getCPointer().read() }, unsafe { inner.getCPointer().read() }, col, rounding)
}

public func RenderText(pos: ImVec2, text: CStringConvertable, text_end: CStringConvertable, hide_text_after_hash: Bool): Unit {
    return capi.igRenderText(unsafe { pos.getCPointer().read() }, text.asCString(), text_end.asCString(), hide_text_after_hash)
}

public func RenderTextClipped(pos_min: ImVec2, pos_max: ImVec2, text: CStringConvertable, text_end: CStringConvertable, text_size_if_known: ImVec2, align: ImVec2, clip_rect: ImRect): Unit {
    return capi.igRenderTextClipped(unsafe { pos_min.getCPointer().read() }, unsafe { pos_max.getCPointer().read() }, text.asCString(), text_end.asCString(), text_size_if_known.getCPointer(), unsafe { align.getCPointer().read() }, clip_rect.getCPointer())
}

public func RenderTextClippedEx(draw_list: ImDrawList, pos_min: ImVec2, pos_max: ImVec2, text: CStringConvertable, text_end: CStringConvertable, text_size_if_known: ImVec2, align: ImVec2, clip_rect: ImRect): Unit {
    return capi.igRenderTextClippedEx(draw_list.getCPointer(), unsafe { pos_min.getCPointer().read() }, unsafe { pos_max.getCPointer().read() }, text.asCString(), text_end.asCString(), text_size_if_known.getCPointer(), unsafe { align.getCPointer().read() }, clip_rect.getCPointer())
}

public func RenderTextEllipsis(draw_list: ImDrawList, pos_min: ImVec2, pos_max: ImVec2, clip_max_x: Float32, ellipsis_max_x: Float32, text: CStringConvertable, text_end: CStringConvertable, text_size_if_known: ImVec2): Unit {
    return capi.igRenderTextEllipsis(draw_list.getCPointer(), unsafe { pos_min.getCPointer().read() }, unsafe { pos_max.getCPointer().read() }, clip_max_x, ellipsis_max_x, text.asCString(), text_end.asCString(), text_size_if_known.getCPointer())
}

public func RenderTextWrapped(pos: ImVec2, text: CStringConvertable, text_end: CStringConvertable, wrap_width: Float32): Unit {
    return capi.igRenderTextWrapped(unsafe { pos.getCPointer().read() }, text.asCString(), text_end.asCString(), wrap_width)
}

public func ResetMouseDragDelta(button: ImGuiMouseButton): Unit {
    return capi.igResetMouseDragDelta(button)
}

public func SameLine(offset_from_start_x: Float32, spacing: Float32): Unit {
    return capi.igSameLine(offset_from_start_x, spacing)
}

public func SaveIniSettingsToDisk(ini_filename: CStringConvertable): Unit {
    return capi.igSaveIniSettingsToDisk(ini_filename.asCString())
}

public func SaveIniSettingsToMemory(out_ini_size: Ref<UIntNative>): String {
    return CString(capi.igSaveIniSettingsToMemory(out_ini_size.getCPointer())).toString()
}

public func ScaleWindowsInViewport(viewport: ImGuiViewportP, scale: Float32): Unit {
    return capi.igScaleWindowsInViewport(viewport.getCPointer(), scale)
}

public func ScrollToBringRectIntoView(window: Ref<ImGuiWindow>, rect: ImRect): Unit {
    return capi.igScrollToBringRectIntoView(window.getCPointer(), unsafe { rect.getCPointer().read() })
}

public func ScrollToItem(flags: ImGuiScrollFlags): Unit {
    return capi.igScrollToItem(flags)
}

public func ScrollToRect(window: Ref<ImGuiWindow>, rect: ImRect, flags: ImGuiScrollFlags): Unit {
    return capi.igScrollToRect(window.getCPointer(), unsafe { rect.getCPointer().read() }, flags)
}

public func ScrollToRectEx(pOut: ImVec2, window: Ref<ImGuiWindow>, rect: ImRect, flags: ImGuiScrollFlags): Unit {
    return capi.igScrollToRectEx(pOut.getCPointer(), window.getCPointer(), unsafe { rect.getCPointer().read() }, flags)
}

public func Scrollbar(axis: ImGuiAxis): Unit {
    return capi.igScrollbar(axis)
}

public func ScrollbarEx(bb: ImRect, id: ImGuiID, axis: ImGuiAxis, p_scroll_v: Ref<ImS64>, avail_v: ImS64, contents_v: ImS64, flags: ImDrawFlags): Bool {
    return capi.igScrollbarEx(unsafe { bb.getCPointer().read() }, id, axis, p_scroll_v.getCPointer(), avail_v, contents_v, flags)
}

public func Selectable(label: CStringConvertable, selected: Bool, flags: ImGuiSelectableFlags, size: ImVec2): Bool {
    return capi.igSelectable_Bool(label.asCString(), selected, flags, unsafe { size.getCPointer().read() })
}

public func Selectable(label: CStringConvertable, p_selected: Ref<Bool>, flags: ImGuiSelectableFlags, size: ImVec2): Bool {
    return capi.igSelectable_BoolPtr(label.asCString(), p_selected.getCPointer(), flags, unsafe { size.getCPointer().read() })
}

public func Separator(): Unit {
    return capi.igSeparator()
}

public func SeparatorEx(flags: ImGuiSeparatorFlags, thickness: Float32): Unit {
    return capi.igSeparatorEx(flags, thickness)
}

public func SeparatorText(label: CStringConvertable): Unit {
    return capi.igSeparatorText(label.asCString())
}

public func SeparatorTextEx(id: ImGuiID, label: CStringConvertable, label_end: CStringConvertable, extra_width: Float32): Unit {
    return capi.igSeparatorTextEx(id, label.asCString(), label_end.asCString(), extra_width)
}

public func SetActiveID(id: ImGuiID, window: Ref<ImGuiWindow>): Unit {
    return capi.igSetActiveID(id, window.getCPointer())
}

public func SetActiveIdUsingAllKeyboardKeys(): Unit {
    return capi.igSetActiveIdUsingAllKeyboardKeys()
}

public func SetAllocatorFunctions(alloc_func: ImGuiMemAllocFunc, free_func: ImGuiMemFreeFunc, user_data: Ref<Unit>): Unit {
    return capi.igSetAllocatorFunctions(alloc_func, free_func, user_data.getCPointer())
}

public func SetClipboardText(text: CStringConvertable): Unit {
    return capi.igSetClipboardText(text.asCString())
}

public func SetColorEditOptions(flags: ImGuiColorEditFlags): Unit {
    return capi.igSetColorEditOptions(flags)
}

public func SetColumnOffset(column_index: Int32, offset_x: Float32): Unit {
    return capi.igSetColumnOffset(column_index, offset_x)
}

public func SetColumnWidth(column_index: Int32, width: Float32): Unit {
    return capi.igSetColumnWidth(column_index, width)
}

public func SetCurrentContext(ctx: Ref<ImGuiContext>): Unit {
    return capi.igSetCurrentContext(ctx.getCPointer())
}

public func SetCurrentFont(font: ImFont): Unit {
    return capi.igSetCurrentFont(font.getCPointer())
}

public func SetCurrentViewport(window: Ref<ImGuiWindow>, viewport: ImGuiViewportP): Unit {
    return capi.igSetCurrentViewport(window.getCPointer(), viewport.getCPointer())
}

public func SetCursorPos(local_pos: ImVec2): Unit {
    return capi.igSetCursorPos(unsafe { local_pos.getCPointer().read() })
}

public func SetCursorPosX(local_x: Float32): Unit {
    return capi.igSetCursorPosX(local_x)
}

public func SetCursorPosY(local_y: Float32): Unit {
    return capi.igSetCursorPosY(local_y)
}

public func SetCursorScreenPos(pos: ImVec2): Unit {
    return capi.igSetCursorScreenPos(unsafe { pos.getCPointer().read() })
}

public func SetDragDropPayload(`type`: CStringConvertable, data: Ref<Unit>, sz: UIntNative, cond: ImGuiCond): Bool {
    return capi.igSetDragDropPayload(`type`.asCString(), data.getCPointer(), sz, cond)
}

public func SetFocusID(id: ImGuiID, window: Ref<ImGuiWindow>): Unit {
    return capi.igSetFocusID(id, window.getCPointer())
}

public func SetHoveredID(id: ImGuiID): Unit {
    return capi.igSetHoveredID(id)
}

public func SetItemDefaultFocus(): Unit {
    return capi.igSetItemDefaultFocus()
}

public func SetItemKeyOwner(key: ImGuiKey, flags: ImGuiInputFlags): Unit {
    return capi.igSetItemKeyOwner(key, flags)
}

public func SetItemTooltip(fmt: CStringConvertable): Unit {
    return capi.igSetItemTooltip(fmt.asCString())
}

// Cangjie does not support `va_list`
// public func SetItemTooltipV(fmt: CStringConvertable, args: va_list) ...

public func SetKeyOwner(key: ImGuiKey, owner_id: ImGuiID, flags: ImGuiInputFlags): Unit {
    return capi.igSetKeyOwner(key, owner_id, flags)
}

public func SetKeyOwnersForKeyChord(key: ImGuiKeyChord, owner_id: ImGuiID, flags: ImGuiInputFlags): Unit {
    return capi.igSetKeyOwnersForKeyChord(key, owner_id, flags)
}

public func SetKeyboardFocusHere(offset: Int32): Unit {
    return capi.igSetKeyboardFocusHere(offset)
}

public func SetLastItemData(item_id: ImGuiID, in_flags: ImGuiItemFlags, status_flags: ImGuiItemStatusFlags, item_rect: ImRect): Unit {
    return capi.igSetLastItemData(item_id, in_flags, status_flags, unsafe { item_rect.getCPointer().read() })
}

public func SetMouseCursor(cursor_type: ImGuiMouseCursor): Unit {
    return capi.igSetMouseCursor(cursor_type)
}

public func SetNavFocusScope(focus_scope_id: ImGuiID): Unit {
    return capi.igSetNavFocusScope(focus_scope_id)
}

public func SetNavID(id: ImGuiID, nav_layer: ImGuiNavLayer, focus_scope_id: ImGuiID, rect_rel: ImRect): Unit {
    return capi.igSetNavID(id, nav_layer, focus_scope_id, unsafe { rect_rel.getCPointer().read() })
}

public func SetNavWindow(window: Ref<ImGuiWindow>): Unit {
    return capi.igSetNavWindow(window.getCPointer())
}

public func SetNextFrameWantCaptureKeyboard(want_capture_keyboard: Bool): Unit {
    return capi.igSetNextFrameWantCaptureKeyboard(want_capture_keyboard)
}

public func SetNextFrameWantCaptureMouse(want_capture_mouse: Bool): Unit {
    return capi.igSetNextFrameWantCaptureMouse(want_capture_mouse)
}

public func SetNextItemAllowOverlap(): Unit {
    return capi.igSetNextItemAllowOverlap()
}

public func SetNextItemOpen(is_open: Bool, cond: ImGuiCond): Unit {
    return capi.igSetNextItemOpen(is_open, cond)
}

public func SetNextItemRefVal(data_type: ImGuiDataType, p_data: Ref<Unit>): Unit {
    return capi.igSetNextItemRefVal(data_type, p_data.getCPointer())
}

public func SetNextItemSelectionUserData(selection_user_data: ImGuiSelectionUserData): Unit {
    return capi.igSetNextItemSelectionUserData(selection_user_data)
}

public func SetNextItemShortcut(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags): Unit {
    return capi.igSetNextItemShortcut(key_chord, flags)
}

public func SetNextItemWidth(item_width: Float32): Unit {
    return capi.igSetNextItemWidth(item_width)
}

public func SetNextWindowBgAlpha(alpha: Float32): Unit {
    return capi.igSetNextWindowBgAlpha(alpha)
}

public func SetNextWindowClass(window_class: ImGuiWindowClass): Unit {
    return capi.igSetNextWindowClass(window_class.getCPointer())
}

public func SetNextWindowCollapsed(collapsed: Bool, cond: ImGuiCond): Unit {
    return capi.igSetNextWindowCollapsed(collapsed, cond)
}

public func SetNextWindowContentSize(size: ImVec2): Unit {
    return capi.igSetNextWindowContentSize(unsafe { size.getCPointer().read() })
}

public func SetNextWindowDockID(dock_id: ImGuiID, cond: ImGuiCond): Unit {
    return capi.igSetNextWindowDockID(dock_id, cond)
}

public func SetNextWindowFocus(): Unit {
    return capi.igSetNextWindowFocus()
}

public func SetNextWindowPos(pos: ImVec2, cond: ImGuiCond, pivot: ImVec2): Unit {
    return capi.igSetNextWindowPos(unsafe { pos.getCPointer().read() }, cond, unsafe { pivot.getCPointer().read() })
}

public func SetNextWindowRefreshPolicy(flags: ImGuiWindowRefreshFlags): Unit {
    return capi.igSetNextWindowRefreshPolicy(flags)
}

public func SetNextWindowScroll(scroll: ImVec2): Unit {
    return capi.igSetNextWindowScroll(unsafe { scroll.getCPointer().read() })
}

public func SetNextWindowSize(size: ImVec2, cond: ImGuiCond): Unit {
    return capi.igSetNextWindowSize(unsafe { size.getCPointer().read() }, cond)
}

public func SetNextWindowSizeConstraints(size_min: ImVec2, size_max: ImVec2, custom_callback: ImGuiSizeCallback, custom_callback_data: Ref<Unit>): Unit {
    return capi.igSetNextWindowSizeConstraints(unsafe { size_min.getCPointer().read() }, unsafe { size_max.getCPointer().read() }, custom_callback, custom_callback_data.getCPointer())
}

public func SetNextWindowViewport(viewport_id: ImGuiID): Unit {
    return capi.igSetNextWindowViewport(viewport_id)
}

public func SetScrollFromPosX(local_x: Float32, center_x_ratio: Float32): Unit {
    return capi.igSetScrollFromPosX_Float(local_x, center_x_ratio)
}

public func SetScrollFromPosX(window: Ref<ImGuiWindow>, local_x: Float32, center_x_ratio: Float32): Unit {
    return capi.igSetScrollFromPosX_WindowPtr(window.getCPointer(), local_x, center_x_ratio)
}

public func SetScrollFromPosY(local_y: Float32, center_y_ratio: Float32): Unit {
    return capi.igSetScrollFromPosY_Float(local_y, center_y_ratio)
}

public func SetScrollFromPosY(window: Ref<ImGuiWindow>, local_y: Float32, center_y_ratio: Float32): Unit {
    return capi.igSetScrollFromPosY_WindowPtr(window.getCPointer(), local_y, center_y_ratio)
}

public func SetScrollHereX(center_x_ratio: Float32): Unit {
    return capi.igSetScrollHereX(center_x_ratio)
}

public func SetScrollHereY(center_y_ratio: Float32): Unit {
    return capi.igSetScrollHereY(center_y_ratio)
}

public func SetScrollX(scroll_x: Float32): Unit {
    return capi.igSetScrollX_Float(scroll_x)
}

public func SetScrollX(window: Ref<ImGuiWindow>, scroll_x: Float32): Unit {
    return capi.igSetScrollX_WindowPtr(window.getCPointer(), scroll_x)
}

public func SetScrollY(scroll_y: Float32): Unit {
    return capi.igSetScrollY_Float(scroll_y)
}

public func SetScrollY(window: Ref<ImGuiWindow>, scroll_y: Float32): Unit {
    return capi.igSetScrollY_WindowPtr(window.getCPointer(), scroll_y)
}

public func SetShortcutRouting(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags, owner_id: ImGuiID): Bool {
    return capi.igSetShortcutRouting(key_chord, flags, owner_id)
}

public func SetStateStorage(storage: ImGuiStorage): Unit {
    return capi.igSetStateStorage(storage.getCPointer())
}

public func SetTabItemClosed(tab_or_docked_window_label: CStringConvertable): Unit {
    return capi.igSetTabItemClosed(tab_or_docked_window_label.asCString())
}

public func SetTooltip(fmt: CStringConvertable): Unit {
    return capi.igSetTooltip(fmt.asCString())
}

// Cangjie does not support `va_list`
// public func SetTooltipV(fmt: CStringConvertable, args: va_list) ...

public func SetWindowClipRectBeforeSetChannel(window: Ref<ImGuiWindow>, clip_rect: ImRect): Unit {
    return capi.igSetWindowClipRectBeforeSetChannel(window.getCPointer(), unsafe { clip_rect.getCPointer().read() })
}

public func SetWindowCollapsed(collapsed: Bool, cond: ImGuiCond): Unit {
    return capi.igSetWindowCollapsed_Bool(collapsed, cond)
}

public func SetWindowCollapsed(name: CStringConvertable, collapsed: Bool, cond: ImGuiCond): Unit {
    return capi.igSetWindowCollapsed_Str(name.asCString(), collapsed, cond)
}

public func SetWindowCollapsed(window: Ref<ImGuiWindow>, collapsed: Bool, cond: ImGuiCond): Unit {
    return capi.igSetWindowCollapsed_WindowPtr(window.getCPointer(), collapsed, cond)
}

public func SetWindowDock(window: Ref<ImGuiWindow>, dock_id: ImGuiID, cond: ImGuiCond): Unit {
    return capi.igSetWindowDock(window.getCPointer(), dock_id, cond)
}

public func SetWindowFocus(): Unit {
    return capi.igSetWindowFocus_Nil()
}

public func SetWindowFocus(name: CStringConvertable): Unit {
    return capi.igSetWindowFocus_Str(name.asCString())
}

public func SetWindowFontScale(scale: Float32): Unit {
    return capi.igSetWindowFontScale(scale)
}

public func SetWindowHiddenAndSkipItemsForCurrentFrame(window: Ref<ImGuiWindow>): Unit {
    return capi.igSetWindowHiddenAndSkipItemsForCurrentFrame(window.getCPointer())
}

public func SetWindowHitTestHole(window: Ref<ImGuiWindow>, pos: ImVec2, size: ImVec2): Unit {
    return capi.igSetWindowHitTestHole(window.getCPointer(), unsafe { pos.getCPointer().read() }, unsafe { size.getCPointer().read() })
}

public func SetWindowParentWindowForFocusRoute(window: Ref<ImGuiWindow>, parent_window: Ref<ImGuiWindow>): Unit {
    return capi.igSetWindowParentWindowForFocusRoute(window.getCPointer(), parent_window.getCPointer())
}

public func SetWindowPos(pos: ImVec2, cond: ImGuiCond): Unit {
    return capi.igSetWindowPos_Vec2(unsafe { pos.getCPointer().read() }, cond)
}

public func SetWindowPos(name: CStringConvertable, pos: ImVec2, cond: ImGuiCond): Unit {
    return capi.igSetWindowPos_Str(name.asCString(), unsafe { pos.getCPointer().read() }, cond)
}

public func SetWindowPos(window: Ref<ImGuiWindow>, pos: ImVec2, cond: ImGuiCond): Unit {
    return capi.igSetWindowPos_WindowPtr(window.getCPointer(), unsafe { pos.getCPointer().read() }, cond)
}

public func SetWindowSize(size: ImVec2, cond: ImGuiCond): Unit {
    return capi.igSetWindowSize_Vec2(unsafe { size.getCPointer().read() }, cond)
}

public func SetWindowSize(name: CStringConvertable, size: ImVec2, cond: ImGuiCond): Unit {
    return capi.igSetWindowSize_Str(name.asCString(), unsafe { size.getCPointer().read() }, cond)
}

public func SetWindowSize(window: Ref<ImGuiWindow>, size: ImVec2, cond: ImGuiCond): Unit {
    return capi.igSetWindowSize_WindowPtr(window.getCPointer(), unsafe { size.getCPointer().read() }, cond)
}

public func SetWindowViewport(window: Ref<ImGuiWindow>, viewport: ImGuiViewportP): Unit {
    return capi.igSetWindowViewport(window.getCPointer(), viewport.getCPointer())
}

public func ShadeVertsLinearColorGradientKeepAlpha(draw_list: ImDrawList, vert_start_idx: Int32, vert_end_idx: Int32, gradient_p0: ImVec2, gradient_p1: ImVec2, col0: ImU32, col1: ImU32): Unit {
    return capi.igShadeVertsLinearColorGradientKeepAlpha(draw_list.getCPointer(), vert_start_idx, vert_end_idx, unsafe { gradient_p0.getCPointer().read() }, unsafe { gradient_p1.getCPointer().read() }, col0, col1)
}

public func ShadeVertsLinearUV(draw_list: ImDrawList, vert_start_idx: Int32, vert_end_idx: Int32, a: ImVec2, b: ImVec2, uv_a: ImVec2, uv_b: ImVec2, clamp: Bool): Unit {
    return capi.igShadeVertsLinearUV(draw_list.getCPointer(), vert_start_idx, vert_end_idx, unsafe { a.getCPointer().read() }, unsafe { b.getCPointer().read() }, unsafe { uv_a.getCPointer().read() }, unsafe { uv_b.getCPointer().read() }, clamp)
}

public func ShadeVertsTransformPos(draw_list: ImDrawList, vert_start_idx: Int32, vert_end_idx: Int32, pivot_in: ImVec2, cos_a: Float32, sin_a: Float32, pivot_out: ImVec2): Unit {
    return capi.igShadeVertsTransformPos(draw_list.getCPointer(), vert_start_idx, vert_end_idx, unsafe { pivot_in.getCPointer().read() }, cos_a, sin_a, unsafe { pivot_out.getCPointer().read() })
}

public func Shortcut(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags): Bool {
    return capi.igShortcut_Nil(key_chord, flags)
}

public func Shortcut(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags, owner_id: ImGuiID): Bool {
    return capi.igShortcut_ID(key_chord, flags, owner_id)
}

public func ShowAboutWindow(p_open: Ref<Bool>): Unit {
    return capi.igShowAboutWindow(p_open.getCPointer())
}

public func ShowDebugLogWindow(p_open: Ref<Bool>): Unit {
    return capi.igShowDebugLogWindow(p_open.getCPointer())
}

public func ShowDemoWindow(p_open: Ref<Bool>): Unit {
    return capi.igShowDemoWindow(p_open.getCPointer())
}

public func ShowFontAtlas(atlas: ImFontAtlas): Unit {
    return capi.igShowFontAtlas(atlas.getCPointer())
}

public func ShowFontSelector(label: CStringConvertable): Unit {
    return capi.igShowFontSelector(label.asCString())
}

public func ShowIDStackToolWindow(p_open: Ref<Bool>): Unit {
    return capi.igShowIDStackToolWindow(p_open.getCPointer())
}

public func ShowMetricsWindow(p_open: Ref<Bool>): Unit {
    return capi.igShowMetricsWindow(p_open.getCPointer())
}

public func ShowStyleEditor(ref: ImGuiStyle): Unit {
    return capi.igShowStyleEditor(ref.getCPointer())
}

public func ShowStyleSelector(label: CStringConvertable): Bool {
    return capi.igShowStyleSelector(label.asCString())
}

public func ShowUserGuide(): Unit {
    return capi.igShowUserGuide()
}

public func ShrinkWidths(items: ImGuiShrinkWidthItem, count: Int32, width_excess: Float32): Unit {
    return capi.igShrinkWidths(items.getCPointer(), count, width_excess)
}

public func Shutdown(): Unit {
    return capi.igShutdown()
}

public func SliderAngle(label: CStringConvertable, v_rad: Ref<Float32>, v_degrees_min: Float32, v_degrees_max: Float32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igSliderAngle(label.asCString(), v_rad.getCPointer(), v_degrees_min, v_degrees_max, format.asCString(), flags)
}

public func SliderBehavior(bb: ImRect, id: ImGuiID, data_type: ImGuiDataType, p_v: Ref<Unit>, p_min: Ref<Unit>, p_max: Ref<Unit>, format: CStringConvertable, flags: ImGuiSliderFlags, out_grab_bb: ImRect): Bool {
    return capi.igSliderBehavior(unsafe { bb.getCPointer().read() }, id, data_type, p_v.getCPointer(), p_min.getCPointer(), p_max.getCPointer(), format.asCString(), flags, out_grab_bb.getCPointer())
}

public func SliderFloat(label: CStringConvertable, v: Ref<Float32>, v_min: Float32, v_max: Float32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igSliderFloat(label.asCString(), v.getCPointer(), v_min, v_max, format.asCString(), flags)
}

public func SliderFloat2(label: CStringConvertable, v: Ref<Float32>, v_min: Float32, v_max: Float32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igSliderFloat2(label.asCString(), v.getCPointer(), v_min, v_max, format.asCString(), flags)
}

public func SliderFloat3(label: CStringConvertable, v: Ref<Float32>, v_min: Float32, v_max: Float32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igSliderFloat3(label.asCString(), v.getCPointer(), v_min, v_max, format.asCString(), flags)
}

public func SliderFloat4(label: CStringConvertable, v: Ref<Float32>, v_min: Float32, v_max: Float32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igSliderFloat4(label.asCString(), v.getCPointer(), v_min, v_max, format.asCString(), flags)
}

public func SliderInt(label: CStringConvertable, v: Ref<Int32>, v_min: Int32, v_max: Int32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igSliderInt(label.asCString(), v.getCPointer(), v_min, v_max, format.asCString(), flags)
}

public func SliderInt2(label: CStringConvertable, v: Ref<Int32>, v_min: Int32, v_max: Int32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igSliderInt2(label.asCString(), v.getCPointer(), v_min, v_max, format.asCString(), flags)
}

public func SliderInt3(label: CStringConvertable, v: Ref<Int32>, v_min: Int32, v_max: Int32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igSliderInt3(label.asCString(), v.getCPointer(), v_min, v_max, format.asCString(), flags)
}

public func SliderInt4(label: CStringConvertable, v: Ref<Int32>, v_min: Int32, v_max: Int32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igSliderInt4(label.asCString(), v.getCPointer(), v_min, v_max, format.asCString(), flags)
}

public func SliderScalar(label: CStringConvertable, data_type: ImGuiDataType, p_data: Ref<Unit>, p_min: Ref<Unit>, p_max: Ref<Unit>, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igSliderScalar(label.asCString(), data_type, p_data.getCPointer(), p_min.getCPointer(), p_max.getCPointer(), format.asCString(), flags)
}

public func SliderScalarN(label: CStringConvertable, data_type: ImGuiDataType, p_data: Ref<Unit>, components: Int32, p_min: Ref<Unit>, p_max: Ref<Unit>, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igSliderScalarN(label.asCString(), data_type, p_data.getCPointer(), components, p_min.getCPointer(), p_max.getCPointer(), format.asCString(), flags)
}

public func SmallButton(label: CStringConvertable): Bool {
    return capi.igSmallButton(label.asCString())
}

public func Spacing(): Unit {
    return capi.igSpacing()
}

public func SplitterBehavior(bb: ImRect, id: ImGuiID, axis: ImGuiAxis, size1: Ref<Float32>, size2: Ref<Float32>, min_size1: Float32, min_size2: Float32, hover_extend: Float32, hover_visibility_delay: Float32, bg_col: ImU32): Bool {
    return capi.igSplitterBehavior(unsafe { bb.getCPointer().read() }, id, axis, size1.getCPointer(), size2.getCPointer(), min_size1, min_size2, hover_extend, hover_visibility_delay, bg_col)
}

public func StartMouseMovingWindow(window: Ref<ImGuiWindow>): Unit {
    return capi.igStartMouseMovingWindow(window.getCPointer())
}

public func StartMouseMovingWindowOrNode(window: Ref<ImGuiWindow>, node: Ref<ImGuiDockNode>, undock: Bool): Unit {
    return capi.igStartMouseMovingWindowOrNode(window.getCPointer(), node.getCPointer(), undock)
}

public func StyleColorsClassic(dst: ImGuiStyle): Unit {
    return capi.igStyleColorsClassic(dst.getCPointer())
}

public func StyleColorsDark(dst: ImGuiStyle): Unit {
    return capi.igStyleColorsDark(dst.getCPointer())
}

public func StyleColorsLight(dst: ImGuiStyle): Unit {
    return capi.igStyleColorsLight(dst.getCPointer())
}

public func TabBarAddTab(tab_bar: ImGuiTabBar, tab_flags: ImGuiTabItemFlags, window: Ref<ImGuiWindow>): Unit {
    return capi.igTabBarAddTab(tab_bar.getCPointer(), tab_flags, window.getCPointer())
}

public func TabBarCloseTab(tab_bar: ImGuiTabBar, tab: ImGuiTabItem): Unit {
    return capi.igTabBarCloseTab(tab_bar.getCPointer(), tab.getCPointer())
}

public func TabBarFindMostRecentlySelectedTabForActiveWindow(tab_bar: ImGuiTabBar): ImGuiTabItem {
    return ImGuiTabItem(capi.igTabBarFindMostRecentlySelectedTabForActiveWindow(tab_bar.getCPointer()), owned: false)
}

public func TabBarFindTabByID(tab_bar: ImGuiTabBar, tab_id: ImGuiID): ImGuiTabItem {
    return ImGuiTabItem(capi.igTabBarFindTabByID(tab_bar.getCPointer(), tab_id), owned: false)
}

public func TabBarFindTabByOrder(tab_bar: ImGuiTabBar, order: Int32): ImGuiTabItem {
    return ImGuiTabItem(capi.igTabBarFindTabByOrder(tab_bar.getCPointer(), order), owned: false)
}

public func TabBarGetCurrentTab(tab_bar: ImGuiTabBar): ImGuiTabItem {
    return ImGuiTabItem(capi.igTabBarGetCurrentTab(tab_bar.getCPointer()), owned: false)
}

public func TabBarGetTabName(tab_bar: ImGuiTabBar, tab: ImGuiTabItem): String {
    return CString(capi.igTabBarGetTabName(tab_bar.getCPointer(), tab.getCPointer())).toString()
}

public func TabBarGetTabOrder(tab_bar: ImGuiTabBar, tab: ImGuiTabItem): Int32 {
    return capi.igTabBarGetTabOrder(tab_bar.getCPointer(), tab.getCPointer())
}

public func TabBarProcessReorder(tab_bar: ImGuiTabBar): Bool {
    return capi.igTabBarProcessReorder(tab_bar.getCPointer())
}

public func TabBarQueueFocus(tab_bar: ImGuiTabBar, tab: ImGuiTabItem): Unit {
    return capi.igTabBarQueueFocus(tab_bar.getCPointer(), tab.getCPointer())
}

public func TabBarQueueReorder(tab_bar: ImGuiTabBar, tab: ImGuiTabItem, offset: Int32): Unit {
    return capi.igTabBarQueueReorder(tab_bar.getCPointer(), tab.getCPointer(), offset)
}

public func TabBarQueueReorderFromMousePos(tab_bar: ImGuiTabBar, tab: ImGuiTabItem, mouse_pos: ImVec2): Unit {
    return capi.igTabBarQueueReorderFromMousePos(tab_bar.getCPointer(), tab.getCPointer(), unsafe { mouse_pos.getCPointer().read() })
}

public func TabBarRemoveTab(tab_bar: ImGuiTabBar, tab_id: ImGuiID): Unit {
    return capi.igTabBarRemoveTab(tab_bar.getCPointer(), tab_id)
}

public func TabItemBackground(draw_list: ImDrawList, bb: ImRect, flags: ImGuiTabItemFlags, col: ImU32): Unit {
    return capi.igTabItemBackground(draw_list.getCPointer(), unsafe { bb.getCPointer().read() }, flags, col)
}

public func TabItemButton(label: CStringConvertable, flags: ImGuiTabItemFlags): Bool {
    return capi.igTabItemButton(label.asCString(), flags)
}

public func TabItemCalcSize(pOut: ImVec2, label: CStringConvertable, has_close_button_or_unsaved_marker: Bool): Unit {
    return capi.igTabItemCalcSize_Str(pOut.getCPointer(), label.asCString(), has_close_button_or_unsaved_marker)
}

public func TabItemCalcSize(pOut: ImVec2, window: Ref<ImGuiWindow>): Unit {
    return capi.igTabItemCalcSize_WindowPtr(pOut.getCPointer(), window.getCPointer())
}

public func TabItemEx(tab_bar: ImGuiTabBar, label: CStringConvertable, p_open: Ref<Bool>, flags: ImGuiTabItemFlags, docked_window: Ref<ImGuiWindow>): Bool {
    return capi.igTabItemEx(tab_bar.getCPointer(), label.asCString(), p_open.getCPointer(), flags, docked_window.getCPointer())
}

public func TabItemLabelAndCloseButton(draw_list: ImDrawList, bb: ImRect, flags: ImGuiTabItemFlags, frame_padding: ImVec2, label: CStringConvertable, tab_id: ImGuiID, close_button_id: ImGuiID, is_contents_visible: Bool, out_just_closed: Ref<Bool>, out_text_clipped: Ref<Bool>): Unit {
    return capi.igTabItemLabelAndCloseButton(draw_list.getCPointer(), unsafe { bb.getCPointer().read() }, flags, unsafe { frame_padding.getCPointer().read() }, label.asCString(), tab_id, close_button_id, is_contents_visible, out_just_closed.getCPointer(), out_text_clipped.getCPointer())
}

public func TableAngledHeadersRow(): Unit {
    return capi.igTableAngledHeadersRow()
}

public func TableAngledHeadersRowEx(row_id: ImGuiID, angle: Float32, max_label_width: Float32, data: ImGuiTableHeaderData, data_count: Int32): Unit {
    return capi.igTableAngledHeadersRowEx(row_id, angle, max_label_width, data.getCPointer(), data_count)
}

public func TableBeginApplyRequests(table: Ref<ImGuiTable>): Unit {
    return capi.igTableBeginApplyRequests(table.getCPointer())
}

public func TableBeginCell(table: Ref<ImGuiTable>, column_n: Int32): Unit {
    return capi.igTableBeginCell(table.getCPointer(), column_n)
}

public func TableBeginContextMenuPopup(table: Ref<ImGuiTable>): Bool {
    return capi.igTableBeginContextMenuPopup(table.getCPointer())
}

public func TableBeginInitMemory(table: Ref<ImGuiTable>, columns_count: Int32): Unit {
    return capi.igTableBeginInitMemory(table.getCPointer(), columns_count)
}

public func TableBeginRow(table: Ref<ImGuiTable>): Unit {
    return capi.igTableBeginRow(table.getCPointer())
}

public func TableDrawBorders(table: Ref<ImGuiTable>): Unit {
    return capi.igTableDrawBorders(table.getCPointer())
}

public func TableDrawDefaultContextMenu(table: Ref<ImGuiTable>, flags_for_section_to_display: ImGuiTableFlags): Unit {
    return capi.igTableDrawDefaultContextMenu(table.getCPointer(), flags_for_section_to_display)
}

public func TableEndCell(table: Ref<ImGuiTable>): Unit {
    return capi.igTableEndCell(table.getCPointer())
}

public func TableEndRow(table: Ref<ImGuiTable>): Unit {
    return capi.igTableEndRow(table.getCPointer())
}

public func TableFindByID(id: ImGuiID): Ref<ImGuiTable> {
    return Ref<Unit>.unsafeMake(capi.igTableFindByID(id), count: -1, owned: false)
}

public func TableFixColumnSortDirection(table: Ref<ImGuiTable>, column: Ref<ImGuiTableColumn>): Unit {
    return capi.igTableFixColumnSortDirection(table.getCPointer(), column.getCPointer())
}

public func TableGcCompactSettings(): Unit {
    return capi.igTableGcCompactSettings()
}

public func TableGcCompactTransientBuffers(table: Ref<ImGuiTable>): Unit {
    return capi.igTableGcCompactTransientBuffers_TablePtr(table.getCPointer())
}

public func TableGcCompactTransientBuffers(table: ImGuiTableTempData): Unit {
    return capi.igTableGcCompactTransientBuffers_TableTempDataPtr(table.getCPointer())
}

public func TableGetBoundSettings(table: Ref<ImGuiTable>): ImGuiTableSettings {
    return ImGuiTableSettings(capi.igTableGetBoundSettings(table.getCPointer()), owned: false)
}

public func TableGetCellBgRect(pOut: ImRect, table: Ref<ImGuiTable>, column_n: Int32): Unit {
    return capi.igTableGetCellBgRect(pOut.getCPointer(), table.getCPointer(), column_n)
}

public func TableGetColumnCount(): Int32 {
    return capi.igTableGetColumnCount()
}

public func TableGetColumnFlags(column_n: Int32): ImGuiTableColumnFlags {
    return capi.igTableGetColumnFlags(column_n)
}

public func TableGetColumnIndex(): Int32 {
    return capi.igTableGetColumnIndex()
}

public func TableGetColumnName(column_n: Int32): String {
    return CString(capi.igTableGetColumnName_Int(column_n)).toString()
}

public func TableGetColumnName(table: Ref<ImGuiTable>, column_n: Int32): String {
    return CString(capi.igTableGetColumnName_TablePtr(table.getCPointer(), column_n)).toString()
}

public func TableGetColumnNextSortDirection(column: Ref<ImGuiTableColumn>): ImGuiSortDirection {
    return capi.igTableGetColumnNextSortDirection(column.getCPointer())
}

public func TableGetColumnResizeID(table: Ref<ImGuiTable>, column_n: Int32, instance_no: Int32): ImGuiID {
    return capi.igTableGetColumnResizeID(table.getCPointer(), column_n, instance_no)
}

public func TableGetColumnWidthAuto(table: Ref<ImGuiTable>, column: Ref<ImGuiTableColumn>): Float32 {
    return capi.igTableGetColumnWidthAuto(table.getCPointer(), column.getCPointer())
}

public func TableGetHeaderAngledMaxLabelWidth(): Float32 {
    return capi.igTableGetHeaderAngledMaxLabelWidth()
}

public func TableGetHeaderRowHeight(): Float32 {
    return capi.igTableGetHeaderRowHeight()
}

public func TableGetHoveredColumn(): Int32 {
    return capi.igTableGetHoveredColumn()
}

public func TableGetHoveredRow(): Int32 {
    return capi.igTableGetHoveredRow()
}

public func TableGetInstanceData(table: Ref<ImGuiTable>, instance_no: Int32): ImGuiTableInstanceData {
    return ImGuiTableInstanceData(capi.igTableGetInstanceData(table.getCPointer(), instance_no), owned: false)
}

public func TableGetInstanceID(table: Ref<ImGuiTable>, instance_no: Int32): ImGuiID {
    return capi.igTableGetInstanceID(table.getCPointer(), instance_no)
}

public func TableGetMaxColumnWidth(table: Ref<ImGuiTable>, column_n: Int32): Float32 {
    return capi.igTableGetMaxColumnWidth(table.getCPointer(), column_n)
}

public func TableGetRowIndex(): Int32 {
    return capi.igTableGetRowIndex()
}

public func TableGetSortSpecs(): ImGuiTableSortSpecs {
    return ImGuiTableSortSpecs(capi.igTableGetSortSpecs(), owned: false)
}

public func TableHeader(label: CStringConvertable): Unit {
    return capi.igTableHeader(label.asCString())
}

public func TableHeadersRow(): Unit {
    return capi.igTableHeadersRow()
}

public func TableLoadSettings(table: Ref<ImGuiTable>): Unit {
    return capi.igTableLoadSettings(table.getCPointer())
}

public func TableMergeDrawChannels(table: Ref<ImGuiTable>): Unit {
    return capi.igTableMergeDrawChannels(table.getCPointer())
}

public func TableNextColumn(): Bool {
    return capi.igTableNextColumn()
}

public func TableNextRow(row_flags: ImGuiTableRowFlags, min_row_height: Float32): Unit {
    return capi.igTableNextRow(row_flags, min_row_height)
}

public func TableOpenContextMenu(column_n: Int32): Unit {
    return capi.igTableOpenContextMenu(column_n)
}

public func TablePopBackgroundChannel(): Unit {
    return capi.igTablePopBackgroundChannel()
}

public func TablePushBackgroundChannel(): Unit {
    return capi.igTablePushBackgroundChannel()
}

public func TableRemove(table: Ref<ImGuiTable>): Unit {
    return capi.igTableRemove(table.getCPointer())
}

public func TableResetSettings(table: Ref<ImGuiTable>): Unit {
    return capi.igTableResetSettings(table.getCPointer())
}

public func TableSaveSettings(table: Ref<ImGuiTable>): Unit {
    return capi.igTableSaveSettings(table.getCPointer())
}

public func TableSetBgColor(target: ImGuiTableBgTarget, color: ImU32, column_n: Int32): Unit {
    return capi.igTableSetBgColor(target, color, column_n)
}

public func TableSetColumnEnabled(column_n: Int32, v: Bool): Unit {
    return capi.igTableSetColumnEnabled(column_n, v)
}

public func TableSetColumnIndex(column_n: Int32): Bool {
    return capi.igTableSetColumnIndex(column_n)
}

public func TableSetColumnSortDirection(column_n: Int32, sort_direction: ImGuiSortDirection, append_to_sort_specs: Bool): Unit {
    return capi.igTableSetColumnSortDirection(column_n, sort_direction, append_to_sort_specs)
}

public func TableSetColumnWidth(column_n: Int32, width: Float32): Unit {
    return capi.igTableSetColumnWidth(column_n, width)
}

public func TableSetColumnWidthAutoAll(table: Ref<ImGuiTable>): Unit {
    return capi.igTableSetColumnWidthAutoAll(table.getCPointer())
}

public func TableSetColumnWidthAutoSingle(table: Ref<ImGuiTable>, column_n: Int32): Unit {
    return capi.igTableSetColumnWidthAutoSingle(table.getCPointer(), column_n)
}

public func TableSettingsAddSettingsHandler(): Unit {
    return capi.igTableSettingsAddSettingsHandler()
}

public func TableSettingsCreate(id: ImGuiID, columns_count: Int32): ImGuiTableSettings {
    return ImGuiTableSettings(capi.igTableSettingsCreate(id, columns_count), owned: false)
}

public func TableSettingsFindByID(id: ImGuiID): ImGuiTableSettings {
    return ImGuiTableSettings(capi.igTableSettingsFindByID(id), owned: false)
}

public func TableSetupColumn(label: CStringConvertable, flags: ImGuiTableColumnFlags, init_width_or_weight: Float32, user_id: ImGuiID): Unit {
    return capi.igTableSetupColumn(label.asCString(), flags, init_width_or_weight, user_id)
}

public func TableSetupDrawChannels(table: Ref<ImGuiTable>): Unit {
    return capi.igTableSetupDrawChannels(table.getCPointer())
}

public func TableSetupScrollFreeze(cols: Int32, rows: Int32): Unit {
    return capi.igTableSetupScrollFreeze(cols, rows)
}

public func TableSortSpecsBuild(table: Ref<ImGuiTable>): Unit {
    return capi.igTableSortSpecsBuild(table.getCPointer())
}

public func TableSortSpecsSanitize(table: Ref<ImGuiTable>): Unit {
    return capi.igTableSortSpecsSanitize(table.getCPointer())
}

public func TableUpdateBorders(table: Ref<ImGuiTable>): Unit {
    return capi.igTableUpdateBorders(table.getCPointer())
}

public func TableUpdateColumnsWeightFromWidth(table: Ref<ImGuiTable>): Unit {
    return capi.igTableUpdateColumnsWeightFromWidth(table.getCPointer())
}

public func TableUpdateLayout(table: Ref<ImGuiTable>): Unit {
    return capi.igTableUpdateLayout(table.getCPointer())
}

public func TeleportMousePos(pos: ImVec2): Unit {
    return capi.igTeleportMousePos(unsafe { pos.getCPointer().read() })
}

public func TempInputIsActive(id: ImGuiID): Bool {
    return capi.igTempInputIsActive(id)
}

public func TempInputScalar(bb: ImRect, id: ImGuiID, label: CStringConvertable, data_type: ImGuiDataType, p_data: Ref<Unit>, format: CStringConvertable, p_clamp_min: Ref<Unit>, p_clamp_max: Ref<Unit>): Bool {
    return capi.igTempInputScalar(unsafe { bb.getCPointer().read() }, id, label.asCString(), data_type, p_data.getCPointer(), format.asCString(), p_clamp_min.getCPointer(), p_clamp_max.getCPointer())
}

public func TempInputText(bb: ImRect, id: ImGuiID, label: CStringConvertable, buf: CStringConvertable, buf_size: Int32, flags: ImGuiInputTextFlags): Bool {
    return capi.igTempInputText(unsafe { bb.getCPointer().read() }, id, label.asCString(), buf.asCString(), buf_size, flags)
}

public func TestKeyOwner(key: ImGuiKey, owner_id: ImGuiID): Bool {
    return capi.igTestKeyOwner(key, owner_id)
}

public func TestShortcutRouting(key_chord: ImGuiKeyChord, owner_id: ImGuiID): Bool {
    return capi.igTestShortcutRouting(key_chord, owner_id)
}

public func Text(fmt: CStringConvertable): Unit {
    return capi.igText(fmt.asCString())
}

public func TextColored(col: ImVec4, fmt: CStringConvertable): Unit {
    return capi.igTextColored(unsafe { col.getCPointer().read() }, fmt.asCString())
}

// Cangjie does not support `va_list`
// public func TextColoredV(col: ImVec4, fmt: CStringConvertable, args: va_list) ...

public func TextDisabled(fmt: CStringConvertable): Unit {
    return capi.igTextDisabled(fmt.asCString())
}

// Cangjie does not support `va_list`
// public func TextDisabledV(fmt: CStringConvertable, args: va_list) ...

public func TextEx(text: CStringConvertable, text_end: CStringConvertable, flags: ImGuiTextFlags): Unit {
    return capi.igTextEx(text.asCString(), text_end.asCString(), flags)
}

public func TextUnformatted(text: CStringConvertable, text_end: CStringConvertable): Unit {
    return capi.igTextUnformatted(text.asCString(), text_end.asCString())
}

// Cangjie does not support `va_list`
// public func TextV(fmt: CStringConvertable, args: va_list) ...

public func TextWrapped(fmt: CStringConvertable): Unit {
    return capi.igTextWrapped(fmt.asCString())
}

// Cangjie does not support `va_list`
// public func TextWrappedV(fmt: CStringConvertable, args: va_list) ...

public func TranslateWindowsInViewport(viewport: ImGuiViewportP, old_pos: ImVec2, new_pos: ImVec2): Unit {
    return capi.igTranslateWindowsInViewport(viewport.getCPointer(), unsafe { old_pos.getCPointer().read() }, unsafe { new_pos.getCPointer().read() })
}

public func TreeNode(label: CStringConvertable): Bool {
    return capi.igTreeNode_Str(label.asCString())
}

public func TreeNode(str_id: CStringConvertable, fmt: CStringConvertable): Bool {
    return capi.igTreeNode_StrStr(str_id.asCString(), fmt.asCString())
}

public func TreeNode(ptr_id: Ref<Unit>, fmt: CStringConvertable): Bool {
    return capi.igTreeNode_Ptr(ptr_id.getCPointer(), fmt.asCString())
}

public func TreeNodeBehavior(id: ImGuiID, flags: ImGuiTreeNodeFlags, label: CStringConvertable, label_end: CStringConvertable): Bool {
    return capi.igTreeNodeBehavior(id, flags, label.asCString(), label_end.asCString())
}

public func TreeNodeEx(label: CStringConvertable, flags: ImGuiTreeNodeFlags): Bool {
    return capi.igTreeNodeEx_Str(label.asCString(), flags)
}

public func TreeNodeEx(str_id: CStringConvertable, flags: ImGuiTreeNodeFlags, fmt: CStringConvertable): Bool {
    return capi.igTreeNodeEx_StrStr(str_id.asCString(), flags, fmt.asCString())
}

public func TreeNodeEx(ptr_id: Ref<Unit>, flags: ImGuiTreeNodeFlags, fmt: CStringConvertable): Bool {
    return capi.igTreeNodeEx_Ptr(ptr_id.getCPointer(), flags, fmt.asCString())
}

// Cangjie does not support `va_list`
// public func TreeNodeExV(str_id: CStringConvertable, flags: ImGuiTreeNodeFlags, fmt: CStringConvertable, args: va_list) ...

// Cangjie does not support `va_list`
// public func TreeNodeExV(ptr_id: Ref<Unit>, flags: ImGuiTreeNodeFlags, fmt: CStringConvertable, args: va_list) ...

public func TreeNodeSetOpen(id: ImGuiID, `open`: Bool): Unit {
    return capi.igTreeNodeSetOpen(id, `open`)
}

public func TreeNodeUpdateNextOpen(id: ImGuiID, flags: ImGuiTreeNodeFlags): Bool {
    return capi.igTreeNodeUpdateNextOpen(id, flags)
}

// Cangjie does not support `va_list`
// public func TreeNodeV(str_id: CStringConvertable, fmt: CStringConvertable, args: va_list) ...

// Cangjie does not support `va_list`
// public func TreeNodeV(ptr_id: Ref<Unit>, fmt: CStringConvertable, args: va_list) ...

public func TreePop(): Unit {
    return capi.igTreePop()
}

public func TreePush(str_id: CStringConvertable): Unit {
    return capi.igTreePush_Str(str_id.asCString())
}

public func TreePush(ptr_id: Ref<Unit>): Unit {
    return capi.igTreePush_Ptr(ptr_id.getCPointer())
}

public func TreePushOverrideID(id: ImGuiID): Unit {
    return capi.igTreePushOverrideID(id)
}

public func TypingSelectFindBestLeadingMatch(req: ImGuiTypingSelectRequest, items_count: Int32, get_item_name_func: CFunc<(arg1: CPointer<Unit>, arg2: Int32) -> CPointer<UInt8>>, user_data: Ref<Unit>): Int32 {
    return capi.igTypingSelectFindBestLeadingMatch(req.getCPointer(), items_count, get_item_name_func, user_data.getCPointer())
}

public func TypingSelectFindMatch(req: ImGuiTypingSelectRequest, items_count: Int32, get_item_name_func: CFunc<(arg1: CPointer<Unit>, arg2: Int32) -> CPointer<UInt8>>, user_data: Ref<Unit>, nav_item_idx: Int32): Int32 {
    return capi.igTypingSelectFindMatch(req.getCPointer(), items_count, get_item_name_func, user_data.getCPointer(), nav_item_idx)
}

public func TypingSelectFindNextSingleCharMatch(req: ImGuiTypingSelectRequest, items_count: Int32, get_item_name_func: CFunc<(arg1: CPointer<Unit>, arg2: Int32) -> CPointer<UInt8>>, user_data: Ref<Unit>, nav_item_idx: Int32): Int32 {
    return capi.igTypingSelectFindNextSingleCharMatch(req.getCPointer(), items_count, get_item_name_func, user_data.getCPointer(), nav_item_idx)
}

public func Unindent(indent_w: Float32): Unit {
    return capi.igUnindent(indent_w)
}

public func UpdateHoveredWindowAndCaptureFlags(): Unit {
    return capi.igUpdateHoveredWindowAndCaptureFlags()
}

public func UpdateInputEvents(trickle_fast_inputs: Bool): Unit {
    return capi.igUpdateInputEvents(trickle_fast_inputs)
}

public func UpdateMouseMovingWindowEndFrame(): Unit {
    return capi.igUpdateMouseMovingWindowEndFrame()
}

public func UpdateMouseMovingWindowNewFrame(): Unit {
    return capi.igUpdateMouseMovingWindowNewFrame()
}

public func UpdatePlatformWindows(): Unit {
    return capi.igUpdatePlatformWindows()
}

public func UpdateWindowParentAndRootLinks(window: Ref<ImGuiWindow>, flags: ImGuiWindowFlags, parent_window: Ref<ImGuiWindow>): Unit {
    return capi.igUpdateWindowParentAndRootLinks(window.getCPointer(), flags, parent_window.getCPointer())
}

public func UpdateWindowSkipRefresh(window: Ref<ImGuiWindow>): Unit {
    return capi.igUpdateWindowSkipRefresh(window.getCPointer())
}

public func VSliderFloat(label: CStringConvertable, size: ImVec2, v: Ref<Float32>, v_min: Float32, v_max: Float32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igVSliderFloat(label.asCString(), unsafe { size.getCPointer().read() }, v.getCPointer(), v_min, v_max, format.asCString(), flags)
}

public func VSliderInt(label: CStringConvertable, size: ImVec2, v: Ref<Int32>, v_min: Int32, v_max: Int32, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igVSliderInt(label.asCString(), unsafe { size.getCPointer().read() }, v.getCPointer(), v_min, v_max, format.asCString(), flags)
}

public func VSliderScalar(label: CStringConvertable, size: ImVec2, data_type: ImGuiDataType, p_data: Ref<Unit>, p_min: Ref<Unit>, p_max: Ref<Unit>, format: CStringConvertable, flags: ImGuiSliderFlags): Bool {
    return capi.igVSliderScalar(label.asCString(), unsafe { size.getCPointer().read() }, data_type, p_data.getCPointer(), p_min.getCPointer(), p_max.getCPointer(), format.asCString(), flags)
}

public func Value(prefix: CStringConvertable, b: Bool): Unit {
    return capi.igValue_Bool(prefix.asCString(), b)
}

public func Value(prefix: CStringConvertable, v: Int32): Unit {
    return capi.igValue_Int(prefix.asCString(), v)
}

public func Value(prefix: CStringConvertable, v: UInt32): Unit {
    return capi.igValue_Uint(prefix.asCString(), v)
}

public func Value(prefix: CStringConvertable, v: Float32, float_format: CStringConvertable): Unit {
    return capi.igValue_Float(prefix.asCString(), v, float_format.asCString())
}

public func WindowPosRelToAbs(pOut: ImVec2, window: Ref<ImGuiWindow>, p: ImVec2): Unit {
    return capi.igWindowPosRelToAbs(pOut.getCPointer(), window.getCPointer(), unsafe { p.getCPointer().read() })
}

public func WindowRectAbsToRel(pOut: ImRect, window: Ref<ImGuiWindow>, r: ImRect): Unit {
    return capi.igWindowRectAbsToRel(pOut.getCPointer(), window.getCPointer(), unsafe { r.getCPointer().read() })
}

public func WindowRectRelToAbs(pOut: ImRect, window: Ref<ImGuiWindow>, r: ImRect): Unit {
    return capi.igWindowRectRelToAbs(pOut.getCPointer(), window.getCPointer(), unsafe { r.getCPointer().read() })
}

