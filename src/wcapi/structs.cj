// +------------------------------------------------------+
// + THIS FILE IS AUTO-GENERATED BY `imgui4cj_generator`. +
// +       FROM: https://github.com/PGZXB/imgui4cj        +
// +-------------------- DO NOT EDIT. --------------------+

package imgui4cj.wcapi

import imgui4cj.capi

public class ImBitVector <: StructWrapper<capi.ImBitVector> {
    public init(value!: ?capi.ImBitVector, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImBitVector>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Storage: ImVector_ImU32 {
        get() {
            return unsafe { ImVector_ImU32(capi.access_ImBitVector_Storage(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImBitVector_Storage(pointer).write(value.getCPointer().read()) }
        }
    }

    public func Clear(): Unit {
        return ImBitVector_Clear(this)
    }

    public func ClearBit(n: Int32): Unit {
        return ImBitVector_ClearBit(this, n)
    }

    public func Create(sz: Int32): Unit {
        return ImBitVector_Create(this, sz)
    }

    public func SetBit(n: Int32): Unit {
        return ImBitVector_SetBit(this, n)
    }

    public func TestBit(n: Int32): Bool {
        return ImBitVector_TestBit(this, n)
    }
}

public class ImColor <: StructWrapper<capi.ImColor> {
    public init(value!: ?capi.ImColor, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImColor>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImColor_ImColor_Nil().getCPointer(), count: None, owned: true)
    }

    public init(r: Float32, g: Float32, b: Float32, a: Float32) {
        super(ImColor_ImColor_Float(r, g, b, a).getCPointer(), count: None, owned: true)
    }

    public init(col: ImVec4) {
        super(ImColor_ImColor_Vec4(col).getCPointer(), count: None, owned: true)
    }

    public init(r: Int32, g: Int32, b: Int32, a: Int32) {
        super(ImColor_ImColor_Int(r, g, b, a).getCPointer(), count: None, owned: true)
    }

    public init(rgba: ImU32) {
        super(ImColor_ImColor_U32(rgba).getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImColor_destroy(this.pointer)
        }
    }

    public mut prop Value: ImVec4 {
        get() {
            return unsafe { ImVec4(capi.access_ImColor_Value(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImColor_Value(pointer).write(value.getCPointer().read()) }
        }
    }

    public static func HSV(pOut: ImColor, h: Float32, s: Float32, v: Float32, a: Float32): Unit {
        return ImColor_HSV(pOut, h, s, v, a)
    }

    public func SetHSV(h: Float32, s: Float32, v: Float32, a: Float32): Unit {
        return ImColor_SetHSV(this, h, s, v, a)
    }
}

public class ImDrawChannel <: StructWrapper<capi.ImDrawChannel> {
    public init(value!: ?capi.ImDrawChannel, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImDrawChannel>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop _CmdBuffer: ImVector_ImDrawCmd {
        get() {
            return unsafe { ImVector_ImDrawCmd(capi.access_ImDrawChannel__CmdBuffer(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawChannel__CmdBuffer(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop _IdxBuffer: ImVector_ImDrawIdx {
        get() {
            return unsafe { ImVector_ImDrawIdx(capi.access_ImDrawChannel__IdxBuffer(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawChannel__IdxBuffer(pointer).write(value.getCPointer().read()) }
        }
    }
}

public class ImDrawCmd <: StructWrapper<capi.ImDrawCmd> {
    public init(value!: ?capi.ImDrawCmd, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImDrawCmd>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImDrawCmd_ImDrawCmd().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImDrawCmd_destroy(this.pointer)
        }
    }

    public mut prop ClipRect: ImVec4 {
        get() {
            return unsafe { ImVec4(capi.access_ImDrawCmd_ClipRect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawCmd_ClipRect(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop TextureId: ImTextureID {
        get() {
            return unsafe { capi.access_ImDrawCmd_TextureId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawCmd_TextureId(pointer).write(value) }
        }
    }

    public mut prop VtxOffset: UInt32 {
        get() {
            return unsafe { capi.access_ImDrawCmd_VtxOffset(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawCmd_VtxOffset(pointer).write(value) }
        }
    }

    public mut prop IdxOffset: UInt32 {
        get() {
            return unsafe { capi.access_ImDrawCmd_IdxOffset(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawCmd_IdxOffset(pointer).write(value) }
        }
    }

    public mut prop ElemCount: UInt32 {
        get() {
            return unsafe { capi.access_ImDrawCmd_ElemCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawCmd_ElemCount(pointer).write(value) }
        }
    }

    public mut prop UserCallback: ImDrawCallback {
        get() {
            return unsafe { capi.access_ImDrawCmd_UserCallback(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawCmd_UserCallback(pointer).write(value) }
        }
    }

    public mut prop UserCallbackData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImDrawCmd_UserCallbackData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawCmd_UserCallbackData(pointer).write(value.getCPointer()) }
        }
    }

    public func GetTexID(): ImTextureID {
        return ImDrawCmd_GetTexID(this)
    }
}

public class ImDrawCmdHeader <: StructWrapper<capi.ImDrawCmdHeader> {
    public init(value!: ?capi.ImDrawCmdHeader, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImDrawCmdHeader>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop ClipRect: ImVec4 {
        get() {
            return unsafe { ImVec4(capi.access_ImDrawCmdHeader_ClipRect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawCmdHeader_ClipRect(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop TextureId: ImTextureID {
        get() {
            return unsafe { capi.access_ImDrawCmdHeader_TextureId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawCmdHeader_TextureId(pointer).write(value) }
        }
    }

    public mut prop VtxOffset: UInt32 {
        get() {
            return unsafe { capi.access_ImDrawCmdHeader_VtxOffset(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawCmdHeader_VtxOffset(pointer).write(value) }
        }
    }
}

public class ImDrawData <: StructWrapper<capi.ImDrawData> {
    public init(value!: ?capi.ImDrawData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImDrawData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImDrawData_ImDrawData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImDrawData_destroy(this.pointer)
        }
    }

    public mut prop Valid: Bool {
        get() {
            return unsafe { capi.access_ImDrawData_Valid(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawData_Valid(pointer).write(value) }
        }
    }

    public mut prop CmdListsCount: Int32 {
        get() {
            return unsafe { capi.access_ImDrawData_CmdListsCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawData_CmdListsCount(pointer).write(value) }
        }
    }

    public mut prop TotalIdxCount: Int32 {
        get() {
            return unsafe { capi.access_ImDrawData_TotalIdxCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawData_TotalIdxCount(pointer).write(value) }
        }
    }

    public mut prop TotalVtxCount: Int32 {
        get() {
            return unsafe { capi.access_ImDrawData_TotalVtxCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawData_TotalVtxCount(pointer).write(value) }
        }
    }

    public mut prop CmdLists: ImVector_ImDrawListPtr {
        get() {
            return unsafe { ImVector_ImDrawListPtr(capi.access_ImDrawData_CmdLists(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawData_CmdLists(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop DisplayPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImDrawData_DisplayPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawData_DisplayPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop DisplaySize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImDrawData_DisplaySize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawData_DisplaySize(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop FramebufferScale: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImDrawData_FramebufferScale(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawData_FramebufferScale(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop OwnerViewport: ImGuiViewport {
        get() {
            return unsafe { ImGuiViewport(capi.access_ImDrawData_OwnerViewport(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawData_OwnerViewport(pointer).write(value.getCPointer()) }
        }
    }

    public func AddDrawList(draw_list: ImDrawList): Unit {
        return ImDrawData_AddDrawList(this, draw_list)
    }

    public func Clear(): Unit {
        return ImDrawData_Clear(this)
    }

    public func DeIndexAllBuffers(): Unit {
        return ImDrawData_DeIndexAllBuffers(this)
    }

    public func ScaleClipRects(fb_scale: ImVec2): Unit {
        return ImDrawData_ScaleClipRects(this, fb_scale)
    }
}

public class ImDrawDataBuilder <: StructWrapper<capi.ImDrawDataBuilder> {
    public init(value!: ?capi.ImDrawDataBuilder, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImDrawDataBuilder>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImDrawDataBuilder_ImDrawDataBuilder().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImDrawDataBuilder_destroy(this.pointer)
        }
    }

    public mut prop Layers: Ref<CPointer<capi.ImVector_ImDrawListPtr>> {
        get() {
            return unsafe { Ref<CPointer<capi.ImVector_ImDrawListPtr>>.unsafeMake(capi.access_ImDrawDataBuilder_Layers(pointer).read(), count: 2, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop LayerData1: ImVector_ImDrawListPtr {
        get() {
            return unsafe { ImVector_ImDrawListPtr(capi.access_ImDrawDataBuilder_LayerData1(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawDataBuilder_LayerData1(pointer).write(value.getCPointer().read()) }
        }
    }
}

public class ImDrawList <: StructWrapper<capi.ImDrawList> {
    public init(value!: ?capi.ImDrawList, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImDrawList>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init(shared_data: ImDrawListSharedData) {
        super(ImDrawList_ImDrawList(shared_data).getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImDrawList_destroy(this.pointer)
        }
    }

    public mut prop CmdBuffer: ImVector_ImDrawCmd {
        get() {
            return unsafe { ImVector_ImDrawCmd(capi.access_ImDrawList_CmdBuffer(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawList_CmdBuffer(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop IdxBuffer: ImVector_ImDrawIdx {
        get() {
            return unsafe { ImVector_ImDrawIdx(capi.access_ImDrawList_IdxBuffer(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawList_IdxBuffer(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop VtxBuffer: ImVector_ImDrawVert {
        get() {
            return unsafe { ImVector_ImDrawVert(capi.access_ImDrawList_VtxBuffer(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawList_VtxBuffer(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Flags: ImDrawListFlags {
        get() {
            return unsafe { capi.access_ImDrawList_Flags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawList_Flags(pointer).write(value) }
        }
    }

    public mut prop _VtxCurrentIdx: UInt32 {
        get() {
            return unsafe { capi.access_ImDrawList__VtxCurrentIdx(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawList__VtxCurrentIdx(pointer).write(value) }
        }
    }

    public mut prop _Data: ImDrawListSharedData {
        get() {
            return unsafe { ImDrawListSharedData(capi.access_ImDrawList__Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawList__Data(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop _VtxWritePtr: ImDrawVert {
        get() {
            return unsafe { ImDrawVert(capi.access_ImDrawList__VtxWritePtr(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawList__VtxWritePtr(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop _IdxWritePtr: Ref<ImDrawIdx> {
        get() {
            return unsafe { Ref<UInt16>.unsafeMake(capi.access_ImDrawList__IdxWritePtr(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawList__IdxWritePtr(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop _Path: ImVector_ImVec2 {
        get() {
            return unsafe { ImVector_ImVec2(capi.access_ImDrawList__Path(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawList__Path(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop _CmdHeader: ImDrawCmdHeader {
        get() {
            return unsafe { ImDrawCmdHeader(capi.access_ImDrawList__CmdHeader(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawList__CmdHeader(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop _Splitter: ImDrawListSplitter {
        get() {
            return unsafe { ImDrawListSplitter(capi.access_ImDrawList__Splitter(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawList__Splitter(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop _ClipRectStack: ImVector_ImVec4 {
        get() {
            return unsafe { ImVector_ImVec4(capi.access_ImDrawList__ClipRectStack(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawList__ClipRectStack(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop _TextureIdStack: ImVector_ImTextureID {
        get() {
            return unsafe { ImVector_ImTextureID(capi.access_ImDrawList__TextureIdStack(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawList__TextureIdStack(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop _FringeScale: Float32 {
        get() {
            return unsafe { capi.access_ImDrawList__FringeScale(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawList__FringeScale(pointer).write(value) }
        }
    }

    public mut prop _OwnerName: String {
        get() {
            return unsafe { CString(capi.access_ImDrawList__OwnerName(pointer).read()).toString() }
        }

        set(value) {
            unsafe { capi.access_ImDrawList__OwnerName(pointer).write(value.asCString()) }
        }
    }

    public func AddBezierCubic(p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: ImU32, thickness: Float32, num_segments: Int32): Unit {
        return ImDrawList_AddBezierCubic(this, p1, p2, p3, p4, col, thickness, num_segments)
    }

    public func AddBezierQuadratic(p1: ImVec2, p2: ImVec2, p3: ImVec2, col: ImU32, thickness: Float32, num_segments: Int32): Unit {
        return ImDrawList_AddBezierQuadratic(this, p1, p2, p3, col, thickness, num_segments)
    }

    public func AddCallback(callback: ImDrawCallback, callback_data: Ref<Unit>): Unit {
        return ImDrawList_AddCallback(this, callback, callback_data)
    }

    public func AddCircle(center: ImVec2, radius: Float32, col: ImU32, num_segments: Int32, thickness: Float32): Unit {
        return ImDrawList_AddCircle(this, center, radius, col, num_segments, thickness)
    }

    public func AddCircleFilled(center: ImVec2, radius: Float32, col: ImU32, num_segments: Int32): Unit {
        return ImDrawList_AddCircleFilled(this, center, radius, col, num_segments)
    }

    public func AddConcavePolyFilled(points: ImVec2, num_points: Int32, col: ImU32): Unit {
        return ImDrawList_AddConcavePolyFilled(this, points, num_points, col)
    }

    public func AddConvexPolyFilled(points: ImVec2, num_points: Int32, col: ImU32): Unit {
        return ImDrawList_AddConvexPolyFilled(this, points, num_points, col)
    }

    public func AddDrawCmd(): Unit {
        return ImDrawList_AddDrawCmd(this)
    }

    public func AddEllipse(center: ImVec2, radius: ImVec2, col: ImU32, rot: Float32, num_segments: Int32, thickness: Float32): Unit {
        return ImDrawList_AddEllipse(this, center, radius, col, rot, num_segments, thickness)
    }

    public func AddEllipseFilled(center: ImVec2, radius: ImVec2, col: ImU32, rot: Float32, num_segments: Int32): Unit {
        return ImDrawList_AddEllipseFilled(this, center, radius, col, rot, num_segments)
    }

    public func AddImage(user_texture_id: ImTextureID, p_min: ImVec2, p_max: ImVec2, uv_min: ImVec2, uv_max: ImVec2, col: ImU32): Unit {
        return ImDrawList_AddImage(this, user_texture_id, p_min, p_max, uv_min, uv_max, col)
    }

    public func AddImageQuad(user_texture_id: ImTextureID, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, uv1: ImVec2, uv2: ImVec2, uv3: ImVec2, uv4: ImVec2, col: ImU32): Unit {
        return ImDrawList_AddImageQuad(this, user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col)
    }

    public func AddImageRounded(user_texture_id: ImTextureID, p_min: ImVec2, p_max: ImVec2, uv_min: ImVec2, uv_max: ImVec2, col: ImU32, rounding: Float32, flags: ImDrawFlags): Unit {
        return ImDrawList_AddImageRounded(this, user_texture_id, p_min, p_max, uv_min, uv_max, col, rounding, flags)
    }

    public func AddLine(p1: ImVec2, p2: ImVec2, col: ImU32, thickness: Float32): Unit {
        return ImDrawList_AddLine(this, p1, p2, col, thickness)
    }

    public func AddNgon(center: ImVec2, radius: Float32, col: ImU32, num_segments: Int32, thickness: Float32): Unit {
        return ImDrawList_AddNgon(this, center, radius, col, num_segments, thickness)
    }

    public func AddNgonFilled(center: ImVec2, radius: Float32, col: ImU32, num_segments: Int32): Unit {
        return ImDrawList_AddNgonFilled(this, center, radius, col, num_segments)
    }

    public func AddPolyline(points: ImVec2, num_points: Int32, col: ImU32, flags: ImDrawFlags, thickness: Float32): Unit {
        return ImDrawList_AddPolyline(this, points, num_points, col, flags, thickness)
    }

    public func AddQuad(p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: ImU32, thickness: Float32): Unit {
        return ImDrawList_AddQuad(this, p1, p2, p3, p4, col, thickness)
    }

    public func AddQuadFilled(p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: ImU32): Unit {
        return ImDrawList_AddQuadFilled(this, p1, p2, p3, p4, col)
    }

    public func AddRect(p_min: ImVec2, p_max: ImVec2, col: ImU32, rounding: Float32, flags: ImDrawFlags, thickness: Float32): Unit {
        return ImDrawList_AddRect(this, p_min, p_max, col, rounding, flags, thickness)
    }

    public func AddRectFilled(p_min: ImVec2, p_max: ImVec2, col: ImU32, rounding: Float32, flags: ImDrawFlags): Unit {
        return ImDrawList_AddRectFilled(this, p_min, p_max, col, rounding, flags)
    }

    public func AddRectFilledMultiColor(p_min: ImVec2, p_max: ImVec2, col_upr_left: ImU32, col_upr_right: ImU32, col_bot_right: ImU32, col_bot_left: ImU32): Unit {
        return ImDrawList_AddRectFilledMultiColor(this, p_min, p_max, col_upr_left, col_upr_right, col_bot_right, col_bot_left)
    }

    public func AddText(pos: ImVec2, col: ImU32, text_begin: CStringConvertable, text_end: CStringConvertable): Unit {
        return ImDrawList_AddText_Vec2(this, pos, col, text_begin, text_end)
    }

    public func AddText(font: ImFont, font_size: Float32, pos: ImVec2, col: ImU32, text_begin: CStringConvertable, text_end: CStringConvertable, wrap_width: Float32, cpu_fine_clip_rect: ImVec4): Unit {
        return ImDrawList_AddText_FontPtr(this, font, font_size, pos, col, text_begin, text_end, wrap_width, cpu_fine_clip_rect)
    }

    public func AddTriangle(p1: ImVec2, p2: ImVec2, p3: ImVec2, col: ImU32, thickness: Float32): Unit {
        return ImDrawList_AddTriangle(this, p1, p2, p3, col, thickness)
    }

    public func AddTriangleFilled(p1: ImVec2, p2: ImVec2, p3: ImVec2, col: ImU32): Unit {
        return ImDrawList_AddTriangleFilled(this, p1, p2, p3, col)
    }

    public func ChannelsMerge(): Unit {
        return ImDrawList_ChannelsMerge(this)
    }

    public func ChannelsSetCurrent(n: Int32): Unit {
        return ImDrawList_ChannelsSetCurrent(this, n)
    }

    public func ChannelsSplit(count: Int32): Unit {
        return ImDrawList_ChannelsSplit(this, count)
    }

    public func CloneOutput(): ImDrawList {
        return ImDrawList_CloneOutput(this)
    }

    public func GetClipRectMax(pOut: ImVec2): Unit {
        return ImDrawList_GetClipRectMax(pOut, this)
    }

    public func GetClipRectMin(pOut: ImVec2): Unit {
        return ImDrawList_GetClipRectMin(pOut, this)
    }

    public func PathArcTo(center: ImVec2, radius: Float32, a_min: Float32, a_max: Float32, num_segments: Int32): Unit {
        return ImDrawList_PathArcTo(this, center, radius, a_min, a_max, num_segments)
    }

    public func PathArcToFast(center: ImVec2, radius: Float32, a_min_of_12: Int32, a_max_of_12: Int32): Unit {
        return ImDrawList_PathArcToFast(this, center, radius, a_min_of_12, a_max_of_12)
    }

    public func PathBezierCubicCurveTo(p2: ImVec2, p3: ImVec2, p4: ImVec2, num_segments: Int32): Unit {
        return ImDrawList_PathBezierCubicCurveTo(this, p2, p3, p4, num_segments)
    }

    public func PathBezierQuadraticCurveTo(p2: ImVec2, p3: ImVec2, num_segments: Int32): Unit {
        return ImDrawList_PathBezierQuadraticCurveTo(this, p2, p3, num_segments)
    }

    public func PathClear(): Unit {
        return ImDrawList_PathClear(this)
    }

    public func PathEllipticalArcTo(center: ImVec2, radius: ImVec2, rot: Float32, a_min: Float32, a_max: Float32, num_segments: Int32): Unit {
        return ImDrawList_PathEllipticalArcTo(this, center, radius, rot, a_min, a_max, num_segments)
    }

    public func PathFillConcave(col: ImU32): Unit {
        return ImDrawList_PathFillConcave(this, col)
    }

    public func PathFillConvex(col: ImU32): Unit {
        return ImDrawList_PathFillConvex(this, col)
    }

    public func PathLineTo(pos: ImVec2): Unit {
        return ImDrawList_PathLineTo(this, pos)
    }

    public func PathLineToMergeDuplicate(pos: ImVec2): Unit {
        return ImDrawList_PathLineToMergeDuplicate(this, pos)
    }

    public func PathRect(rect_min: ImVec2, rect_max: ImVec2, rounding: Float32, flags: ImDrawFlags): Unit {
        return ImDrawList_PathRect(this, rect_min, rect_max, rounding, flags)
    }

    public func PathStroke(col: ImU32, flags: ImDrawFlags, thickness: Float32): Unit {
        return ImDrawList_PathStroke(this, col, flags, thickness)
    }

    public func PopClipRect(): Unit {
        return ImDrawList_PopClipRect(this)
    }

    public func PopTextureID(): Unit {
        return ImDrawList_PopTextureID(this)
    }

    public func PrimQuadUV(a: ImVec2, b: ImVec2, c: ImVec2, d: ImVec2, uv_a: ImVec2, uv_b: ImVec2, uv_c: ImVec2, uv_d: ImVec2, col: ImU32): Unit {
        return ImDrawList_PrimQuadUV(this, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col)
    }

    public func PrimRect(a: ImVec2, b: ImVec2, col: ImU32): Unit {
        return ImDrawList_PrimRect(this, a, b, col)
    }

    public func PrimRectUV(a: ImVec2, b: ImVec2, uv_a: ImVec2, uv_b: ImVec2, col: ImU32): Unit {
        return ImDrawList_PrimRectUV(this, a, b, uv_a, uv_b, col)
    }

    public func PrimReserve(idx_count: Int32, vtx_count: Int32): Unit {
        return ImDrawList_PrimReserve(this, idx_count, vtx_count)
    }

    public func PrimUnreserve(idx_count: Int32, vtx_count: Int32): Unit {
        return ImDrawList_PrimUnreserve(this, idx_count, vtx_count)
    }

    public func PrimVtx(pos: ImVec2, uv: ImVec2, col: ImU32): Unit {
        return ImDrawList_PrimVtx(this, pos, uv, col)
    }

    public func PrimWriteIdx(idx: ImDrawIdx): Unit {
        return ImDrawList_PrimWriteIdx(this, idx)
    }

    public func PrimWriteVtx(pos: ImVec2, uv: ImVec2, col: ImU32): Unit {
        return ImDrawList_PrimWriteVtx(this, pos, uv, col)
    }

    public func PushClipRect(clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: Bool): Unit {
        return ImDrawList_PushClipRect(this, clip_rect_min, clip_rect_max, intersect_with_current_clip_rect)
    }

    public func PushClipRectFullScreen(): Unit {
        return ImDrawList_PushClipRectFullScreen(this)
    }

    public func PushTextureID(texture_id: ImTextureID): Unit {
        return ImDrawList_PushTextureID(this, texture_id)
    }

    public func _CalcCircleAutoSegmentCount(radius: Float32): Int32 {
        return ImDrawList__CalcCircleAutoSegmentCount(this, radius)
    }

    public func _ClearFreeMemory(): Unit {
        return ImDrawList__ClearFreeMemory(this)
    }

    public func _OnChangedClipRect(): Unit {
        return ImDrawList__OnChangedClipRect(this)
    }

    public func _OnChangedTextureID(): Unit {
        return ImDrawList__OnChangedTextureID(this)
    }

    public func _OnChangedVtxOffset(): Unit {
        return ImDrawList__OnChangedVtxOffset(this)
    }

    public func _PathArcToFastEx(center: ImVec2, radius: Float32, a_min_sample: Int32, a_max_sample: Int32, a_step: Int32): Unit {
        return ImDrawList__PathArcToFastEx(this, center, radius, a_min_sample, a_max_sample, a_step)
    }

    public func _PathArcToN(center: ImVec2, radius: Float32, a_min: Float32, a_max: Float32, num_segments: Int32): Unit {
        return ImDrawList__PathArcToN(this, center, radius, a_min, a_max, num_segments)
    }

    public func _PopUnusedDrawCmd(): Unit {
        return ImDrawList__PopUnusedDrawCmd(this)
    }

    public func _ResetForNewFrame(): Unit {
        return ImDrawList__ResetForNewFrame(this)
    }

    public func _TryMergeDrawCmds(): Unit {
        return ImDrawList__TryMergeDrawCmds(this)
    }
}

public class ImDrawListSharedData <: StructWrapper<capi.ImDrawListSharedData> {
    public init(value!: ?capi.ImDrawListSharedData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImDrawListSharedData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImDrawListSharedData_ImDrawListSharedData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImDrawListSharedData_destroy(this.pointer)
        }
    }

    public mut prop TexUvWhitePixel: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImDrawListSharedData_TexUvWhitePixel(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawListSharedData_TexUvWhitePixel(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Font: ImFont {
        get() {
            return unsafe { ImFont(capi.access_ImDrawListSharedData_Font(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawListSharedData_Font(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop FontSize: Float32 {
        get() {
            return unsafe { capi.access_ImDrawListSharedData_FontSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawListSharedData_FontSize(pointer).write(value) }
        }
    }

    public mut prop CurveTessellationTol: Float32 {
        get() {
            return unsafe { capi.access_ImDrawListSharedData_CurveTessellationTol(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawListSharedData_CurveTessellationTol(pointer).write(value) }
        }
    }

    public mut prop CircleSegmentMaxError: Float32 {
        get() {
            return unsafe { capi.access_ImDrawListSharedData_CircleSegmentMaxError(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawListSharedData_CircleSegmentMaxError(pointer).write(value) }
        }
    }

    public mut prop ClipRectFullscreen: ImVec4 {
        get() {
            return unsafe { ImVec4(capi.access_ImDrawListSharedData_ClipRectFullscreen(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawListSharedData_ClipRectFullscreen(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop InitialFlags: ImDrawListFlags {
        get() {
            return unsafe { capi.access_ImDrawListSharedData_InitialFlags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawListSharedData_InitialFlags(pointer).write(value) }
        }
    }

    public mut prop TempBuffer: ImVector_ImVec2 {
        get() {
            return unsafe { ImVector_ImVec2(capi.access_ImDrawListSharedData_TempBuffer(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawListSharedData_TempBuffer(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop ArcFastVtx: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImDrawListSharedData_ArcFastVtx(pointer).read(), count: 48, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop ArcFastRadiusCutoff: Float32 {
        get() {
            return unsafe { capi.access_ImDrawListSharedData_ArcFastRadiusCutoff(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawListSharedData_ArcFastRadiusCutoff(pointer).write(value) }
        }
    }

    public mut prop CircleSegmentCounts: Ref<ImU8> {
        get() {
            return unsafe { Ref<ImU8>.unsafeMake(capi.access_ImDrawListSharedData_CircleSegmentCounts(pointer).read(), count: 64, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop TexUvLines: ImVec4 {
        get() {
            return unsafe { ImVec4(capi.access_ImDrawListSharedData_TexUvLines(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawListSharedData_TexUvLines(pointer).write(value.getCPointer()) }
        }
    }

    public func SetCircleTessellationMaxError(max_error: Float32): Unit {
        return ImDrawListSharedData_SetCircleTessellationMaxError(this, max_error)
    }
}

public class ImDrawListSplitter <: StructWrapper<capi.ImDrawListSplitter> {
    public init(value!: ?capi.ImDrawListSplitter, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImDrawListSplitter>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImDrawListSplitter_ImDrawListSplitter().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImDrawListSplitter_destroy(this.pointer)
        }
    }

    public mut prop _Current: Int32 {
        get() {
            return unsafe { capi.access_ImDrawListSplitter__Current(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawListSplitter__Current(pointer).write(value) }
        }
    }

    public mut prop _Count: Int32 {
        get() {
            return unsafe { capi.access_ImDrawListSplitter__Count(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawListSplitter__Count(pointer).write(value) }
        }
    }

    public mut prop _Channels: ImVector_ImDrawChannel {
        get() {
            return unsafe { ImVector_ImDrawChannel(capi.access_ImDrawListSplitter__Channels(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawListSplitter__Channels(pointer).write(value.getCPointer().read()) }
        }
    }

    public func Clear(): Unit {
        return ImDrawListSplitter_Clear(this)
    }

    public func ClearFreeMemory(): Unit {
        return ImDrawListSplitter_ClearFreeMemory(this)
    }

    public func Merge(draw_list: ImDrawList): Unit {
        return ImDrawListSplitter_Merge(this, draw_list)
    }

    public func SetCurrentChannel(draw_list: ImDrawList, channel_idx: Int32): Unit {
        return ImDrawListSplitter_SetCurrentChannel(this, draw_list, channel_idx)
    }

    public func Split(draw_list: ImDrawList, count: Int32): Unit {
        return ImDrawListSplitter_Split(this, draw_list, count)
    }
}

public class ImDrawVert <: StructWrapper<capi.ImDrawVert> {
    public init(value!: ?capi.ImDrawVert, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImDrawVert>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop pos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImDrawVert_pos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawVert_pos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop uv: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImDrawVert_uv(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImDrawVert_uv(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop col: ImU32 {
        get() {
            return unsafe { capi.access_ImDrawVert_col(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImDrawVert_col(pointer).write(value) }
        }
    }
}

public class ImFont <: StructWrapper<capi.ImFont> {
    public init(value!: ?capi.ImFont, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImFont>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImFont_ImFont().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImFont_destroy(this.pointer)
        }
    }

    public mut prop IndexAdvanceX: ImVector_float {
        get() {
            return unsafe { ImVector_float(capi.access_ImFont_IndexAdvanceX(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFont_IndexAdvanceX(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop FallbackAdvanceX: Float32 {
        get() {
            return unsafe { capi.access_ImFont_FallbackAdvanceX(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFont_FallbackAdvanceX(pointer).write(value) }
        }
    }

    public mut prop FontSize: Float32 {
        get() {
            return unsafe { capi.access_ImFont_FontSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFont_FontSize(pointer).write(value) }
        }
    }

    public mut prop IndexLookup: ImVector_ImWchar {
        get() {
            return unsafe { ImVector_ImWchar(capi.access_ImFont_IndexLookup(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFont_IndexLookup(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Glyphs: ImVector_ImFontGlyph {
        get() {
            return unsafe { ImVector_ImFontGlyph(capi.access_ImFont_Glyphs(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFont_Glyphs(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop FallbackGlyph: Ref<ImFontGlyph> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImFont_FallbackGlyph(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFont_FallbackGlyph(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop ContainerAtlas: ImFontAtlas {
        get() {
            return unsafe { ImFontAtlas(capi.access_ImFont_ContainerAtlas(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFont_ContainerAtlas(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop ConfigData: ImFontConfig {
        get() {
            return unsafe { ImFontConfig(capi.access_ImFont_ConfigData(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFont_ConfigData(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop ConfigDataCount: Int16 {
        get() {
            return unsafe { capi.access_ImFont_ConfigDataCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFont_ConfigDataCount(pointer).write(value) }
        }
    }

    public mut prop FallbackChar: ImWchar {
        get() {
            return unsafe { capi.access_ImFont_FallbackChar(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFont_FallbackChar(pointer).write(value) }
        }
    }

    public mut prop EllipsisChar: ImWchar {
        get() {
            return unsafe { capi.access_ImFont_EllipsisChar(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFont_EllipsisChar(pointer).write(value) }
        }
    }

    public mut prop EllipsisCharCount: Int16 {
        get() {
            return unsafe { capi.access_ImFont_EllipsisCharCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFont_EllipsisCharCount(pointer).write(value) }
        }
    }

    public mut prop EllipsisWidth: Float32 {
        get() {
            return unsafe { capi.access_ImFont_EllipsisWidth(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFont_EllipsisWidth(pointer).write(value) }
        }
    }

    public mut prop EllipsisCharStep: Float32 {
        get() {
            return unsafe { capi.access_ImFont_EllipsisCharStep(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFont_EllipsisCharStep(pointer).write(value) }
        }
    }

    public mut prop DirtyLookupTables: Bool {
        get() {
            return unsafe { capi.access_ImFont_DirtyLookupTables(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFont_DirtyLookupTables(pointer).write(value) }
        }
    }

    public mut prop Scale: Float32 {
        get() {
            return unsafe { capi.access_ImFont_Scale(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFont_Scale(pointer).write(value) }
        }
    }

    public mut prop Ascent: Float32 {
        get() {
            return unsafe { capi.access_ImFont_Ascent(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFont_Ascent(pointer).write(value) }
        }
    }

    public mut prop Descent: Float32 {
        get() {
            return unsafe { capi.access_ImFont_Descent(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFont_Descent(pointer).write(value) }
        }
    }

    public mut prop MetricsTotalSurface: Int32 {
        get() {
            return unsafe { capi.access_ImFont_MetricsTotalSurface(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFont_MetricsTotalSurface(pointer).write(value) }
        }
    }

    public mut prop Used4kPagesMap: Ref<ImU8> {
        get() {
            return unsafe { Ref<ImU8>.unsafeMake(capi.access_ImFont_Used4kPagesMap(pointer).read(), count: 2, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public func AddGlyph(src_cfg: ImFontConfig, c: ImWchar, x0: Float32, y0: Float32, x1: Float32, y1: Float32, u0: Float32, v0: Float32, u1: Float32, v1: Float32, advance_x: Float32): Unit {
        return ImFont_AddGlyph(this, src_cfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x)
    }

    public func AddRemapChar(dst: ImWchar, src: ImWchar, overwrite_dst: Bool): Unit {
        return ImFont_AddRemapChar(this, dst, src, overwrite_dst)
    }

    public func BuildLookupTable(): Unit {
        return ImFont_BuildLookupTable(this)
    }

    public func CalcTextSizeA(pOut: ImVec2, size: Float32, max_width: Float32, wrap_width: Float32, text_begin: CStringConvertable, text_end: CStringConvertable, remaining: Ref<CPointer<UInt8>>): Unit {
        return ImFont_CalcTextSizeA(pOut, this, size, max_width, wrap_width, text_begin, text_end, remaining)
    }

    public func CalcWordWrapPositionA(scale: Float32, text: CStringConvertable, text_end: CStringConvertable, wrap_width: Float32): String {
        return ImFont_CalcWordWrapPositionA(this, scale, text, text_end, wrap_width)
    }

    public func ClearOutputData(): Unit {
        return ImFont_ClearOutputData(this)
    }

    public func FindGlyph(c: ImWchar): Ref<ImFontGlyph> {
        return ImFont_FindGlyph(this, c)
    }

    public func FindGlyphNoFallback(c: ImWchar): Ref<ImFontGlyph> {
        return ImFont_FindGlyphNoFallback(this, c)
    }

    public func GetCharAdvance(c: ImWchar): Float32 {
        return ImFont_GetCharAdvance(this, c)
    }

    public func GetDebugName(): String {
        return ImFont_GetDebugName(this)
    }

    public func GrowIndex(new_size: Int32): Unit {
        return ImFont_GrowIndex(this, new_size)
    }

    public func IsGlyphRangeUnused(c_begin: UInt32, c_last: UInt32): Bool {
        return ImFont_IsGlyphRangeUnused(this, c_begin, c_last)
    }

    public func IsLoaded(): Bool {
        return ImFont_IsLoaded(this)
    }

    public func RenderChar(draw_list: ImDrawList, size: Float32, pos: ImVec2, col: ImU32, c: ImWchar): Unit {
        return ImFont_RenderChar(this, draw_list, size, pos, col, c)
    }

    public func RenderText(draw_list: ImDrawList, size: Float32, pos: ImVec2, col: ImU32, clip_rect: ImVec4, text_begin: CStringConvertable, text_end: CStringConvertable, wrap_width: Float32, cpu_fine_clip: Bool): Unit {
        return ImFont_RenderText(this, draw_list, size, pos, col, clip_rect, text_begin, text_end, wrap_width, cpu_fine_clip)
    }

    public func SetGlyphVisible(c: ImWchar, visible: Bool): Unit {
        return ImFont_SetGlyphVisible(this, c, visible)
    }
}

public class ImFontAtlas <: StructWrapper<capi.ImFontAtlas> {
    public init(value!: ?capi.ImFontAtlas, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImFontAtlas>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImFontAtlas_ImFontAtlas().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImFontAtlas_destroy(this.pointer)
        }
    }

    public mut prop Flags: ImFontAtlasFlags {
        get() {
            return unsafe { capi.access_ImFontAtlas_Flags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_Flags(pointer).write(value) }
        }
    }

    public mut prop TexID: ImTextureID {
        get() {
            return unsafe { capi.access_ImFontAtlas_TexID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_TexID(pointer).write(value) }
        }
    }

    public mut prop TexDesiredWidth: Int32 {
        get() {
            return unsafe { capi.access_ImFontAtlas_TexDesiredWidth(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_TexDesiredWidth(pointer).write(value) }
        }
    }

    public mut prop TexGlyphPadding: Int32 {
        get() {
            return unsafe { capi.access_ImFontAtlas_TexGlyphPadding(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_TexGlyphPadding(pointer).write(value) }
        }
    }

    public mut prop Locked: Bool {
        get() {
            return unsafe { capi.access_ImFontAtlas_Locked(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_Locked(pointer).write(value) }
        }
    }

    public mut prop UserData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImFontAtlas_UserData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_UserData(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop TexReady: Bool {
        get() {
            return unsafe { capi.access_ImFontAtlas_TexReady(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_TexReady(pointer).write(value) }
        }
    }

    public mut prop TexPixelsUseColors: Bool {
        get() {
            return unsafe { capi.access_ImFontAtlas_TexPixelsUseColors(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_TexPixelsUseColors(pointer).write(value) }
        }
    }

    public mut prop TexPixelsAlpha8: Ref<UInt8> {
        get() {
            return unsafe { Ref<UInt8>.unsafeMake(capi.access_ImFontAtlas_TexPixelsAlpha8(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_TexPixelsAlpha8(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop TexPixelsRGBA32: Ref<UInt32> {
        get() {
            return unsafe { Ref<UInt32>.unsafeMake(capi.access_ImFontAtlas_TexPixelsRGBA32(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_TexPixelsRGBA32(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop TexWidth: Int32 {
        get() {
            return unsafe { capi.access_ImFontAtlas_TexWidth(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_TexWidth(pointer).write(value) }
        }
    }

    public mut prop TexHeight: Int32 {
        get() {
            return unsafe { capi.access_ImFontAtlas_TexHeight(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_TexHeight(pointer).write(value) }
        }
    }

    public mut prop TexUvScale: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImFontAtlas_TexUvScale(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_TexUvScale(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop TexUvWhitePixel: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImFontAtlas_TexUvWhitePixel(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_TexUvWhitePixel(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Fonts: ImVector_ImFontPtr {
        get() {
            return unsafe { ImVector_ImFontPtr(capi.access_ImFontAtlas_Fonts(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_Fonts(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop CustomRects: ImVector_ImFontAtlasCustomRect {
        get() {
            return unsafe { ImVector_ImFontAtlasCustomRect(capi.access_ImFontAtlas_CustomRects(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_CustomRects(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop ConfigData: ImVector_ImFontConfig {
        get() {
            return unsafe { ImVector_ImFontConfig(capi.access_ImFontAtlas_ConfigData(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_ConfigData(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop TexUvLines: ImVec4 {
        get() {
            return unsafe { ImVec4(capi.access_ImFontAtlas_TexUvLines(pointer).read(), count: 64, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop FontBuilderIO: ImFontBuilderIO {
        get() {
            return unsafe { ImFontBuilderIO(capi.access_ImFontAtlas_FontBuilderIO(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_FontBuilderIO(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop FontBuilderFlags: UInt32 {
        get() {
            return unsafe { capi.access_ImFontAtlas_FontBuilderFlags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_FontBuilderFlags(pointer).write(value) }
        }
    }

    public mut prop PackIdMouseCursors: Int32 {
        get() {
            return unsafe { capi.access_ImFontAtlas_PackIdMouseCursors(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_PackIdMouseCursors(pointer).write(value) }
        }
    }

    public mut prop PackIdLines: Int32 {
        get() {
            return unsafe { capi.access_ImFontAtlas_PackIdLines(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlas_PackIdLines(pointer).write(value) }
        }
    }

    public func AddCustomRectFontGlyph(font: ImFont, id: ImWchar, width: Int32, height: Int32, advance_x: Float32, offset: ImVec2): Int32 {
        return ImFontAtlas_AddCustomRectFontGlyph(this, font, id, width, height, advance_x, offset)
    }

    public func AddCustomRectRegular(width: Int32, height: Int32): Int32 {
        return ImFontAtlas_AddCustomRectRegular(this, width, height)
    }

    public func AddFont(font_cfg: ImFontConfig): ImFont {
        return ImFontAtlas_AddFont(this, font_cfg)
    }

    public func AddFontDefault(font_cfg: ImFontConfig): ImFont {
        return ImFontAtlas_AddFontDefault(this, font_cfg)
    }

    public func AddFontFromFileTTF(filename: CStringConvertable, size_pixels: Float32, font_cfg: ImFontConfig, glyph_ranges: Ref<ImWchar>): ImFont {
        return ImFontAtlas_AddFontFromFileTTF(this, filename, size_pixels, font_cfg, glyph_ranges)
    }

    public func AddFontFromMemoryCompressedBase85TTF(compressed_font_data_base85: CStringConvertable, size_pixels: Float32, font_cfg: ImFontConfig, glyph_ranges: Ref<ImWchar>): ImFont {
        return ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(this, compressed_font_data_base85, size_pixels, font_cfg, glyph_ranges)
    }

    public func AddFontFromMemoryCompressedTTF(compressed_font_data: Ref<Unit>, compressed_font_data_size: Int32, size_pixels: Float32, font_cfg: ImFontConfig, glyph_ranges: Ref<ImWchar>): ImFont {
        return ImFontAtlas_AddFontFromMemoryCompressedTTF(this, compressed_font_data, compressed_font_data_size, size_pixels, font_cfg, glyph_ranges)
    }

    public func AddFontFromMemoryTTF(font_data: Ref<Unit>, font_data_size: Int32, size_pixels: Float32, font_cfg: ImFontConfig, glyph_ranges: Ref<ImWchar>): ImFont {
        return ImFontAtlas_AddFontFromMemoryTTF(this, font_data, font_data_size, size_pixels, font_cfg, glyph_ranges)
    }

    public func Build(): Bool {
        return ImFontAtlas_Build(this)
    }

    public func CalcCustomRectUV(rect: ImFontAtlasCustomRect, out_uv_min: ImVec2, out_uv_max: ImVec2): Unit {
        return ImFontAtlas_CalcCustomRectUV(this, rect, out_uv_min, out_uv_max)
    }

    public func Clear(): Unit {
        return ImFontAtlas_Clear(this)
    }

    public func ClearFonts(): Unit {
        return ImFontAtlas_ClearFonts(this)
    }

    public func ClearInputData(): Unit {
        return ImFontAtlas_ClearInputData(this)
    }

    public func ClearTexData(): Unit {
        return ImFontAtlas_ClearTexData(this)
    }

    public func GetCustomRectByIndex(index: Int32): ImFontAtlasCustomRect {
        return ImFontAtlas_GetCustomRectByIndex(this, index)
    }

    public func GetGlyphRangesChineseFull(): Ref<ImWchar> {
        return ImFontAtlas_GetGlyphRangesChineseFull(this)
    }

    public func GetGlyphRangesChineseSimplifiedCommon(): Ref<ImWchar> {
        return ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(this)
    }

    public func GetGlyphRangesCyrillic(): Ref<ImWchar> {
        return ImFontAtlas_GetGlyphRangesCyrillic(this)
    }

    public func GetGlyphRangesDefault(): Ref<ImWchar> {
        return ImFontAtlas_GetGlyphRangesDefault(this)
    }

    public func GetGlyphRangesGreek(): Ref<ImWchar> {
        return ImFontAtlas_GetGlyphRangesGreek(this)
    }

    public func GetGlyphRangesJapanese(): Ref<ImWchar> {
        return ImFontAtlas_GetGlyphRangesJapanese(this)
    }

    public func GetGlyphRangesKorean(): Ref<ImWchar> {
        return ImFontAtlas_GetGlyphRangesKorean(this)
    }

    public func GetGlyphRangesThai(): Ref<ImWchar> {
        return ImFontAtlas_GetGlyphRangesThai(this)
    }

    public func GetGlyphRangesVietnamese(): Ref<ImWchar> {
        return ImFontAtlas_GetGlyphRangesVietnamese(this)
    }

    public func GetMouseCursorTexData(cursor: ImGuiMouseCursor, out_offset: ImVec2, out_size: ImVec2, out_uv_border: ImVec2, out_uv_fill: ImVec2): Bool {
        return ImFontAtlas_GetMouseCursorTexData(this, cursor, out_offset, out_size, out_uv_border, out_uv_fill)
    }

    public func GetTexDataAsAlpha8(out_pixels: CPointer<CPointer<UInt8>>, out_width: Ref<Int32>, out_height: Ref<Int32>, out_bytes_per_pixel: Ref<Int32>): Unit {
        return ImFontAtlas_GetTexDataAsAlpha8(this, out_pixels, out_width, out_height, out_bytes_per_pixel)
    }

    public func GetTexDataAsRGBA32(out_pixels: CPointer<CPointer<UInt8>>, out_width: Ref<Int32>, out_height: Ref<Int32>, out_bytes_per_pixel: Ref<Int32>): Unit {
        return ImFontAtlas_GetTexDataAsRGBA32(this, out_pixels, out_width, out_height, out_bytes_per_pixel)
    }

    public func IsBuilt(): Bool {
        return ImFontAtlas_IsBuilt(this)
    }

    public func SetTexID(id: ImTextureID): Unit {
        return ImFontAtlas_SetTexID(this, id)
    }
}

public class ImFontAtlasCustomRect <: StructWrapper<capi.ImFontAtlasCustomRect> {
    public init(value!: ?capi.ImFontAtlasCustomRect, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImFontAtlasCustomRect>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImFontAtlasCustomRect_ImFontAtlasCustomRect().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImFontAtlasCustomRect_destroy(this.pointer)
        }
    }

    public mut prop Width: UInt16 {
        get() {
            return unsafe { capi.access_ImFontAtlasCustomRect_Width(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlasCustomRect_Width(pointer).write(value) }
        }
    }

    public mut prop Height: UInt16 {
        get() {
            return unsafe { capi.access_ImFontAtlasCustomRect_Height(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlasCustomRect_Height(pointer).write(value) }
        }
    }

    public mut prop X: UInt16 {
        get() {
            return unsafe { capi.access_ImFontAtlasCustomRect_X(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlasCustomRect_X(pointer).write(value) }
        }
    }

    public mut prop Y: UInt16 {
        get() {
            return unsafe { capi.access_ImFontAtlasCustomRect_Y(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlasCustomRect_Y(pointer).write(value) }
        }
    }

    public mut prop GlyphID: UInt32 {
        get() {
            return unsafe { capi.access_ImFontAtlasCustomRect_GlyphID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlasCustomRect_GlyphID(pointer).write(value) }
        }
    }

    public mut prop GlyphAdvanceX: Float32 {
        get() {
            return unsafe { capi.access_ImFontAtlasCustomRect_GlyphAdvanceX(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlasCustomRect_GlyphAdvanceX(pointer).write(value) }
        }
    }

    public mut prop GlyphOffset: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImFontAtlasCustomRect_GlyphOffset(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlasCustomRect_GlyphOffset(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Font: ImFont {
        get() {
            return unsafe { ImFont(capi.access_ImFontAtlasCustomRect_Font(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontAtlasCustomRect_Font(pointer).write(value.getCPointer()) }
        }
    }

    public func IsPacked(): Bool {
        return ImFontAtlasCustomRect_IsPacked(this)
    }
}

public class ImFontBuilderIO <: StructWrapper<capi.ImFontBuilderIO> {
    public init(value!: ?capi.ImFontBuilderIO, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImFontBuilderIO>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop FontBuilder_Build: CFunc<(atlas: CPointer<capi.ImFontAtlas>) -> Bool> {
        get() {
            return unsafe { capi.access_ImFontBuilderIO_FontBuilder_Build(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontBuilderIO_FontBuilder_Build(pointer).write(value) }
        }
    }
}

public class ImFontConfig <: StructWrapper<capi.ImFontConfig> {
    public init(value!: ?capi.ImFontConfig, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImFontConfig>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImFontConfig_ImFontConfig().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImFontConfig_destroy(this.pointer)
        }
    }

    public mut prop FontData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImFontConfig_FontData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_FontData(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop FontDataSize: Int32 {
        get() {
            return unsafe { capi.access_ImFontConfig_FontDataSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_FontDataSize(pointer).write(value) }
        }
    }

    public mut prop FontDataOwnedByAtlas: Bool {
        get() {
            return unsafe { capi.access_ImFontConfig_FontDataOwnedByAtlas(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_FontDataOwnedByAtlas(pointer).write(value) }
        }
    }

    public mut prop FontNo: Int32 {
        get() {
            return unsafe { capi.access_ImFontConfig_FontNo(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_FontNo(pointer).write(value) }
        }
    }

    public mut prop SizePixels: Float32 {
        get() {
            return unsafe { capi.access_ImFontConfig_SizePixels(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_SizePixels(pointer).write(value) }
        }
    }

    public mut prop OversampleH: Int32 {
        get() {
            return unsafe { capi.access_ImFontConfig_OversampleH(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_OversampleH(pointer).write(value) }
        }
    }

    public mut prop OversampleV: Int32 {
        get() {
            return unsafe { capi.access_ImFontConfig_OversampleV(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_OversampleV(pointer).write(value) }
        }
    }

    public mut prop PixelSnapH: Bool {
        get() {
            return unsafe { capi.access_ImFontConfig_PixelSnapH(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_PixelSnapH(pointer).write(value) }
        }
    }

    public mut prop GlyphExtraSpacing: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImFontConfig_GlyphExtraSpacing(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_GlyphExtraSpacing(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop GlyphOffset: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImFontConfig_GlyphOffset(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_GlyphOffset(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop GlyphRanges: Ref<ImWchar> {
        get() {
            return unsafe { Ref<UInt16>.unsafeMake(capi.access_ImFontConfig_GlyphRanges(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_GlyphRanges(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop GlyphMinAdvanceX: Float32 {
        get() {
            return unsafe { capi.access_ImFontConfig_GlyphMinAdvanceX(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_GlyphMinAdvanceX(pointer).write(value) }
        }
    }

    public mut prop GlyphMaxAdvanceX: Float32 {
        get() {
            return unsafe { capi.access_ImFontConfig_GlyphMaxAdvanceX(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_GlyphMaxAdvanceX(pointer).write(value) }
        }
    }

    public mut prop MergeMode: Bool {
        get() {
            return unsafe { capi.access_ImFontConfig_MergeMode(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_MergeMode(pointer).write(value) }
        }
    }

    public mut prop FontBuilderFlags: UInt32 {
        get() {
            return unsafe { capi.access_ImFontConfig_FontBuilderFlags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_FontBuilderFlags(pointer).write(value) }
        }
    }

    public mut prop RasterizerMultiply: Float32 {
        get() {
            return unsafe { capi.access_ImFontConfig_RasterizerMultiply(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_RasterizerMultiply(pointer).write(value) }
        }
    }

    public mut prop RasterizerDensity: Float32 {
        get() {
            return unsafe { capi.access_ImFontConfig_RasterizerDensity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_RasterizerDensity(pointer).write(value) }
        }
    }

    public mut prop EllipsisChar: ImWchar {
        get() {
            return unsafe { capi.access_ImFontConfig_EllipsisChar(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_EllipsisChar(pointer).write(value) }
        }
    }

    public mut prop Name: Ref<UInt8> {
        get() {
            return unsafe { Ref<UInt8>.unsafeMake(capi.access_ImFontConfig_Name(pointer).read(), count: 40, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop DstFont: ImFont {
        get() {
            return unsafe { ImFont(capi.access_ImFontConfig_DstFont(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontConfig_DstFont(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImFontGlyphRangesBuilder <: StructWrapper<capi.ImFontGlyphRangesBuilder> {
    public init(value!: ?capi.ImFontGlyphRangesBuilder, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImFontGlyphRangesBuilder>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImFontGlyphRangesBuilder_destroy(this.pointer)
        }
    }

    public mut prop UsedChars: ImVector_ImU32 {
        get() {
            return unsafe { ImVector_ImU32(capi.access_ImFontGlyphRangesBuilder_UsedChars(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImFontGlyphRangesBuilder_UsedChars(pointer).write(value.getCPointer().read()) }
        }
    }

    public func AddChar(c: ImWchar): Unit {
        return ImFontGlyphRangesBuilder_AddChar(this, c)
    }

    public func AddRanges(ranges: Ref<ImWchar>): Unit {
        return ImFontGlyphRangesBuilder_AddRanges(this, ranges)
    }

    public func AddText(text: CStringConvertable, text_end: CStringConvertable): Unit {
        return ImFontGlyphRangesBuilder_AddText(this, text, text_end)
    }

    public func BuildRanges(out_ranges: ImVector_ImWchar): Unit {
        return ImFontGlyphRangesBuilder_BuildRanges(this, out_ranges)
    }

    public func Clear(): Unit {
        return ImFontGlyphRangesBuilder_Clear(this)
    }

    public func GetBit(n: UIntNative): Bool {
        return ImFontGlyphRangesBuilder_GetBit(this, n)
    }

    public func SetBit(n: UIntNative): Unit {
        return ImFontGlyphRangesBuilder_SetBit(this, n)
    }
}

public class ImGuiColorMod <: StructWrapper<capi.ImGuiColorMod> {
    public init(value!: ?capi.ImGuiColorMod, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiColorMod>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Col: ImGuiCol {
        get() {
            return unsafe { capi.access_ImGuiColorMod_Col(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiColorMod_Col(pointer).write(value) }
        }
    }

    public mut prop BackupValue: ImVec4 {
        get() {
            return unsafe { ImVec4(capi.access_ImGuiColorMod_BackupValue(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiColorMod_BackupValue(pointer).write(value.getCPointer().read()) }
        }
    }
}

public class ImGuiComboPreviewData <: StructWrapper<capi.ImGuiComboPreviewData> {
    public init(value!: ?capi.ImGuiComboPreviewData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiComboPreviewData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiComboPreviewData_ImGuiComboPreviewData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiComboPreviewData_destroy(this.pointer)
        }
    }

    public mut prop PreviewRect: ImRect {
        get() {
            return unsafe { ImRect(capi.access_ImGuiComboPreviewData_PreviewRect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiComboPreviewData_PreviewRect(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop BackupCursorPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiComboPreviewData_BackupCursorPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiComboPreviewData_BackupCursorPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop BackupCursorMaxPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiComboPreviewData_BackupCursorMaxPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiComboPreviewData_BackupCursorMaxPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop BackupCursorPosPrevLine: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiComboPreviewData_BackupCursorPosPrevLine(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiComboPreviewData_BackupCursorPosPrevLine(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop BackupPrevLineTextBaseOffset: Float32 {
        get() {
            return unsafe { capi.access_ImGuiComboPreviewData_BackupPrevLineTextBaseOffset(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiComboPreviewData_BackupPrevLineTextBaseOffset(pointer).write(value) }
        }
    }

    public mut prop BackupLayout: ImGuiLayoutType {
        get() {
            return unsafe { capi.access_ImGuiComboPreviewData_BackupLayout(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiComboPreviewData_BackupLayout(pointer).write(value) }
        }
    }
}

public class ImGuiContextHook <: StructWrapper<capi.ImGuiContextHook> {
    public init(value!: ?capi.ImGuiContextHook, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiContextHook>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiContextHook_ImGuiContextHook().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiContextHook_destroy(this.pointer)
        }
    }

    public mut prop HookId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiContextHook_HookId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiContextHook_HookId(pointer).write(value) }
        }
    }

    public mut prop Type: ImGuiContextHookType {
        get() {
            return unsafe { capi.access_ImGuiContextHook_Type(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiContextHook_Type(pointer).write(value) }
        }
    }

    public mut prop Owner: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiContextHook_Owner(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiContextHook_Owner(pointer).write(value) }
        }
    }

    public mut prop Callback: ImGuiContextHookCallback {
        get() {
            return unsafe { capi.access_ImGuiContextHook_Callback(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiContextHook_Callback(pointer).write(value) }
        }
    }

    public mut prop UserData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiContextHook_UserData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiContextHook_UserData(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImGuiDataTypeInfo <: StructWrapper<capi.ImGuiDataTypeInfo> {
    public init(value!: ?capi.ImGuiDataTypeInfo, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiDataTypeInfo>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: UIntNative {
        get() {
            return unsafe { capi.access_ImGuiDataTypeInfo_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiDataTypeInfo_Size(pointer).write(value) }
        }
    }

    public mut prop Name: String {
        get() {
            return unsafe { CString(capi.access_ImGuiDataTypeInfo_Name(pointer).read()).toString() }
        }

        set(value) {
            unsafe { capi.access_ImGuiDataTypeInfo_Name(pointer).write(value.asCString()) }
        }
    }

    public mut prop PrintFmt: String {
        get() {
            return unsafe { CString(capi.access_ImGuiDataTypeInfo_PrintFmt(pointer).read()).toString() }
        }

        set(value) {
            unsafe { capi.access_ImGuiDataTypeInfo_PrintFmt(pointer).write(value.asCString()) }
        }
    }

    public mut prop ScanFmt: String {
        get() {
            return unsafe { CString(capi.access_ImGuiDataTypeInfo_ScanFmt(pointer).read()).toString() }
        }

        set(value) {
            unsafe { capi.access_ImGuiDataTypeInfo_ScanFmt(pointer).write(value.asCString()) }
        }
    }
}

public class ImGuiDataTypeStorage <: StructWrapper<capi.ImGuiDataTypeStorage> {
    public init(value!: ?capi.ImGuiDataTypeStorage, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiDataTypeStorage>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Data: Ref<ImU8> {
        get() {
            return unsafe { Ref<ImU8>.unsafeMake(capi.access_ImGuiDataTypeStorage_Data(pointer).read(), count: 8, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }
}

public class ImGuiDataVarInfo <: StructWrapper<capi.ImGuiDataVarInfo> {
    public init(value!: ?capi.ImGuiDataVarInfo, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiDataVarInfo>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Type: ImGuiDataType {
        get() {
            return unsafe { capi.access_ImGuiDataVarInfo_Type(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiDataVarInfo_Type(pointer).write(value) }
        }
    }

    public mut prop Count: ImU32 {
        get() {
            return unsafe { capi.access_ImGuiDataVarInfo_Count(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiDataVarInfo_Count(pointer).write(value) }
        }
    }

    public mut prop Offset: ImU32 {
        get() {
            return unsafe { capi.access_ImGuiDataVarInfo_Offset(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiDataVarInfo_Offset(pointer).write(value) }
        }
    }

    public func GetVarPtr(parent: Ref<Unit>): Ref<Unit> {
        return ImGuiDataVarInfo_GetVarPtr(this, parent)
    }
}

public class ImGuiDebugAllocEntry <: StructWrapper<capi.ImGuiDebugAllocEntry> {
    public init(value!: ?capi.ImGuiDebugAllocEntry, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiDebugAllocEntry>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop FrameCount: Int32 {
        get() {
            return unsafe { capi.access_ImGuiDebugAllocEntry_FrameCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiDebugAllocEntry_FrameCount(pointer).write(value) }
        }
    }

    public mut prop AllocCount: ImS16 {
        get() {
            return unsafe { capi.access_ImGuiDebugAllocEntry_AllocCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiDebugAllocEntry_AllocCount(pointer).write(value) }
        }
    }

    public mut prop FreeCount: ImS16 {
        get() {
            return unsafe { capi.access_ImGuiDebugAllocEntry_FreeCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiDebugAllocEntry_FreeCount(pointer).write(value) }
        }
    }
}

public class ImGuiDebugAllocInfo <: StructWrapper<capi.ImGuiDebugAllocInfo> {
    public init(value!: ?capi.ImGuiDebugAllocInfo, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiDebugAllocInfo>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiDebugAllocInfo_ImGuiDebugAllocInfo().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiDebugAllocInfo_destroy(this.pointer)
        }
    }

    public mut prop TotalAllocCount: Int32 {
        get() {
            return unsafe { capi.access_ImGuiDebugAllocInfo_TotalAllocCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiDebugAllocInfo_TotalAllocCount(pointer).write(value) }
        }
    }

    public mut prop TotalFreeCount: Int32 {
        get() {
            return unsafe { capi.access_ImGuiDebugAllocInfo_TotalFreeCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiDebugAllocInfo_TotalFreeCount(pointer).write(value) }
        }
    }

    public mut prop LastEntriesIdx: ImS16 {
        get() {
            return unsafe { capi.access_ImGuiDebugAllocInfo_LastEntriesIdx(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiDebugAllocInfo_LastEntriesIdx(pointer).write(value) }
        }
    }

    public mut prop LastEntriesBuf: ImGuiDebugAllocEntry {
        get() {
            return unsafe { ImGuiDebugAllocEntry(capi.access_ImGuiDebugAllocInfo_LastEntriesBuf(pointer).read(), count: 6, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }
}

public class ImGuiDockContext <: StructWrapper<capi.ImGuiDockContext> {
    public init(value!: ?capi.ImGuiDockContext, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiDockContext>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiDockContext_ImGuiDockContext().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiDockContext_destroy(this.pointer)
        }
    }

    public mut prop Nodes: ImGuiStorage {
        get() {
            return unsafe { ImGuiStorage(capi.access_ImGuiDockContext_Nodes(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiDockContext_Nodes(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Requests: ImVector_ImGuiDockRequest {
        get() {
            return unsafe { ImVector_ImGuiDockRequest(capi.access_ImGuiDockContext_Requests(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiDockContext_Requests(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop NodesSettings: ImVector_ImGuiDockNodeSettings {
        get() {
            return unsafe { ImVector_ImGuiDockNodeSettings(capi.access_ImGuiDockContext_NodesSettings(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiDockContext_NodesSettings(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop WantFullRebuild: Bool {
        get() {
            return unsafe { capi.access_ImGuiDockContext_WantFullRebuild(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiDockContext_WantFullRebuild(pointer).write(value) }
        }
    }
}

public class ImGuiFocusScopeData <: StructWrapper<capi.ImGuiFocusScopeData> {
    public init(value!: ?capi.ImGuiFocusScopeData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiFocusScopeData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop ID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiFocusScopeData_ID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiFocusScopeData_ID(pointer).write(value) }
        }
    }

    public mut prop WindowID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiFocusScopeData_WindowID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiFocusScopeData_WindowID(pointer).write(value) }
        }
    }
}

public class ImGuiGroupData <: StructWrapper<capi.ImGuiGroupData> {
    public init(value!: ?capi.ImGuiGroupData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiGroupData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop WindowID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiGroupData_WindowID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiGroupData_WindowID(pointer).write(value) }
        }
    }

    public mut prop BackupCursorPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiGroupData_BackupCursorPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiGroupData_BackupCursorPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop BackupCursorMaxPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiGroupData_BackupCursorMaxPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiGroupData_BackupCursorMaxPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop BackupCursorPosPrevLine: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiGroupData_BackupCursorPosPrevLine(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiGroupData_BackupCursorPosPrevLine(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop BackupIndent: ImVec1 {
        get() {
            return unsafe { ImVec1(capi.access_ImGuiGroupData_BackupIndent(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiGroupData_BackupIndent(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop BackupGroupOffset: ImVec1 {
        get() {
            return unsafe { ImVec1(capi.access_ImGuiGroupData_BackupGroupOffset(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiGroupData_BackupGroupOffset(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop BackupCurrLineSize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiGroupData_BackupCurrLineSize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiGroupData_BackupCurrLineSize(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop BackupCurrLineTextBaseOffset: Float32 {
        get() {
            return unsafe { capi.access_ImGuiGroupData_BackupCurrLineTextBaseOffset(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiGroupData_BackupCurrLineTextBaseOffset(pointer).write(value) }
        }
    }

    public mut prop BackupActiveIdIsAlive: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiGroupData_BackupActiveIdIsAlive(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiGroupData_BackupActiveIdIsAlive(pointer).write(value) }
        }
    }

    public mut prop BackupActiveIdPreviousFrameIsAlive: Bool {
        get() {
            return unsafe { capi.access_ImGuiGroupData_BackupActiveIdPreviousFrameIsAlive(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiGroupData_BackupActiveIdPreviousFrameIsAlive(pointer).write(value) }
        }
    }

    public mut prop BackupHoveredIdIsAlive: Bool {
        get() {
            return unsafe { capi.access_ImGuiGroupData_BackupHoveredIdIsAlive(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiGroupData_BackupHoveredIdIsAlive(pointer).write(value) }
        }
    }

    public mut prop BackupIsSameLine: Bool {
        get() {
            return unsafe { capi.access_ImGuiGroupData_BackupIsSameLine(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiGroupData_BackupIsSameLine(pointer).write(value) }
        }
    }

    public mut prop EmitItem: Bool {
        get() {
            return unsafe { capi.access_ImGuiGroupData_EmitItem(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiGroupData_EmitItem(pointer).write(value) }
        }
    }
}

public class ImGuiIDStackTool <: StructWrapper<capi.ImGuiIDStackTool> {
    public init(value!: ?capi.ImGuiIDStackTool, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiIDStackTool>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiIDStackTool_ImGuiIDStackTool().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiIDStackTool_destroy(this.pointer)
        }
    }

    public mut prop LastActiveFrame: Int32 {
        get() {
            return unsafe { capi.access_ImGuiIDStackTool_LastActiveFrame(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIDStackTool_LastActiveFrame(pointer).write(value) }
        }
    }

    public mut prop StackLevel: Int32 {
        get() {
            return unsafe { capi.access_ImGuiIDStackTool_StackLevel(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIDStackTool_StackLevel(pointer).write(value) }
        }
    }

    public mut prop QueryId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiIDStackTool_QueryId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIDStackTool_QueryId(pointer).write(value) }
        }
    }

    public mut prop Results: ImVector_ImGuiStackLevelInfo {
        get() {
            return unsafe { ImVector_ImGuiStackLevelInfo(capi.access_ImGuiIDStackTool_Results(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiIDStackTool_Results(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop CopyToClipboardOnCtrlC: Bool {
        get() {
            return unsafe { capi.access_ImGuiIDStackTool_CopyToClipboardOnCtrlC(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIDStackTool_CopyToClipboardOnCtrlC(pointer).write(value) }
        }
    }

    public mut prop CopyToClipboardLastTime: Float32 {
        get() {
            return unsafe { capi.access_ImGuiIDStackTool_CopyToClipboardLastTime(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIDStackTool_CopyToClipboardLastTime(pointer).write(value) }
        }
    }
}

public class ImGuiIO <: StructWrapper<capi.ImGuiIO> {
    public init(value!: ?capi.ImGuiIO, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiIO>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiIO_ImGuiIO().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiIO_destroy(this.pointer)
        }
    }

    public mut prop ConfigFlags: ImGuiConfigFlags {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigFlags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigFlags(pointer).write(value) }
        }
    }

    public mut prop BackendFlags: ImGuiBackendFlags {
        get() {
            return unsafe { capi.access_ImGuiIO_BackendFlags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_BackendFlags(pointer).write(value) }
        }
    }

    public mut prop DisplaySize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiIO_DisplaySize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_DisplaySize(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop DeltaTime: Float32 {
        get() {
            return unsafe { capi.access_ImGuiIO_DeltaTime(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_DeltaTime(pointer).write(value) }
        }
    }

    public mut prop IniSavingRate: Float32 {
        get() {
            return unsafe { capi.access_ImGuiIO_IniSavingRate(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_IniSavingRate(pointer).write(value) }
        }
    }

    public mut prop IniFilename: String {
        get() {
            return unsafe { CString(capi.access_ImGuiIO_IniFilename(pointer).read()).toString() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_IniFilename(pointer).write(value.asCString()) }
        }
    }

    public mut prop LogFilename: String {
        get() {
            return unsafe { CString(capi.access_ImGuiIO_LogFilename(pointer).read()).toString() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_LogFilename(pointer).write(value.asCString()) }
        }
    }

    public mut prop UserData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiIO_UserData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_UserData(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop Fonts: ImFontAtlas {
        get() {
            return unsafe { ImFontAtlas(capi.access_ImGuiIO_Fonts(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_Fonts(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop FontGlobalScale: Float32 {
        get() {
            return unsafe { capi.access_ImGuiIO_FontGlobalScale(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_FontGlobalScale(pointer).write(value) }
        }
    }

    public mut prop FontAllowUserScaling: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_FontAllowUserScaling(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_FontAllowUserScaling(pointer).write(value) }
        }
    }

    public mut prop FontDefault: ImFont {
        get() {
            return unsafe { ImFont(capi.access_ImGuiIO_FontDefault(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_FontDefault(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop DisplayFramebufferScale: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiIO_DisplayFramebufferScale(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_DisplayFramebufferScale(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop ConfigDockingNoSplit: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigDockingNoSplit(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigDockingNoSplit(pointer).write(value) }
        }
    }

    public mut prop ConfigDockingWithShift: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigDockingWithShift(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigDockingWithShift(pointer).write(value) }
        }
    }

    public mut prop ConfigDockingAlwaysTabBar: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigDockingAlwaysTabBar(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigDockingAlwaysTabBar(pointer).write(value) }
        }
    }

    public mut prop ConfigDockingTransparentPayload: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigDockingTransparentPayload(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigDockingTransparentPayload(pointer).write(value) }
        }
    }

    public mut prop ConfigViewportsNoAutoMerge: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigViewportsNoAutoMerge(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigViewportsNoAutoMerge(pointer).write(value) }
        }
    }

    public mut prop ConfigViewportsNoTaskBarIcon: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigViewportsNoTaskBarIcon(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigViewportsNoTaskBarIcon(pointer).write(value) }
        }
    }

    public mut prop ConfigViewportsNoDecoration: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigViewportsNoDecoration(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigViewportsNoDecoration(pointer).write(value) }
        }
    }

    public mut prop ConfigViewportsNoDefaultParent: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigViewportsNoDefaultParent(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigViewportsNoDefaultParent(pointer).write(value) }
        }
    }

    public mut prop MouseDrawCursor: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_MouseDrawCursor(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MouseDrawCursor(pointer).write(value) }
        }
    }

    public mut prop ConfigMacOSXBehaviors: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigMacOSXBehaviors(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigMacOSXBehaviors(pointer).write(value) }
        }
    }

    public mut prop ConfigInputTrickleEventQueue: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigInputTrickleEventQueue(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigInputTrickleEventQueue(pointer).write(value) }
        }
    }

    public mut prop ConfigInputTextCursorBlink: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigInputTextCursorBlink(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigInputTextCursorBlink(pointer).write(value) }
        }
    }

    public mut prop ConfigInputTextEnterKeepActive: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigInputTextEnterKeepActive(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigInputTextEnterKeepActive(pointer).write(value) }
        }
    }

    public mut prop ConfigDragClickToInputText: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigDragClickToInputText(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigDragClickToInputText(pointer).write(value) }
        }
    }

    public mut prop ConfigWindowsResizeFromEdges: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigWindowsResizeFromEdges(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigWindowsResizeFromEdges(pointer).write(value) }
        }
    }

    public mut prop ConfigWindowsMoveFromTitleBarOnly: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigWindowsMoveFromTitleBarOnly(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigWindowsMoveFromTitleBarOnly(pointer).write(value) }
        }
    }

    public mut prop ConfigMemoryCompactTimer: Float32 {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigMemoryCompactTimer(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigMemoryCompactTimer(pointer).write(value) }
        }
    }

    public mut prop MouseDoubleClickTime: Float32 {
        get() {
            return unsafe { capi.access_ImGuiIO_MouseDoubleClickTime(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MouseDoubleClickTime(pointer).write(value) }
        }
    }

    public mut prop MouseDoubleClickMaxDist: Float32 {
        get() {
            return unsafe { capi.access_ImGuiIO_MouseDoubleClickMaxDist(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MouseDoubleClickMaxDist(pointer).write(value) }
        }
    }

    public mut prop MouseDragThreshold: Float32 {
        get() {
            return unsafe { capi.access_ImGuiIO_MouseDragThreshold(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MouseDragThreshold(pointer).write(value) }
        }
    }

    public mut prop KeyRepeatDelay: Float32 {
        get() {
            return unsafe { capi.access_ImGuiIO_KeyRepeatDelay(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_KeyRepeatDelay(pointer).write(value) }
        }
    }

    public mut prop KeyRepeatRate: Float32 {
        get() {
            return unsafe { capi.access_ImGuiIO_KeyRepeatRate(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_KeyRepeatRate(pointer).write(value) }
        }
    }

    public mut prop ConfigDebugIsDebuggerPresent: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigDebugIsDebuggerPresent(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigDebugIsDebuggerPresent(pointer).write(value) }
        }
    }

    public mut prop ConfigDebugBeginReturnValueOnce: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigDebugBeginReturnValueOnce(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigDebugBeginReturnValueOnce(pointer).write(value) }
        }
    }

    public mut prop ConfigDebugBeginReturnValueLoop: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigDebugBeginReturnValueLoop(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigDebugBeginReturnValueLoop(pointer).write(value) }
        }
    }

    public mut prop ConfigDebugIgnoreFocusLoss: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigDebugIgnoreFocusLoss(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigDebugIgnoreFocusLoss(pointer).write(value) }
        }
    }

    public mut prop ConfigDebugIniSettings: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_ConfigDebugIniSettings(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ConfigDebugIniSettings(pointer).write(value) }
        }
    }

    public mut prop BackendPlatformName: String {
        get() {
            return unsafe { CString(capi.access_ImGuiIO_BackendPlatformName(pointer).read()).toString() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_BackendPlatformName(pointer).write(value.asCString()) }
        }
    }

    public mut prop BackendRendererName: String {
        get() {
            return unsafe { CString(capi.access_ImGuiIO_BackendRendererName(pointer).read()).toString() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_BackendRendererName(pointer).write(value.asCString()) }
        }
    }

    public mut prop BackendPlatformUserData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiIO_BackendPlatformUserData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_BackendPlatformUserData(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop BackendRendererUserData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiIO_BackendRendererUserData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_BackendRendererUserData(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop BackendLanguageUserData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiIO_BackendLanguageUserData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_BackendLanguageUserData(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop GetClipboardTextFn: CFunc<(user_data: CPointer<Unit>) -> CPointer<UInt8>> {
        get() {
            return unsafe { capi.access_ImGuiIO_GetClipboardTextFn(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_GetClipboardTextFn(pointer).write(value) }
        }
    }

    public mut prop SetClipboardTextFn: CFunc<(user_data: CPointer<Unit>, text: CPointer<UInt8>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiIO_SetClipboardTextFn(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_SetClipboardTextFn(pointer).write(value) }
        }
    }

    public mut prop ClipboardUserData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiIO_ClipboardUserData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_ClipboardUserData(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop SetPlatformImeDataFn: CFunc<(viewport: CPointer<capi.ImGuiViewport>, data: CPointer<capi.ImGuiPlatformImeData>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiIO_SetPlatformImeDataFn(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_SetPlatformImeDataFn(pointer).write(value) }
        }
    }

    public mut prop PlatformLocaleDecimalPoint: ImWchar {
        get() {
            return unsafe { capi.access_ImGuiIO_PlatformLocaleDecimalPoint(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_PlatformLocaleDecimalPoint(pointer).write(value) }
        }
    }

    public mut prop WantCaptureMouse: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_WantCaptureMouse(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_WantCaptureMouse(pointer).write(value) }
        }
    }

    public mut prop WantCaptureKeyboard: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_WantCaptureKeyboard(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_WantCaptureKeyboard(pointer).write(value) }
        }
    }

    public mut prop WantTextInput: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_WantTextInput(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_WantTextInput(pointer).write(value) }
        }
    }

    public mut prop WantSetMousePos: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_WantSetMousePos(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_WantSetMousePos(pointer).write(value) }
        }
    }

    public mut prop WantSaveIniSettings: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_WantSaveIniSettings(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_WantSaveIniSettings(pointer).write(value) }
        }
    }

    public mut prop NavActive: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_NavActive(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_NavActive(pointer).write(value) }
        }
    }

    public mut prop NavVisible: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_NavVisible(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_NavVisible(pointer).write(value) }
        }
    }

    public mut prop Framerate: Float32 {
        get() {
            return unsafe { capi.access_ImGuiIO_Framerate(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_Framerate(pointer).write(value) }
        }
    }

    public mut prop MetricsRenderVertices: Int32 {
        get() {
            return unsafe { capi.access_ImGuiIO_MetricsRenderVertices(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MetricsRenderVertices(pointer).write(value) }
        }
    }

    public mut prop MetricsRenderIndices: Int32 {
        get() {
            return unsafe { capi.access_ImGuiIO_MetricsRenderIndices(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MetricsRenderIndices(pointer).write(value) }
        }
    }

    public mut prop MetricsRenderWindows: Int32 {
        get() {
            return unsafe { capi.access_ImGuiIO_MetricsRenderWindows(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MetricsRenderWindows(pointer).write(value) }
        }
    }

    public mut prop MetricsActiveWindows: Int32 {
        get() {
            return unsafe { capi.access_ImGuiIO_MetricsActiveWindows(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MetricsActiveWindows(pointer).write(value) }
        }
    }

    public mut prop MouseDelta: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiIO_MouseDelta(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MouseDelta(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Ctx: Ref<ImGuiContext> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiIO_Ctx(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_Ctx(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop MousePos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiIO_MousePos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MousePos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop MouseDown: Ref<Bool> {
        get() {
            return unsafe { Ref<Bool>.unsafeMake(capi.access_ImGuiIO_MouseDown(pointer).read(), count: 5, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop MouseWheel: Float32 {
        get() {
            return unsafe { capi.access_ImGuiIO_MouseWheel(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MouseWheel(pointer).write(value) }
        }
    }

    public mut prop MouseWheelH: Float32 {
        get() {
            return unsafe { capi.access_ImGuiIO_MouseWheelH(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MouseWheelH(pointer).write(value) }
        }
    }

    public mut prop MouseSource: ImGuiMouseSource {
        get() {
            return unsafe { capi.access_ImGuiIO_MouseSource(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MouseSource(pointer).write(value) }
        }
    }

    public mut prop MouseHoveredViewport: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiIO_MouseHoveredViewport(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MouseHoveredViewport(pointer).write(value) }
        }
    }

    public mut prop KeyCtrl: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_KeyCtrl(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_KeyCtrl(pointer).write(value) }
        }
    }

    public mut prop KeyShift: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_KeyShift(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_KeyShift(pointer).write(value) }
        }
    }

    public mut prop KeyAlt: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_KeyAlt(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_KeyAlt(pointer).write(value) }
        }
    }

    public mut prop KeySuper: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_KeySuper(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_KeySuper(pointer).write(value) }
        }
    }

    public mut prop KeyMods: ImGuiKeyChord {
        get() {
            return unsafe { capi.access_ImGuiIO_KeyMods(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_KeyMods(pointer).write(value) }
        }
    }

    public mut prop KeysData: ImGuiKeyData {
        get() {
            return unsafe { ImGuiKeyData(capi.access_ImGuiIO_KeysData(pointer).read(), count: 154, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop WantCaptureMouseUnlessPopupClose: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_WantCaptureMouseUnlessPopupClose(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_WantCaptureMouseUnlessPopupClose(pointer).write(value) }
        }
    }

    public mut prop MousePosPrev: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiIO_MousePosPrev(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MousePosPrev(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop MouseClickedPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiIO_MouseClickedPos(pointer).read(), count: 5, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop MouseClickedTime: Ref<Float64> {
        get() {
            return unsafe { Ref<Float64>.unsafeMake(capi.access_ImGuiIO_MouseClickedTime(pointer).read(), count: 5, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop MouseClicked: Ref<Bool> {
        get() {
            return unsafe { Ref<Bool>.unsafeMake(capi.access_ImGuiIO_MouseClicked(pointer).read(), count: 5, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop MouseDoubleClicked: Ref<Bool> {
        get() {
            return unsafe { Ref<Bool>.unsafeMake(capi.access_ImGuiIO_MouseDoubleClicked(pointer).read(), count: 5, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop MouseClickedCount: Ref<ImU16> {
        get() {
            return unsafe { Ref<ImU16>.unsafeMake(capi.access_ImGuiIO_MouseClickedCount(pointer).read(), count: 5, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop MouseClickedLastCount: Ref<ImU16> {
        get() {
            return unsafe { Ref<ImU16>.unsafeMake(capi.access_ImGuiIO_MouseClickedLastCount(pointer).read(), count: 5, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop MouseReleased: Ref<Bool> {
        get() {
            return unsafe { Ref<Bool>.unsafeMake(capi.access_ImGuiIO_MouseReleased(pointer).read(), count: 5, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop MouseDownOwned: Ref<Bool> {
        get() {
            return unsafe { Ref<Bool>.unsafeMake(capi.access_ImGuiIO_MouseDownOwned(pointer).read(), count: 5, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop MouseDownOwnedUnlessPopupClose: Ref<Bool> {
        get() {
            return unsafe { Ref<Bool>.unsafeMake(capi.access_ImGuiIO_MouseDownOwnedUnlessPopupClose(pointer).read(), count: 5, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop MouseWheelRequestAxisSwap: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_MouseWheelRequestAxisSwap(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MouseWheelRequestAxisSwap(pointer).write(value) }
        }
    }

    public mut prop MouseCtrlLeftAsRightClick: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_MouseCtrlLeftAsRightClick(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_MouseCtrlLeftAsRightClick(pointer).write(value) }
        }
    }

    public mut prop MouseDownDuration: Ref<Float32> {
        get() {
            return unsafe { Ref<Float32>.unsafeMake(capi.access_ImGuiIO_MouseDownDuration(pointer).read(), count: 5, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop MouseDownDurationPrev: Ref<Float32> {
        get() {
            return unsafe { Ref<Float32>.unsafeMake(capi.access_ImGuiIO_MouseDownDurationPrev(pointer).read(), count: 5, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop MouseDragMaxDistanceAbs: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiIO_MouseDragMaxDistanceAbs(pointer).read(), count: 5, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop MouseDragMaxDistanceSqr: Ref<Float32> {
        get() {
            return unsafe { Ref<Float32>.unsafeMake(capi.access_ImGuiIO_MouseDragMaxDistanceSqr(pointer).read(), count: 5, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop PenPressure: Float32 {
        get() {
            return unsafe { capi.access_ImGuiIO_PenPressure(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_PenPressure(pointer).write(value) }
        }
    }

    public mut prop AppFocusLost: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_AppFocusLost(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_AppFocusLost(pointer).write(value) }
        }
    }

    public mut prop AppAcceptingEvents: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_AppAcceptingEvents(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_AppAcceptingEvents(pointer).write(value) }
        }
    }

    public mut prop BackendUsingLegacyKeyArrays: ImS8 {
        get() {
            return unsafe { capi.access_ImGuiIO_BackendUsingLegacyKeyArrays(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_BackendUsingLegacyKeyArrays(pointer).write(value) }
        }
    }

    public mut prop BackendUsingLegacyNavInputArray: Bool {
        get() {
            return unsafe { capi.access_ImGuiIO_BackendUsingLegacyNavInputArray(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_BackendUsingLegacyNavInputArray(pointer).write(value) }
        }
    }

    public mut prop InputQueueSurrogate: ImWchar16 {
        get() {
            return unsafe { capi.access_ImGuiIO_InputQueueSurrogate(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_InputQueueSurrogate(pointer).write(value) }
        }
    }

    public mut prop InputQueueCharacters: ImVector_ImWchar {
        get() {
            return unsafe { ImVector_ImWchar(capi.access_ImGuiIO_InputQueueCharacters(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiIO_InputQueueCharacters(pointer).write(value.getCPointer().read()) }
        }
    }

    public func AddFocusEvent(focused: Bool): Unit {
        return ImGuiIO_AddFocusEvent(this, focused)
    }

    public func AddInputCharacter(c: UInt32): Unit {
        return ImGuiIO_AddInputCharacter(this, c)
    }

    public func AddInputCharacterUTF16(c: ImWchar16): Unit {
        return ImGuiIO_AddInputCharacterUTF16(this, c)
    }

    public func AddInputCharactersUTF8(str: CStringConvertable): Unit {
        return ImGuiIO_AddInputCharactersUTF8(this, str)
    }

    public func AddKeyAnalogEvent(key: ImGuiKey, down: Bool, v: Float32): Unit {
        return ImGuiIO_AddKeyAnalogEvent(this, key, down, v)
    }

    public func AddKeyEvent(key: ImGuiKey, down: Bool): Unit {
        return ImGuiIO_AddKeyEvent(this, key, down)
    }

    public func AddMouseButtonEvent(button: Int32, down: Bool): Unit {
        return ImGuiIO_AddMouseButtonEvent(this, button, down)
    }

    public func AddMousePosEvent(x: Float32, y: Float32): Unit {
        return ImGuiIO_AddMousePosEvent(this, x, y)
    }

    public func AddMouseSourceEvent(source: ImGuiMouseSource): Unit {
        return ImGuiIO_AddMouseSourceEvent(this, source)
    }

    public func AddMouseViewportEvent(id: ImGuiID): Unit {
        return ImGuiIO_AddMouseViewportEvent(this, id)
    }

    public func AddMouseWheelEvent(wheel_x: Float32, wheel_y: Float32): Unit {
        return ImGuiIO_AddMouseWheelEvent(this, wheel_x, wheel_y)
    }

    public func ClearEventsQueue(): Unit {
        return ImGuiIO_ClearEventsQueue(this)
    }

    public func ClearInputKeys(): Unit {
        return ImGuiIO_ClearInputKeys(this)
    }

    public func SetAppAcceptingEvents(accepting_events: Bool): Unit {
        return ImGuiIO_SetAppAcceptingEvents(this, accepting_events)
    }

    public func SetKeyEventNativeData(key: ImGuiKey, native_keycode: Int32, native_scancode: Int32, native_legacy_index: Int32): Unit {
        return ImGuiIO_SetKeyEventNativeData(this, key, native_keycode, native_scancode, native_legacy_index)
    }
}

public class ImGuiInputEventAppFocused <: StructWrapper<capi.ImGuiInputEventAppFocused> {
    public init(value!: ?capi.ImGuiInputEventAppFocused, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiInputEventAppFocused>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Focused: Bool {
        get() {
            return unsafe { capi.access_ImGuiInputEventAppFocused_Focused(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputEventAppFocused_Focused(pointer).write(value) }
        }
    }
}

public class ImGuiInputEventKey <: StructWrapper<capi.ImGuiInputEventKey> {
    public init(value!: ?capi.ImGuiInputEventKey, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiInputEventKey>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Key: ImGuiKey {
        get() {
            return unsafe { capi.access_ImGuiInputEventKey_Key(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputEventKey_Key(pointer).write(value) }
        }
    }

    public mut prop Down: Bool {
        get() {
            return unsafe { capi.access_ImGuiInputEventKey_Down(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputEventKey_Down(pointer).write(value) }
        }
    }

    public mut prop AnalogValue: Float32 {
        get() {
            return unsafe { capi.access_ImGuiInputEventKey_AnalogValue(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputEventKey_AnalogValue(pointer).write(value) }
        }
    }
}

public class ImGuiInputEventMouseButton <: StructWrapper<capi.ImGuiInputEventMouseButton> {
    public init(value!: ?capi.ImGuiInputEventMouseButton, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiInputEventMouseButton>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Button: Int32 {
        get() {
            return unsafe { capi.access_ImGuiInputEventMouseButton_Button(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputEventMouseButton_Button(pointer).write(value) }
        }
    }

    public mut prop Down: Bool {
        get() {
            return unsafe { capi.access_ImGuiInputEventMouseButton_Down(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputEventMouseButton_Down(pointer).write(value) }
        }
    }

    public mut prop MouseSource: ImGuiMouseSource {
        get() {
            return unsafe { capi.access_ImGuiInputEventMouseButton_MouseSource(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputEventMouseButton_MouseSource(pointer).write(value) }
        }
    }
}

public class ImGuiInputEventMousePos <: StructWrapper<capi.ImGuiInputEventMousePos> {
    public init(value!: ?capi.ImGuiInputEventMousePos, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiInputEventMousePos>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop PosX: Float32 {
        get() {
            return unsafe { capi.access_ImGuiInputEventMousePos_PosX(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputEventMousePos_PosX(pointer).write(value) }
        }
    }

    public mut prop PosY: Float32 {
        get() {
            return unsafe { capi.access_ImGuiInputEventMousePos_PosY(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputEventMousePos_PosY(pointer).write(value) }
        }
    }

    public mut prop MouseSource: ImGuiMouseSource {
        get() {
            return unsafe { capi.access_ImGuiInputEventMousePos_MouseSource(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputEventMousePos_MouseSource(pointer).write(value) }
        }
    }
}

public class ImGuiInputEventMouseViewport <: StructWrapper<capi.ImGuiInputEventMouseViewport> {
    public init(value!: ?capi.ImGuiInputEventMouseViewport, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiInputEventMouseViewport>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop HoveredViewportID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiInputEventMouseViewport_HoveredViewportID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputEventMouseViewport_HoveredViewportID(pointer).write(value) }
        }
    }
}

public class ImGuiInputEventMouseWheel <: StructWrapper<capi.ImGuiInputEventMouseWheel> {
    public init(value!: ?capi.ImGuiInputEventMouseWheel, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiInputEventMouseWheel>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop WheelX: Float32 {
        get() {
            return unsafe { capi.access_ImGuiInputEventMouseWheel_WheelX(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputEventMouseWheel_WheelX(pointer).write(value) }
        }
    }

    public mut prop WheelY: Float32 {
        get() {
            return unsafe { capi.access_ImGuiInputEventMouseWheel_WheelY(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputEventMouseWheel_WheelY(pointer).write(value) }
        }
    }

    public mut prop MouseSource: ImGuiMouseSource {
        get() {
            return unsafe { capi.access_ImGuiInputEventMouseWheel_MouseSource(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputEventMouseWheel_MouseSource(pointer).write(value) }
        }
    }
}

public class ImGuiInputEventText <: StructWrapper<capi.ImGuiInputEventText> {
    public init(value!: ?capi.ImGuiInputEventText, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiInputEventText>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop `Char`: UInt32 {
        get() {
            return unsafe { capi.access_ImGuiInputEventText_Char(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputEventText_Char(pointer).write(value) }
        }
    }
}

public class ImGuiInputTextCallbackData <: StructWrapper<capi.ImGuiInputTextCallbackData> {
    public init(value!: ?capi.ImGuiInputTextCallbackData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiInputTextCallbackData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiInputTextCallbackData_ImGuiInputTextCallbackData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiInputTextCallbackData_destroy(this.pointer)
        }
    }

    public mut prop Ctx: Ref<ImGuiContext> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiInputTextCallbackData_Ctx(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextCallbackData_Ctx(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop EventFlag: ImGuiInputTextFlags {
        get() {
            return unsafe { capi.access_ImGuiInputTextCallbackData_EventFlag(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextCallbackData_EventFlag(pointer).write(value) }
        }
    }

    public mut prop Flags: ImGuiInputTextFlags {
        get() {
            return unsafe { capi.access_ImGuiInputTextCallbackData_Flags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextCallbackData_Flags(pointer).write(value) }
        }
    }

    public mut prop UserData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiInputTextCallbackData_UserData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextCallbackData_UserData(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop EventChar: ImWchar {
        get() {
            return unsafe { capi.access_ImGuiInputTextCallbackData_EventChar(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextCallbackData_EventChar(pointer).write(value) }
        }
    }

    public mut prop EventKey: ImGuiKey {
        get() {
            return unsafe { capi.access_ImGuiInputTextCallbackData_EventKey(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextCallbackData_EventKey(pointer).write(value) }
        }
    }

    public mut prop Buf: String {
        get() {
            return unsafe { CString(capi.access_ImGuiInputTextCallbackData_Buf(pointer).read()).toString() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextCallbackData_Buf(pointer).write(value.asCString()) }
        }
    }

    public mut prop BufTextLen: Int32 {
        get() {
            return unsafe { capi.access_ImGuiInputTextCallbackData_BufTextLen(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextCallbackData_BufTextLen(pointer).write(value) }
        }
    }

    public mut prop BufSize: Int32 {
        get() {
            return unsafe { capi.access_ImGuiInputTextCallbackData_BufSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextCallbackData_BufSize(pointer).write(value) }
        }
    }

    public mut prop BufDirty: Bool {
        get() {
            return unsafe { capi.access_ImGuiInputTextCallbackData_BufDirty(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextCallbackData_BufDirty(pointer).write(value) }
        }
    }

    public mut prop CursorPos: Int32 {
        get() {
            return unsafe { capi.access_ImGuiInputTextCallbackData_CursorPos(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextCallbackData_CursorPos(pointer).write(value) }
        }
    }

    public mut prop SelectionStart: Int32 {
        get() {
            return unsafe { capi.access_ImGuiInputTextCallbackData_SelectionStart(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextCallbackData_SelectionStart(pointer).write(value) }
        }
    }

    public mut prop SelectionEnd: Int32 {
        get() {
            return unsafe { capi.access_ImGuiInputTextCallbackData_SelectionEnd(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextCallbackData_SelectionEnd(pointer).write(value) }
        }
    }

    public func ClearSelection(): Unit {
        return ImGuiInputTextCallbackData_ClearSelection(this)
    }

    public func DeleteChars(pos: Int32, bytes_count: Int32): Unit {
        return ImGuiInputTextCallbackData_DeleteChars(this, pos, bytes_count)
    }

    public func HasSelection(): Bool {
        return ImGuiInputTextCallbackData_HasSelection(this)
    }

    public func InsertChars(pos: Int32, text: CStringConvertable, text_end: CStringConvertable): Unit {
        return ImGuiInputTextCallbackData_InsertChars(this, pos, text, text_end)
    }

    public func SelectAll(): Unit {
        return ImGuiInputTextCallbackData_SelectAll(this)
    }
}

public class ImGuiInputTextDeactivatedState <: StructWrapper<capi.ImGuiInputTextDeactivatedState> {
    public init(value!: ?capi.ImGuiInputTextDeactivatedState, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiInputTextDeactivatedState>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiInputTextDeactivatedState_destroy(this.pointer)
        }
    }

    public mut prop ID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiInputTextDeactivatedState_ID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextDeactivatedState_ID(pointer).write(value) }
        }
    }

    public mut prop TextA: ImVector_char {
        get() {
            return unsafe { ImVector_char(capi.access_ImGuiInputTextDeactivatedState_TextA(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextDeactivatedState_TextA(pointer).write(value.getCPointer().read()) }
        }
    }

    public func ClearFreeMemory(): Unit {
        return ImGuiInputTextDeactivatedState_ClearFreeMemory(this)
    }
}

public class ImGuiInputTextState <: StructWrapper<capi.ImGuiInputTextState> {
    public init(value!: ?capi.ImGuiInputTextState, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiInputTextState>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiInputTextState_ImGuiInputTextState().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiInputTextState_destroy(this.pointer)
        }
    }

    public mut prop Ctx: Ref<ImGuiContext> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiInputTextState_Ctx(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_Ctx(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop ID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiInputTextState_ID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_ID(pointer).write(value) }
        }
    }

    public mut prop CurLenW: Int32 {
        get() {
            return unsafe { capi.access_ImGuiInputTextState_CurLenW(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_CurLenW(pointer).write(value) }
        }
    }

    public mut prop CurLenA: Int32 {
        get() {
            return unsafe { capi.access_ImGuiInputTextState_CurLenA(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_CurLenA(pointer).write(value) }
        }
    }

    public mut prop TextW: ImVector_ImWchar {
        get() {
            return unsafe { ImVector_ImWchar(capi.access_ImGuiInputTextState_TextW(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_TextW(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop TextA: ImVector_char {
        get() {
            return unsafe { ImVector_char(capi.access_ImGuiInputTextState_TextA(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_TextA(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop InitialTextA: ImVector_char {
        get() {
            return unsafe { ImVector_char(capi.access_ImGuiInputTextState_InitialTextA(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_InitialTextA(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop TextAIsValid: Bool {
        get() {
            return unsafe { capi.access_ImGuiInputTextState_TextAIsValid(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_TextAIsValid(pointer).write(value) }
        }
    }

    public mut prop BufCapacityA: Int32 {
        get() {
            return unsafe { capi.access_ImGuiInputTextState_BufCapacityA(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_BufCapacityA(pointer).write(value) }
        }
    }

    public mut prop ScrollX: Float32 {
        get() {
            return unsafe { capi.access_ImGuiInputTextState_ScrollX(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_ScrollX(pointer).write(value) }
        }
    }

    public mut prop Stb: STB_TexteditState {
        get() {
            return unsafe { STB_TexteditState(capi.access_ImGuiInputTextState_Stb(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_Stb(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop CursorAnim: Float32 {
        get() {
            return unsafe { capi.access_ImGuiInputTextState_CursorAnim(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_CursorAnim(pointer).write(value) }
        }
    }

    public mut prop CursorFollow: Bool {
        get() {
            return unsafe { capi.access_ImGuiInputTextState_CursorFollow(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_CursorFollow(pointer).write(value) }
        }
    }

    public mut prop SelectedAllMouseLock: Bool {
        get() {
            return unsafe { capi.access_ImGuiInputTextState_SelectedAllMouseLock(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_SelectedAllMouseLock(pointer).write(value) }
        }
    }

    public mut prop Edited: Bool {
        get() {
            return unsafe { capi.access_ImGuiInputTextState_Edited(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_Edited(pointer).write(value) }
        }
    }

    public mut prop Flags: ImGuiInputTextFlags {
        get() {
            return unsafe { capi.access_ImGuiInputTextState_Flags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_Flags(pointer).write(value) }
        }
    }

    public mut prop ReloadUserBuf: Bool {
        get() {
            return unsafe { capi.access_ImGuiInputTextState_ReloadUserBuf(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_ReloadUserBuf(pointer).write(value) }
        }
    }

    public mut prop ReloadSelectionStart: Int32 {
        get() {
            return unsafe { capi.access_ImGuiInputTextState_ReloadSelectionStart(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_ReloadSelectionStart(pointer).write(value) }
        }
    }

    public mut prop ReloadSelectionEnd: Int32 {
        get() {
            return unsafe { capi.access_ImGuiInputTextState_ReloadSelectionEnd(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiInputTextState_ReloadSelectionEnd(pointer).write(value) }
        }
    }

    public func ClearFreeMemory(): Unit {
        return ImGuiInputTextState_ClearFreeMemory(this)
    }

    public func ClearSelection(): Unit {
        return ImGuiInputTextState_ClearSelection(this)
    }

    public func ClearText(): Unit {
        return ImGuiInputTextState_ClearText(this)
    }

    public func CursorAnimReset(): Unit {
        return ImGuiInputTextState_CursorAnimReset(this)
    }

    public func CursorClamp(): Unit {
        return ImGuiInputTextState_CursorClamp(this)
    }

    public func GetCursorPos(): Int32 {
        return ImGuiInputTextState_GetCursorPos(this)
    }

    public func GetRedoAvailCount(): Int32 {
        return ImGuiInputTextState_GetRedoAvailCount(this)
    }

    public func GetSelectionEnd(): Int32 {
        return ImGuiInputTextState_GetSelectionEnd(this)
    }

    public func GetSelectionStart(): Int32 {
        return ImGuiInputTextState_GetSelectionStart(this)
    }

    public func GetUndoAvailCount(): Int32 {
        return ImGuiInputTextState_GetUndoAvailCount(this)
    }

    public func HasSelection(): Bool {
        return ImGuiInputTextState_HasSelection(this)
    }

    public func OnKeyPressed(key: Int32): Unit {
        return ImGuiInputTextState_OnKeyPressed(this, key)
    }

    public func ReloadUserBufAndKeepSelection(): Unit {
        return ImGuiInputTextState_ReloadUserBufAndKeepSelection(this)
    }

    public func ReloadUserBufAndMoveToEnd(): Unit {
        return ImGuiInputTextState_ReloadUserBufAndMoveToEnd(this)
    }

    public func ReloadUserBufAndSelectAll(): Unit {
        return ImGuiInputTextState_ReloadUserBufAndSelectAll(this)
    }

    public func SelectAll(): Unit {
        return ImGuiInputTextState_SelectAll(this)
    }
}

public class ImGuiKeyData <: StructWrapper<capi.ImGuiKeyData> {
    public init(value!: ?capi.ImGuiKeyData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiKeyData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Down: Bool {
        get() {
            return unsafe { capi.access_ImGuiKeyData_Down(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyData_Down(pointer).write(value) }
        }
    }

    public mut prop DownDuration: Float32 {
        get() {
            return unsafe { capi.access_ImGuiKeyData_DownDuration(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyData_DownDuration(pointer).write(value) }
        }
    }

    public mut prop DownDurationPrev: Float32 {
        get() {
            return unsafe { capi.access_ImGuiKeyData_DownDurationPrev(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyData_DownDurationPrev(pointer).write(value) }
        }
    }

    public mut prop AnalogValue: Float32 {
        get() {
            return unsafe { capi.access_ImGuiKeyData_AnalogValue(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyData_AnalogValue(pointer).write(value) }
        }
    }
}

public class ImGuiKeyOwnerData <: StructWrapper<capi.ImGuiKeyOwnerData> {
    public init(value!: ?capi.ImGuiKeyOwnerData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiKeyOwnerData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiKeyOwnerData_ImGuiKeyOwnerData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiKeyOwnerData_destroy(this.pointer)
        }
    }

    public mut prop OwnerCurr: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiKeyOwnerData_OwnerCurr(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyOwnerData_OwnerCurr(pointer).write(value) }
        }
    }

    public mut prop OwnerNext: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiKeyOwnerData_OwnerNext(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyOwnerData_OwnerNext(pointer).write(value) }
        }
    }

    public mut prop LockThisFrame: Bool {
        get() {
            return unsafe { capi.access_ImGuiKeyOwnerData_LockThisFrame(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyOwnerData_LockThisFrame(pointer).write(value) }
        }
    }

    public mut prop LockUntilRelease: Bool {
        get() {
            return unsafe { capi.access_ImGuiKeyOwnerData_LockUntilRelease(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyOwnerData_LockUntilRelease(pointer).write(value) }
        }
    }
}

public class ImGuiKeyRoutingData <: StructWrapper<capi.ImGuiKeyRoutingData> {
    public init(value!: ?capi.ImGuiKeyRoutingData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiKeyRoutingData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiKeyRoutingData_ImGuiKeyRoutingData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiKeyRoutingData_destroy(this.pointer)
        }
    }

    public mut prop NextEntryIndex: ImGuiKeyRoutingIndex {
        get() {
            return unsafe { capi.access_ImGuiKeyRoutingData_NextEntryIndex(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyRoutingData_NextEntryIndex(pointer).write(value) }
        }
    }

    public mut prop Mods: ImU16 {
        get() {
            return unsafe { capi.access_ImGuiKeyRoutingData_Mods(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyRoutingData_Mods(pointer).write(value) }
        }
    }

    public mut prop RoutingCurrScore: ImU8 {
        get() {
            return unsafe { capi.access_ImGuiKeyRoutingData_RoutingCurrScore(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyRoutingData_RoutingCurrScore(pointer).write(value) }
        }
    }

    public mut prop RoutingNextScore: ImU8 {
        get() {
            return unsafe { capi.access_ImGuiKeyRoutingData_RoutingNextScore(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyRoutingData_RoutingNextScore(pointer).write(value) }
        }
    }

    public mut prop RoutingCurr: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiKeyRoutingData_RoutingCurr(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyRoutingData_RoutingCurr(pointer).write(value) }
        }
    }

    public mut prop RoutingNext: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiKeyRoutingData_RoutingNext(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyRoutingData_RoutingNext(pointer).write(value) }
        }
    }
}

public class ImGuiKeyRoutingTable <: StructWrapper<capi.ImGuiKeyRoutingTable> {
    public init(value!: ?capi.ImGuiKeyRoutingTable, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiKeyRoutingTable>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiKeyRoutingTable_ImGuiKeyRoutingTable().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiKeyRoutingTable_destroy(this.pointer)
        }
    }

    public mut prop Index: Ref<ImGuiKeyRoutingIndex> {
        get() {
            return unsafe { Ref<ImGuiKeyRoutingIndex>.unsafeMake(capi.access_ImGuiKeyRoutingTable_Index(pointer).read(), count: 154, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop Entries: ImVector_ImGuiKeyRoutingData {
        get() {
            return unsafe { ImVector_ImGuiKeyRoutingData(capi.access_ImGuiKeyRoutingTable_Entries(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyRoutingTable_Entries(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop EntriesNext: ImVector_ImGuiKeyRoutingData {
        get() {
            return unsafe { ImVector_ImGuiKeyRoutingData(capi.access_ImGuiKeyRoutingTable_EntriesNext(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiKeyRoutingTable_EntriesNext(pointer).write(value.getCPointer().read()) }
        }
    }

    public func Clear(): Unit {
        return ImGuiKeyRoutingTable_Clear(this)
    }
}

public class ImGuiLastItemData <: StructWrapper<capi.ImGuiLastItemData> {
    public init(value!: ?capi.ImGuiLastItemData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiLastItemData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiLastItemData_ImGuiLastItemData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiLastItemData_destroy(this.pointer)
        }
    }

    public mut prop ID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiLastItemData_ID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiLastItemData_ID(pointer).write(value) }
        }
    }

    public mut prop InFlags: ImGuiItemFlags {
        get() {
            return unsafe { capi.access_ImGuiLastItemData_InFlags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiLastItemData_InFlags(pointer).write(value) }
        }
    }

    public mut prop StatusFlags: ImGuiItemStatusFlags {
        get() {
            return unsafe { capi.access_ImGuiLastItemData_StatusFlags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiLastItemData_StatusFlags(pointer).write(value) }
        }
    }

    public mut prop Rect: ImRect {
        get() {
            return unsafe { ImRect(capi.access_ImGuiLastItemData_Rect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiLastItemData_Rect(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop NavRect: ImRect {
        get() {
            return unsafe { ImRect(capi.access_ImGuiLastItemData_NavRect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiLastItemData_NavRect(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop DisplayRect: ImRect {
        get() {
            return unsafe { ImRect(capi.access_ImGuiLastItemData_DisplayRect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiLastItemData_DisplayRect(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop ClipRect: ImRect {
        get() {
            return unsafe { ImRect(capi.access_ImGuiLastItemData_ClipRect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiLastItemData_ClipRect(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Shortcut: ImGuiKeyChord {
        get() {
            return unsafe { capi.access_ImGuiLastItemData_Shortcut(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiLastItemData_Shortcut(pointer).write(value) }
        }
    }
}

public class ImGuiListClipper <: StructWrapper<capi.ImGuiListClipper> {
    public init(value!: ?capi.ImGuiListClipper, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiListClipper>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiListClipper_ImGuiListClipper().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiListClipper_destroy(this.pointer)
        }
    }

    public mut prop Ctx: Ref<ImGuiContext> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiListClipper_Ctx(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipper_Ctx(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop DisplayStart: Int32 {
        get() {
            return unsafe { capi.access_ImGuiListClipper_DisplayStart(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipper_DisplayStart(pointer).write(value) }
        }
    }

    public mut prop DisplayEnd: Int32 {
        get() {
            return unsafe { capi.access_ImGuiListClipper_DisplayEnd(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipper_DisplayEnd(pointer).write(value) }
        }
    }

    public mut prop ItemsCount: Int32 {
        get() {
            return unsafe { capi.access_ImGuiListClipper_ItemsCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipper_ItemsCount(pointer).write(value) }
        }
    }

    public mut prop ItemsHeight: Float32 {
        get() {
            return unsafe { capi.access_ImGuiListClipper_ItemsHeight(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipper_ItemsHeight(pointer).write(value) }
        }
    }

    public mut prop StartPosY: Float32 {
        get() {
            return unsafe { capi.access_ImGuiListClipper_StartPosY(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipper_StartPosY(pointer).write(value) }
        }
    }

    public mut prop TempData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiListClipper_TempData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipper_TempData(pointer).write(value.getCPointer()) }
        }
    }

    public func Begin(items_count: Int32, items_height: Float32): Unit {
        return ImGuiListClipper_Begin(this, items_count, items_height)
    }

    public func End(): Unit {
        return ImGuiListClipper_End(this)
    }

    public func IncludeItemByIndex(item_index: Int32): Unit {
        return ImGuiListClipper_IncludeItemByIndex(this, item_index)
    }

    public func IncludeItemsByIndex(item_begin: Int32, item_end: Int32): Unit {
        return ImGuiListClipper_IncludeItemsByIndex(this, item_begin, item_end)
    }

    public func Step(): Bool {
        return ImGuiListClipper_Step(this)
    }
}

public class ImGuiListClipperData <: StructWrapper<capi.ImGuiListClipperData> {
    public init(value!: ?capi.ImGuiListClipperData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiListClipperData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiListClipperData_ImGuiListClipperData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiListClipperData_destroy(this.pointer)
        }
    }

    public mut prop ListClipper: ImGuiListClipper {
        get() {
            return unsafe { ImGuiListClipper(capi.access_ImGuiListClipperData_ListClipper(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipperData_ListClipper(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop LossynessOffset: Float32 {
        get() {
            return unsafe { capi.access_ImGuiListClipperData_LossynessOffset(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipperData_LossynessOffset(pointer).write(value) }
        }
    }

    public mut prop StepNo: Int32 {
        get() {
            return unsafe { capi.access_ImGuiListClipperData_StepNo(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipperData_StepNo(pointer).write(value) }
        }
    }

    public mut prop ItemsFrozen: Int32 {
        get() {
            return unsafe { capi.access_ImGuiListClipperData_ItemsFrozen(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipperData_ItemsFrozen(pointer).write(value) }
        }
    }

    public mut prop Ranges: ImVector_ImGuiListClipperRange {
        get() {
            return unsafe { ImVector_ImGuiListClipperRange(capi.access_ImGuiListClipperData_Ranges(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipperData_Ranges(pointer).write(value.getCPointer().read()) }
        }
    }

    public func Reset(clipper: ImGuiListClipper): Unit {
        return ImGuiListClipperData_Reset(this, clipper)
    }
}

public class ImGuiListClipperRange <: StructWrapper<capi.ImGuiListClipperRange> {
    public init(value!: ?capi.ImGuiListClipperRange, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiListClipperRange>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Min: Int32 {
        get() {
            return unsafe { capi.access_ImGuiListClipperRange_Min(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipperRange_Min(pointer).write(value) }
        }
    }

    public mut prop Max: Int32 {
        get() {
            return unsafe { capi.access_ImGuiListClipperRange_Max(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipperRange_Max(pointer).write(value) }
        }
    }

    public mut prop PosToIndexConvert: Bool {
        get() {
            return unsafe { capi.access_ImGuiListClipperRange_PosToIndexConvert(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipperRange_PosToIndexConvert(pointer).write(value) }
        }
    }

    public mut prop PosToIndexOffsetMin: ImS8 {
        get() {
            return unsafe { capi.access_ImGuiListClipperRange_PosToIndexOffsetMin(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipperRange_PosToIndexOffsetMin(pointer).write(value) }
        }
    }

    public mut prop PosToIndexOffsetMax: ImS8 {
        get() {
            return unsafe { capi.access_ImGuiListClipperRange_PosToIndexOffsetMax(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiListClipperRange_PosToIndexOffsetMax(pointer).write(value) }
        }
    }

    public static func FromIndices(min: Int32, max: Int32): ImGuiListClipperRange {
        return ImGuiListClipperRange_FromIndices(min, max)
    }

    public static func FromPositions(y1: Float32, y2: Float32, off_min: Int32, off_max: Int32): ImGuiListClipperRange {
        return ImGuiListClipperRange_FromPositions(y1, y2, off_min, off_max)
    }
}

public class ImGuiLocEntry <: StructWrapper<capi.ImGuiLocEntry> {
    public init(value!: ?capi.ImGuiLocEntry, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiLocEntry>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Key: ImGuiLocKey {
        get() {
            return unsafe { capi.access_ImGuiLocEntry_Key(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiLocEntry_Key(pointer).write(value) }
        }
    }

    public mut prop Text: String {
        get() {
            return unsafe { CString(capi.access_ImGuiLocEntry_Text(pointer).read()).toString() }
        }

        set(value) {
            unsafe { capi.access_ImGuiLocEntry_Text(pointer).write(value.asCString()) }
        }
    }
}

public class ImGuiMenuColumns <: StructWrapper<capi.ImGuiMenuColumns> {
    public init(value!: ?capi.ImGuiMenuColumns, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiMenuColumns>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiMenuColumns_ImGuiMenuColumns().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiMenuColumns_destroy(this.pointer)
        }
    }

    public mut prop TotalWidth: ImU32 {
        get() {
            return unsafe { capi.access_ImGuiMenuColumns_TotalWidth(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMenuColumns_TotalWidth(pointer).write(value) }
        }
    }

    public mut prop NextTotalWidth: ImU32 {
        get() {
            return unsafe { capi.access_ImGuiMenuColumns_NextTotalWidth(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMenuColumns_NextTotalWidth(pointer).write(value) }
        }
    }

    public mut prop Spacing: ImU16 {
        get() {
            return unsafe { capi.access_ImGuiMenuColumns_Spacing(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMenuColumns_Spacing(pointer).write(value) }
        }
    }

    public mut prop OffsetIcon: ImU16 {
        get() {
            return unsafe { capi.access_ImGuiMenuColumns_OffsetIcon(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMenuColumns_OffsetIcon(pointer).write(value) }
        }
    }

    public mut prop OffsetLabel: ImU16 {
        get() {
            return unsafe { capi.access_ImGuiMenuColumns_OffsetLabel(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMenuColumns_OffsetLabel(pointer).write(value) }
        }
    }

    public mut prop OffsetShortcut: ImU16 {
        get() {
            return unsafe { capi.access_ImGuiMenuColumns_OffsetShortcut(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMenuColumns_OffsetShortcut(pointer).write(value) }
        }
    }

    public mut prop OffsetMark: ImU16 {
        get() {
            return unsafe { capi.access_ImGuiMenuColumns_OffsetMark(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMenuColumns_OffsetMark(pointer).write(value) }
        }
    }

    public mut prop Widths: Ref<ImU16> {
        get() {
            return unsafe { Ref<ImU16>.unsafeMake(capi.access_ImGuiMenuColumns_Widths(pointer).read(), count: 4, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public func CalcNextTotalWidth(update_offsets: Bool): Unit {
        return ImGuiMenuColumns_CalcNextTotalWidth(this, update_offsets)
    }

    public func DeclColumns(w_icon: Float32, w_label: Float32, w_shortcut: Float32, w_mark: Float32): Float32 {
        return ImGuiMenuColumns_DeclColumns(this, w_icon, w_label, w_shortcut, w_mark)
    }

    public func Update(spacing: Float32, window_reappearing: Bool): Unit {
        return ImGuiMenuColumns_Update(this, spacing, window_reappearing)
    }
}

public class ImGuiMetricsConfig <: StructWrapper<capi.ImGuiMetricsConfig> {
    public init(value!: ?capi.ImGuiMetricsConfig, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiMetricsConfig>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop ShowDebugLog: Bool {
        get() {
            return unsafe { capi.access_ImGuiMetricsConfig_ShowDebugLog(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMetricsConfig_ShowDebugLog(pointer).write(value) }
        }
    }

    public mut prop ShowIDStackTool: Bool {
        get() {
            return unsafe { capi.access_ImGuiMetricsConfig_ShowIDStackTool(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMetricsConfig_ShowIDStackTool(pointer).write(value) }
        }
    }

    public mut prop ShowWindowsRects: Bool {
        get() {
            return unsafe { capi.access_ImGuiMetricsConfig_ShowWindowsRects(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMetricsConfig_ShowWindowsRects(pointer).write(value) }
        }
    }

    public mut prop ShowWindowsBeginOrder: Bool {
        get() {
            return unsafe { capi.access_ImGuiMetricsConfig_ShowWindowsBeginOrder(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMetricsConfig_ShowWindowsBeginOrder(pointer).write(value) }
        }
    }

    public mut prop ShowTablesRects: Bool {
        get() {
            return unsafe { capi.access_ImGuiMetricsConfig_ShowTablesRects(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMetricsConfig_ShowTablesRects(pointer).write(value) }
        }
    }

    public mut prop ShowDrawCmdMesh: Bool {
        get() {
            return unsafe { capi.access_ImGuiMetricsConfig_ShowDrawCmdMesh(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMetricsConfig_ShowDrawCmdMesh(pointer).write(value) }
        }
    }

    public mut prop ShowDrawCmdBoundingBoxes: Bool {
        get() {
            return unsafe { capi.access_ImGuiMetricsConfig_ShowDrawCmdBoundingBoxes(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMetricsConfig_ShowDrawCmdBoundingBoxes(pointer).write(value) }
        }
    }

    public mut prop ShowTextEncodingViewer: Bool {
        get() {
            return unsafe { capi.access_ImGuiMetricsConfig_ShowTextEncodingViewer(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMetricsConfig_ShowTextEncodingViewer(pointer).write(value) }
        }
    }

    public mut prop ShowAtlasTintedWithTextColor: Bool {
        get() {
            return unsafe { capi.access_ImGuiMetricsConfig_ShowAtlasTintedWithTextColor(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMetricsConfig_ShowAtlasTintedWithTextColor(pointer).write(value) }
        }
    }

    public mut prop ShowDockingNodes: Bool {
        get() {
            return unsafe { capi.access_ImGuiMetricsConfig_ShowDockingNodes(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMetricsConfig_ShowDockingNodes(pointer).write(value) }
        }
    }

    public mut prop ShowWindowsRectsType: Int32 {
        get() {
            return unsafe { capi.access_ImGuiMetricsConfig_ShowWindowsRectsType(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMetricsConfig_ShowWindowsRectsType(pointer).write(value) }
        }
    }

    public mut prop ShowTablesRectsType: Int32 {
        get() {
            return unsafe { capi.access_ImGuiMetricsConfig_ShowTablesRectsType(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMetricsConfig_ShowTablesRectsType(pointer).write(value) }
        }
    }

    public mut prop HighlightMonitorIdx: Int32 {
        get() {
            return unsafe { capi.access_ImGuiMetricsConfig_HighlightMonitorIdx(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMetricsConfig_HighlightMonitorIdx(pointer).write(value) }
        }
    }

    public mut prop HighlightViewportID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiMetricsConfig_HighlightViewportID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiMetricsConfig_HighlightViewportID(pointer).write(value) }
        }
    }
}

public class ImGuiNavItemData <: StructWrapper<capi.ImGuiNavItemData> {
    public init(value!: ?capi.ImGuiNavItemData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiNavItemData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiNavItemData_ImGuiNavItemData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiNavItemData_destroy(this.pointer)
        }
    }

    public mut prop Window: Ref<ImGuiWindow> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiNavItemData_Window(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiNavItemData_Window(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop ID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiNavItemData_ID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNavItemData_ID(pointer).write(value) }
        }
    }

    public mut prop FocusScopeId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiNavItemData_FocusScopeId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNavItemData_FocusScopeId(pointer).write(value) }
        }
    }

    public mut prop RectRel: ImRect {
        get() {
            return unsafe { ImRect(capi.access_ImGuiNavItemData_RectRel(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiNavItemData_RectRel(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop InFlags: ImGuiItemFlags {
        get() {
            return unsafe { capi.access_ImGuiNavItemData_InFlags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNavItemData_InFlags(pointer).write(value) }
        }
    }

    public mut prop DistBox: Float32 {
        get() {
            return unsafe { capi.access_ImGuiNavItemData_DistBox(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNavItemData_DistBox(pointer).write(value) }
        }
    }

    public mut prop DistCenter: Float32 {
        get() {
            return unsafe { capi.access_ImGuiNavItemData_DistCenter(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNavItemData_DistCenter(pointer).write(value) }
        }
    }

    public mut prop DistAxial: Float32 {
        get() {
            return unsafe { capi.access_ImGuiNavItemData_DistAxial(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNavItemData_DistAxial(pointer).write(value) }
        }
    }

    public mut prop SelectionUserData: ImGuiSelectionUserData {
        get() {
            return unsafe { capi.access_ImGuiNavItemData_SelectionUserData(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNavItemData_SelectionUserData(pointer).write(value) }
        }
    }

    public func Clear(): Unit {
        return ImGuiNavItemData_Clear(this)
    }
}

public class ImGuiNavTreeNodeData <: StructWrapper<capi.ImGuiNavTreeNodeData> {
    public init(value!: ?capi.ImGuiNavTreeNodeData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiNavTreeNodeData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop ID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiNavTreeNodeData_ID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNavTreeNodeData_ID(pointer).write(value) }
        }
    }

    public mut prop InFlags: ImGuiItemFlags {
        get() {
            return unsafe { capi.access_ImGuiNavTreeNodeData_InFlags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNavTreeNodeData_InFlags(pointer).write(value) }
        }
    }

    public mut prop NavRect: ImRect {
        get() {
            return unsafe { ImRect(capi.access_ImGuiNavTreeNodeData_NavRect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiNavTreeNodeData_NavRect(pointer).write(value.getCPointer().read()) }
        }
    }
}

public class ImGuiNextItemData <: StructWrapper<capi.ImGuiNextItemData> {
    public init(value!: ?capi.ImGuiNextItemData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiNextItemData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiNextItemData_ImGuiNextItemData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiNextItemData_destroy(this.pointer)
        }
    }

    public mut prop Flags: ImGuiNextItemDataFlags {
        get() {
            return unsafe { capi.access_ImGuiNextItemData_Flags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextItemData_Flags(pointer).write(value) }
        }
    }

    public mut prop ItemFlags: ImGuiItemFlags {
        get() {
            return unsafe { capi.access_ImGuiNextItemData_ItemFlags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextItemData_ItemFlags(pointer).write(value) }
        }
    }

    public mut prop SelectionUserData: ImGuiSelectionUserData {
        get() {
            return unsafe { capi.access_ImGuiNextItemData_SelectionUserData(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextItemData_SelectionUserData(pointer).write(value) }
        }
    }

    public mut prop Width: Float32 {
        get() {
            return unsafe { capi.access_ImGuiNextItemData_Width(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextItemData_Width(pointer).write(value) }
        }
    }

    public mut prop Shortcut: ImGuiKeyChord {
        get() {
            return unsafe { capi.access_ImGuiNextItemData_Shortcut(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextItemData_Shortcut(pointer).write(value) }
        }
    }

    public mut prop ShortcutFlags: ImGuiInputFlags {
        get() {
            return unsafe { capi.access_ImGuiNextItemData_ShortcutFlags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextItemData_ShortcutFlags(pointer).write(value) }
        }
    }

    public mut prop OpenVal: Bool {
        get() {
            return unsafe { capi.access_ImGuiNextItemData_OpenVal(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextItemData_OpenVal(pointer).write(value) }
        }
    }

    public mut prop OpenCond: ImU8 {
        get() {
            return unsafe { capi.access_ImGuiNextItemData_OpenCond(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextItemData_OpenCond(pointer).write(value) }
        }
    }

    public mut prop RefVal: ImGuiDataTypeStorage {
        get() {
            return unsafe { ImGuiDataTypeStorage(capi.access_ImGuiNextItemData_RefVal(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextItemData_RefVal(pointer).write(value.getCPointer().read()) }
        }
    }

    public func ClearFlags(): Unit {
        return ImGuiNextItemData_ClearFlags(this)
    }
}

public class ImGuiNextWindowData <: StructWrapper<capi.ImGuiNextWindowData> {
    public init(value!: ?capi.ImGuiNextWindowData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiNextWindowData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiNextWindowData_ImGuiNextWindowData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiNextWindowData_destroy(this.pointer)
        }
    }

    public mut prop Flags: ImGuiNextWindowDataFlags {
        get() {
            return unsafe { capi.access_ImGuiNextWindowData_Flags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_Flags(pointer).write(value) }
        }
    }

    public mut prop PosCond: ImGuiCond {
        get() {
            return unsafe { capi.access_ImGuiNextWindowData_PosCond(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_PosCond(pointer).write(value) }
        }
    }

    public mut prop SizeCond: ImGuiCond {
        get() {
            return unsafe { capi.access_ImGuiNextWindowData_SizeCond(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_SizeCond(pointer).write(value) }
        }
    }

    public mut prop CollapsedCond: ImGuiCond {
        get() {
            return unsafe { capi.access_ImGuiNextWindowData_CollapsedCond(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_CollapsedCond(pointer).write(value) }
        }
    }

    public mut prop DockCond: ImGuiCond {
        get() {
            return unsafe { capi.access_ImGuiNextWindowData_DockCond(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_DockCond(pointer).write(value) }
        }
    }

    public mut prop PosVal: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiNextWindowData_PosVal(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_PosVal(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop PosPivotVal: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiNextWindowData_PosPivotVal(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_PosPivotVal(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop SizeVal: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiNextWindowData_SizeVal(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_SizeVal(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop ContentSizeVal: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiNextWindowData_ContentSizeVal(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_ContentSizeVal(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop ScrollVal: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiNextWindowData_ScrollVal(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_ScrollVal(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop ChildFlags: ImGuiChildFlags {
        get() {
            return unsafe { capi.access_ImGuiNextWindowData_ChildFlags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_ChildFlags(pointer).write(value) }
        }
    }

    public mut prop PosUndock: Bool {
        get() {
            return unsafe { capi.access_ImGuiNextWindowData_PosUndock(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_PosUndock(pointer).write(value) }
        }
    }

    public mut prop CollapsedVal: Bool {
        get() {
            return unsafe { capi.access_ImGuiNextWindowData_CollapsedVal(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_CollapsedVal(pointer).write(value) }
        }
    }

    public mut prop SizeConstraintRect: ImRect {
        get() {
            return unsafe { ImRect(capi.access_ImGuiNextWindowData_SizeConstraintRect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_SizeConstraintRect(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop SizeCallback: ImGuiSizeCallback {
        get() {
            return unsafe { capi.access_ImGuiNextWindowData_SizeCallback(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_SizeCallback(pointer).write(value) }
        }
    }

    public mut prop SizeCallbackUserData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiNextWindowData_SizeCallbackUserData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_SizeCallbackUserData(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop BgAlphaVal: Float32 {
        get() {
            return unsafe { capi.access_ImGuiNextWindowData_BgAlphaVal(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_BgAlphaVal(pointer).write(value) }
        }
    }

    public mut prop ViewportId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiNextWindowData_ViewportId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_ViewportId(pointer).write(value) }
        }
    }

    public mut prop DockId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiNextWindowData_DockId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_DockId(pointer).write(value) }
        }
    }

    public mut prop WindowClass: ImGuiWindowClass {
        get() {
            return unsafe { ImGuiWindowClass(capi.access_ImGuiNextWindowData_WindowClass(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_WindowClass(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop MenuBarOffsetMinVal: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiNextWindowData_MenuBarOffsetMinVal(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_MenuBarOffsetMinVal(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop RefreshFlagsVal: ImGuiWindowRefreshFlags {
        get() {
            return unsafe { capi.access_ImGuiNextWindowData_RefreshFlagsVal(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiNextWindowData_RefreshFlagsVal(pointer).write(value) }
        }
    }

    public func ClearFlags(): Unit {
        return ImGuiNextWindowData_ClearFlags(this)
    }
}

public class ImGuiOldColumnData <: StructWrapper<capi.ImGuiOldColumnData> {
    public init(value!: ?capi.ImGuiOldColumnData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiOldColumnData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiOldColumnData_ImGuiOldColumnData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiOldColumnData_destroy(this.pointer)
        }
    }

    public mut prop OffsetNorm: Float32 {
        get() {
            return unsafe { capi.access_ImGuiOldColumnData_OffsetNorm(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumnData_OffsetNorm(pointer).write(value) }
        }
    }

    public mut prop OffsetNormBeforeResize: Float32 {
        get() {
            return unsafe { capi.access_ImGuiOldColumnData_OffsetNormBeforeResize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumnData_OffsetNormBeforeResize(pointer).write(value) }
        }
    }

    public mut prop Flags: ImGuiOldColumnFlags {
        get() {
            return unsafe { capi.access_ImGuiOldColumnData_Flags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumnData_Flags(pointer).write(value) }
        }
    }

    public mut prop ClipRect: ImRect {
        get() {
            return unsafe { ImRect(capi.access_ImGuiOldColumnData_ClipRect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumnData_ClipRect(pointer).write(value.getCPointer().read()) }
        }
    }
}

public class ImGuiOldColumns <: StructWrapper<capi.ImGuiOldColumns> {
    public init(value!: ?capi.ImGuiOldColumns, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiOldColumns>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiOldColumns_ImGuiOldColumns().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiOldColumns_destroy(this.pointer)
        }
    }

    public mut prop ID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiOldColumns_ID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_ID(pointer).write(value) }
        }
    }

    public mut prop Flags: ImGuiOldColumnFlags {
        get() {
            return unsafe { capi.access_ImGuiOldColumns_Flags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_Flags(pointer).write(value) }
        }
    }

    public mut prop IsFirstFrame: Bool {
        get() {
            return unsafe { capi.access_ImGuiOldColumns_IsFirstFrame(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_IsFirstFrame(pointer).write(value) }
        }
    }

    public mut prop IsBeingResized: Bool {
        get() {
            return unsafe { capi.access_ImGuiOldColumns_IsBeingResized(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_IsBeingResized(pointer).write(value) }
        }
    }

    public mut prop Current: Int32 {
        get() {
            return unsafe { capi.access_ImGuiOldColumns_Current(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_Current(pointer).write(value) }
        }
    }

    public mut prop Count: Int32 {
        get() {
            return unsafe { capi.access_ImGuiOldColumns_Count(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_Count(pointer).write(value) }
        }
    }

    public mut prop OffMinX: Float32 {
        get() {
            return unsafe { capi.access_ImGuiOldColumns_OffMinX(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_OffMinX(pointer).write(value) }
        }
    }

    public mut prop OffMaxX: Float32 {
        get() {
            return unsafe { capi.access_ImGuiOldColumns_OffMaxX(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_OffMaxX(pointer).write(value) }
        }
    }

    public mut prop LineMinY: Float32 {
        get() {
            return unsafe { capi.access_ImGuiOldColumns_LineMinY(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_LineMinY(pointer).write(value) }
        }
    }

    public mut prop LineMaxY: Float32 {
        get() {
            return unsafe { capi.access_ImGuiOldColumns_LineMaxY(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_LineMaxY(pointer).write(value) }
        }
    }

    public mut prop HostCursorPosY: Float32 {
        get() {
            return unsafe { capi.access_ImGuiOldColumns_HostCursorPosY(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_HostCursorPosY(pointer).write(value) }
        }
    }

    public mut prop HostCursorMaxPosX: Float32 {
        get() {
            return unsafe { capi.access_ImGuiOldColumns_HostCursorMaxPosX(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_HostCursorMaxPosX(pointer).write(value) }
        }
    }

    public mut prop HostInitialClipRect: ImRect {
        get() {
            return unsafe { ImRect(capi.access_ImGuiOldColumns_HostInitialClipRect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_HostInitialClipRect(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop HostBackupClipRect: ImRect {
        get() {
            return unsafe { ImRect(capi.access_ImGuiOldColumns_HostBackupClipRect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_HostBackupClipRect(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop HostBackupParentWorkRect: ImRect {
        get() {
            return unsafe { ImRect(capi.access_ImGuiOldColumns_HostBackupParentWorkRect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_HostBackupParentWorkRect(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Columns: ImVector_ImGuiOldColumnData {
        get() {
            return unsafe { ImVector_ImGuiOldColumnData(capi.access_ImGuiOldColumns_Columns(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_Columns(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Splitter: ImDrawListSplitter {
        get() {
            return unsafe { ImDrawListSplitter(capi.access_ImGuiOldColumns_Splitter(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiOldColumns_Splitter(pointer).write(value.getCPointer().read()) }
        }
    }
}

public class ImGuiOnceUponAFrame <: StructWrapper<capi.ImGuiOnceUponAFrame> {
    public init(value!: ?capi.ImGuiOnceUponAFrame, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiOnceUponAFrame>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiOnceUponAFrame_ImGuiOnceUponAFrame().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiOnceUponAFrame_destroy(this.pointer)
        }
    }

    public mut prop RefFrame: Int32 {
        get() {
            return unsafe { capi.access_ImGuiOnceUponAFrame_RefFrame(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiOnceUponAFrame_RefFrame(pointer).write(value) }
        }
    }
}

public class ImGuiPayload <: StructWrapper<capi.ImGuiPayload> {
    public init(value!: ?capi.ImGuiPayload, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiPayload>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiPayload_ImGuiPayload().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiPayload_destroy(this.pointer)
        }
    }

    public mut prop Data: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiPayload_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiPayload_Data(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop DataSize: Int32 {
        get() {
            return unsafe { capi.access_ImGuiPayload_DataSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPayload_DataSize(pointer).write(value) }
        }
    }

    public mut prop SourceId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiPayload_SourceId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPayload_SourceId(pointer).write(value) }
        }
    }

    public mut prop SourceParentId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiPayload_SourceParentId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPayload_SourceParentId(pointer).write(value) }
        }
    }

    public mut prop DataFrameCount: Int32 {
        get() {
            return unsafe { capi.access_ImGuiPayload_DataFrameCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPayload_DataFrameCount(pointer).write(value) }
        }
    }

    public mut prop DataType: Ref<UInt8> {
        get() {
            return unsafe { Ref<UInt8>.unsafeMake(capi.access_ImGuiPayload_DataType(pointer).read(), count: 33, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop Preview: Bool {
        get() {
            return unsafe { capi.access_ImGuiPayload_Preview(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPayload_Preview(pointer).write(value) }
        }
    }

    public mut prop Delivery: Bool {
        get() {
            return unsafe { capi.access_ImGuiPayload_Delivery(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPayload_Delivery(pointer).write(value) }
        }
    }

    public func Clear(): Unit {
        return ImGuiPayload_Clear(this)
    }

    public func IsDataType(`type`: CStringConvertable): Bool {
        return ImGuiPayload_IsDataType(this, `type`)
    }

    public func IsDelivery(): Bool {
        return ImGuiPayload_IsDelivery(this)
    }

    public func IsPreview(): Bool {
        return ImGuiPayload_IsPreview(this)
    }
}

public class ImGuiPlatformIO <: StructWrapper<capi.ImGuiPlatformIO> {
    public init(value!: ?capi.ImGuiPlatformIO, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiPlatformIO>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiPlatformIO_ImGuiPlatformIO().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiPlatformIO_destroy(this.pointer)
        }
    }

    public mut prop Platform_CreateWindow: CFunc<(vp: CPointer<capi.ImGuiViewport>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_CreateWindow(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_CreateWindow(pointer).write(value) }
        }
    }

    public mut prop Platform_DestroyWindow: CFunc<(vp: CPointer<capi.ImGuiViewport>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_DestroyWindow(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_DestroyWindow(pointer).write(value) }
        }
    }

    public mut prop Platform_ShowWindow: CFunc<(vp: CPointer<capi.ImGuiViewport>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_ShowWindow(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_ShowWindow(pointer).write(value) }
        }
    }

    public mut prop Platform_SetWindowPos: CFunc<(vp: CPointer<capi.ImGuiViewport>, pos: capi.ImVec2) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_SetWindowPos(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_SetWindowPos(pointer).write(value) }
        }
    }

    public mut prop Platform_GetWindowPos: CFunc<(vp: CPointer<capi.ImGuiViewport>) -> capi.ImVec2> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_GetWindowPos(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_GetWindowPos(pointer).write(value) }
        }
    }

    public mut prop Platform_SetWindowSize: CFunc<(vp: CPointer<capi.ImGuiViewport>, size: capi.ImVec2) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_SetWindowSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_SetWindowSize(pointer).write(value) }
        }
    }

    public mut prop Platform_GetWindowSize: CFunc<(vp: CPointer<capi.ImGuiViewport>) -> capi.ImVec2> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_GetWindowSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_GetWindowSize(pointer).write(value) }
        }
    }

    public mut prop Platform_SetWindowFocus: CFunc<(vp: CPointer<capi.ImGuiViewport>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_SetWindowFocus(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_SetWindowFocus(pointer).write(value) }
        }
    }

    public mut prop Platform_GetWindowFocus: CFunc<(vp: CPointer<capi.ImGuiViewport>) -> Bool> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_GetWindowFocus(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_GetWindowFocus(pointer).write(value) }
        }
    }

    public mut prop Platform_GetWindowMinimized: CFunc<(vp: CPointer<capi.ImGuiViewport>) -> Bool> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_GetWindowMinimized(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_GetWindowMinimized(pointer).write(value) }
        }
    }

    public mut prop Platform_SetWindowTitle: CFunc<(vp: CPointer<capi.ImGuiViewport>, str: CPointer<UInt8>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_SetWindowTitle(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_SetWindowTitle(pointer).write(value) }
        }
    }

    public mut prop Platform_SetWindowAlpha: CFunc<(vp: CPointer<capi.ImGuiViewport>, alpha: Float32) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_SetWindowAlpha(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_SetWindowAlpha(pointer).write(value) }
        }
    }

    public mut prop Platform_UpdateWindow: CFunc<(vp: CPointer<capi.ImGuiViewport>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_UpdateWindow(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_UpdateWindow(pointer).write(value) }
        }
    }

    public mut prop Platform_RenderWindow: CFunc<(vp: CPointer<capi.ImGuiViewport>, render_arg: CPointer<Unit>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_RenderWindow(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_RenderWindow(pointer).write(value) }
        }
    }

    public mut prop Platform_SwapBuffers: CFunc<(vp: CPointer<capi.ImGuiViewport>, render_arg: CPointer<Unit>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_SwapBuffers(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_SwapBuffers(pointer).write(value) }
        }
    }

    public mut prop Platform_GetWindowDpiScale: CFunc<(vp: CPointer<capi.ImGuiViewport>) -> Float32> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_GetWindowDpiScale(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_GetWindowDpiScale(pointer).write(value) }
        }
    }

    public mut prop Platform_OnChangedViewport: CFunc<(vp: CPointer<capi.ImGuiViewport>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_OnChangedViewport(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_OnChangedViewport(pointer).write(value) }
        }
    }

    public mut prop Platform_CreateVkSurface: CFunc<(vp: CPointer<capi.ImGuiViewport>, vk_inst: ImU64, vk_allocators: CPointer<Unit>, out_vk_surface: CPointer<ImU64>) -> Int32> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Platform_CreateVkSurface(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Platform_CreateVkSurface(pointer).write(value) }
        }
    }

    public mut prop Renderer_CreateWindow: CFunc<(vp: CPointer<capi.ImGuiViewport>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Renderer_CreateWindow(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Renderer_CreateWindow(pointer).write(value) }
        }
    }

    public mut prop Renderer_DestroyWindow: CFunc<(vp: CPointer<capi.ImGuiViewport>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Renderer_DestroyWindow(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Renderer_DestroyWindow(pointer).write(value) }
        }
    }

    public mut prop Renderer_SetWindowSize: CFunc<(vp: CPointer<capi.ImGuiViewport>, size: capi.ImVec2) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Renderer_SetWindowSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Renderer_SetWindowSize(pointer).write(value) }
        }
    }

    public mut prop Renderer_RenderWindow: CFunc<(vp: CPointer<capi.ImGuiViewport>, render_arg: CPointer<Unit>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Renderer_RenderWindow(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Renderer_RenderWindow(pointer).write(value) }
        }
    }

    public mut prop Renderer_SwapBuffers: CFunc<(vp: CPointer<capi.ImGuiViewport>, render_arg: CPointer<Unit>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiPlatformIO_Renderer_SwapBuffers(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Renderer_SwapBuffers(pointer).write(value) }
        }
    }

    public mut prop Monitors: ImVector_ImGuiPlatformMonitor {
        get() {
            return unsafe { ImVector_ImGuiPlatformMonitor(capi.access_ImGuiPlatformIO_Monitors(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Monitors(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Viewports: ImVector_ImGuiViewportPtr {
        get() {
            return unsafe { ImVector_ImGuiViewportPtr(capi.access_ImGuiPlatformIO_Viewports(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformIO_Viewports(pointer).write(value.getCPointer().read()) }
        }
    }
}

public class ImGuiPlatformImeData <: StructWrapper<capi.ImGuiPlatformImeData> {
    public init(value!: ?capi.ImGuiPlatformImeData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiPlatformImeData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiPlatformImeData_ImGuiPlatformImeData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiPlatformImeData_destroy(this.pointer)
        }
    }

    public mut prop WantVisible: Bool {
        get() {
            return unsafe { capi.access_ImGuiPlatformImeData_WantVisible(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformImeData_WantVisible(pointer).write(value) }
        }
    }

    public mut prop InputPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiPlatformImeData_InputPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformImeData_InputPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop InputLineHeight: Float32 {
        get() {
            return unsafe { capi.access_ImGuiPlatformImeData_InputLineHeight(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformImeData_InputLineHeight(pointer).write(value) }
        }
    }
}

public class ImGuiPlatformMonitor <: StructWrapper<capi.ImGuiPlatformMonitor> {
    public init(value!: ?capi.ImGuiPlatformMonitor, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiPlatformMonitor>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiPlatformMonitor_ImGuiPlatformMonitor().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiPlatformMonitor_destroy(this.pointer)
        }
    }

    public mut prop MainPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiPlatformMonitor_MainPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformMonitor_MainPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop MainSize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiPlatformMonitor_MainSize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformMonitor_MainSize(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop WorkPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiPlatformMonitor_WorkPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformMonitor_WorkPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop WorkSize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiPlatformMonitor_WorkSize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformMonitor_WorkSize(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop DpiScale: Float32 {
        get() {
            return unsafe { capi.access_ImGuiPlatformMonitor_DpiScale(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformMonitor_DpiScale(pointer).write(value) }
        }
    }

    public mut prop PlatformHandle: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiPlatformMonitor_PlatformHandle(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiPlatformMonitor_PlatformHandle(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImGuiPopupData <: StructWrapper<capi.ImGuiPopupData> {
    public init(value!: ?capi.ImGuiPopupData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiPopupData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiPopupData_ImGuiPopupData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiPopupData_destroy(this.pointer)
        }
    }

    public mut prop PopupId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiPopupData_PopupId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPopupData_PopupId(pointer).write(value) }
        }
    }

    public mut prop Window: Ref<ImGuiWindow> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiPopupData_Window(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiPopupData_Window(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop RestoreNavWindow: Ref<ImGuiWindow> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiPopupData_RestoreNavWindow(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiPopupData_RestoreNavWindow(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop ParentNavLayer: Int32 {
        get() {
            return unsafe { capi.access_ImGuiPopupData_ParentNavLayer(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPopupData_ParentNavLayer(pointer).write(value) }
        }
    }

    public mut prop OpenFrameCount: Int32 {
        get() {
            return unsafe { capi.access_ImGuiPopupData_OpenFrameCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPopupData_OpenFrameCount(pointer).write(value) }
        }
    }

    public mut prop OpenParentId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiPopupData_OpenParentId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPopupData_OpenParentId(pointer).write(value) }
        }
    }

    public mut prop OpenPopupPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiPopupData_OpenPopupPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiPopupData_OpenPopupPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop OpenMousePos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiPopupData_OpenMousePos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiPopupData_OpenMousePos(pointer).write(value.getCPointer().read()) }
        }
    }
}

public class ImGuiPtrOrIndex <: StructWrapper<capi.ImGuiPtrOrIndex> {
    public init(value!: ?capi.ImGuiPtrOrIndex, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiPtrOrIndex>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init(ptr: Ref<Unit>) {
        super(ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(ptr).getCPointer(), count: None, owned: true)
    }

    public init(index: Int32) {
        super(ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(index).getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiPtrOrIndex_destroy(this.pointer)
        }
    }

    public mut prop Ptr: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiPtrOrIndex_Ptr(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiPtrOrIndex_Ptr(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop Index: Int32 {
        get() {
            return unsafe { capi.access_ImGuiPtrOrIndex_Index(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiPtrOrIndex_Index(pointer).write(value) }
        }
    }
}

public class ImGuiSettingsHandler <: StructWrapper<capi.ImGuiSettingsHandler> {
    public init(value!: ?capi.ImGuiSettingsHandler, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiSettingsHandler>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiSettingsHandler_ImGuiSettingsHandler().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiSettingsHandler_destroy(this.pointer)
        }
    }

    public mut prop TypeName: String {
        get() {
            return unsafe { CString(capi.access_ImGuiSettingsHandler_TypeName(pointer).read()).toString() }
        }

        set(value) {
            unsafe { capi.access_ImGuiSettingsHandler_TypeName(pointer).write(value.asCString()) }
        }
    }

    public mut prop TypeHash: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiSettingsHandler_TypeHash(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiSettingsHandler_TypeHash(pointer).write(value) }
        }
    }

    public mut prop ClearAllFn: CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<capi.ImGuiSettingsHandler>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiSettingsHandler_ClearAllFn(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiSettingsHandler_ClearAllFn(pointer).write(value) }
        }
    }

    public mut prop ReadInitFn: CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<capi.ImGuiSettingsHandler>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiSettingsHandler_ReadInitFn(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiSettingsHandler_ReadInitFn(pointer).write(value) }
        }
    }

    public mut prop ReadOpenFn: CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<capi.ImGuiSettingsHandler>, name: CPointer<UInt8>) -> CPointer<Unit>> {
        get() {
            return unsafe { capi.access_ImGuiSettingsHandler_ReadOpenFn(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiSettingsHandler_ReadOpenFn(pointer).write(value) }
        }
    }

    public mut prop ReadLineFn: CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<capi.ImGuiSettingsHandler>, entry: CPointer<Unit>, line: CPointer<UInt8>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiSettingsHandler_ReadLineFn(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiSettingsHandler_ReadLineFn(pointer).write(value) }
        }
    }

    public mut prop ApplyAllFn: CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<capi.ImGuiSettingsHandler>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiSettingsHandler_ApplyAllFn(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiSettingsHandler_ApplyAllFn(pointer).write(value) }
        }
    }

    public mut prop WriteAllFn: CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<capi.ImGuiSettingsHandler>, out_buf: CPointer<capi.ImGuiTextBuffer>) -> Unit> {
        get() {
            return unsafe { capi.access_ImGuiSettingsHandler_WriteAllFn(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiSettingsHandler_WriteAllFn(pointer).write(value) }
        }
    }

    public mut prop UserData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiSettingsHandler_UserData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiSettingsHandler_UserData(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImGuiShrinkWidthItem <: StructWrapper<capi.ImGuiShrinkWidthItem> {
    public init(value!: ?capi.ImGuiShrinkWidthItem, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiShrinkWidthItem>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Index: Int32 {
        get() {
            return unsafe { capi.access_ImGuiShrinkWidthItem_Index(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiShrinkWidthItem_Index(pointer).write(value) }
        }
    }

    public mut prop Width: Float32 {
        get() {
            return unsafe { capi.access_ImGuiShrinkWidthItem_Width(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiShrinkWidthItem_Width(pointer).write(value) }
        }
    }

    public mut prop InitialWidth: Float32 {
        get() {
            return unsafe { capi.access_ImGuiShrinkWidthItem_InitialWidth(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiShrinkWidthItem_InitialWidth(pointer).write(value) }
        }
    }
}

public class ImGuiSizeCallbackData <: StructWrapper<capi.ImGuiSizeCallbackData> {
    public init(value!: ?capi.ImGuiSizeCallbackData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiSizeCallbackData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop UserData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiSizeCallbackData_UserData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiSizeCallbackData_UserData(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop Pos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiSizeCallbackData_Pos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiSizeCallbackData_Pos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop CurrentSize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiSizeCallbackData_CurrentSize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiSizeCallbackData_CurrentSize(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop DesiredSize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiSizeCallbackData_DesiredSize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiSizeCallbackData_DesiredSize(pointer).write(value.getCPointer().read()) }
        }
    }
}

public class ImGuiStackSizes <: StructWrapper<capi.ImGuiStackSizes> {
    public init(value!: ?capi.ImGuiStackSizes, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiStackSizes>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiStackSizes_ImGuiStackSizes().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiStackSizes_destroy(this.pointer)
        }
    }

    public mut prop SizeOfIDStack: Int16 {
        get() {
            return unsafe { capi.access_ImGuiStackSizes_SizeOfIDStack(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStackSizes_SizeOfIDStack(pointer).write(value) }
        }
    }

    public mut prop SizeOfColorStack: Int16 {
        get() {
            return unsafe { capi.access_ImGuiStackSizes_SizeOfColorStack(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStackSizes_SizeOfColorStack(pointer).write(value) }
        }
    }

    public mut prop SizeOfStyleVarStack: Int16 {
        get() {
            return unsafe { capi.access_ImGuiStackSizes_SizeOfStyleVarStack(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStackSizes_SizeOfStyleVarStack(pointer).write(value) }
        }
    }

    public mut prop SizeOfFontStack: Int16 {
        get() {
            return unsafe { capi.access_ImGuiStackSizes_SizeOfFontStack(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStackSizes_SizeOfFontStack(pointer).write(value) }
        }
    }

    public mut prop SizeOfFocusScopeStack: Int16 {
        get() {
            return unsafe { capi.access_ImGuiStackSizes_SizeOfFocusScopeStack(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStackSizes_SizeOfFocusScopeStack(pointer).write(value) }
        }
    }

    public mut prop SizeOfGroupStack: Int16 {
        get() {
            return unsafe { capi.access_ImGuiStackSizes_SizeOfGroupStack(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStackSizes_SizeOfGroupStack(pointer).write(value) }
        }
    }

    public mut prop SizeOfItemFlagsStack: Int16 {
        get() {
            return unsafe { capi.access_ImGuiStackSizes_SizeOfItemFlagsStack(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStackSizes_SizeOfItemFlagsStack(pointer).write(value) }
        }
    }

    public mut prop SizeOfBeginPopupStack: Int16 {
        get() {
            return unsafe { capi.access_ImGuiStackSizes_SizeOfBeginPopupStack(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStackSizes_SizeOfBeginPopupStack(pointer).write(value) }
        }
    }

    public mut prop SizeOfDisabledStack: Int16 {
        get() {
            return unsafe { capi.access_ImGuiStackSizes_SizeOfDisabledStack(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStackSizes_SizeOfDisabledStack(pointer).write(value) }
        }
    }

    public func CompareWithContextState(ctx: Ref<ImGuiContext>): Unit {
        return ImGuiStackSizes_CompareWithContextState(this, ctx)
    }

    public func SetToContextState(ctx: Ref<ImGuiContext>): Unit {
        return ImGuiStackSizes_SetToContextState(this, ctx)
    }
}

public class ImGuiStorage <: StructWrapper<capi.ImGuiStorage> {
    public init(value!: ?capi.ImGuiStorage, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiStorage>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Data: ImVector_ImGuiStoragePair {
        get() {
            return unsafe { ImVector_ImGuiStoragePair(capi.access_ImGuiStorage_Data(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStorage_Data(pointer).write(value.getCPointer().read()) }
        }
    }

    public func BuildSortByKey(): Unit {
        return ImGuiStorage_BuildSortByKey(this)
    }

    public func Clear(): Unit {
        return ImGuiStorage_Clear(this)
    }

    public func GetBool(key: ImGuiID, default_val: Bool): Bool {
        return ImGuiStorage_GetBool(this, key, default_val)
    }

    public func GetBoolRef(key: ImGuiID, default_val: Bool): Ref<Bool> {
        return ImGuiStorage_GetBoolRef(this, key, default_val)
    }

    public func GetFloat(key: ImGuiID, default_val: Float32): Float32 {
        return ImGuiStorage_GetFloat(this, key, default_val)
    }

    public func GetFloatRef(key: ImGuiID, default_val: Float32): Ref<Float32> {
        return ImGuiStorage_GetFloatRef(this, key, default_val)
    }

    public func GetInt(key: ImGuiID, default_val: Int32): Int32 {
        return ImGuiStorage_GetInt(this, key, default_val)
    }

    public func GetIntRef(key: ImGuiID, default_val: Int32): Ref<Int32> {
        return ImGuiStorage_GetIntRef(this, key, default_val)
    }

    public func GetVoidPtr(key: ImGuiID): Ref<Unit> {
        return ImGuiStorage_GetVoidPtr(this, key)
    }

    public func GetVoidPtrRef(key: ImGuiID, default_val: Ref<Unit>): CPointer<CPointer<Unit>> {
        return ImGuiStorage_GetVoidPtrRef(this, key, default_val)
    }

    public func SetAllInt(val: Int32): Unit {
        return ImGuiStorage_SetAllInt(this, val)
    }

    public func SetBool(key: ImGuiID, val: Bool): Unit {
        return ImGuiStorage_SetBool(this, key, val)
    }

    public func SetFloat(key: ImGuiID, val: Float32): Unit {
        return ImGuiStorage_SetFloat(this, key, val)
    }

    public func SetInt(key: ImGuiID, val: Int32): Unit {
        return ImGuiStorage_SetInt(this, key, val)
    }

    public func SetVoidPtr(key: ImGuiID, val: Ref<Unit>): Unit {
        return ImGuiStorage_SetVoidPtr(this, key, val)
    }
}

public class ImGuiStyle <: StructWrapper<capi.ImGuiStyle> {
    public init(value!: ?capi.ImGuiStyle, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiStyle>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiStyle_ImGuiStyle().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiStyle_destroy(this.pointer)
        }
    }

    public mut prop Alpha: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_Alpha(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_Alpha(pointer).write(value) }
        }
    }

    public mut prop DisabledAlpha: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_DisabledAlpha(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_DisabledAlpha(pointer).write(value) }
        }
    }

    public mut prop WindowPadding: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiStyle_WindowPadding(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_WindowPadding(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop WindowRounding: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_WindowRounding(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_WindowRounding(pointer).write(value) }
        }
    }

    public mut prop WindowBorderSize: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_WindowBorderSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_WindowBorderSize(pointer).write(value) }
        }
    }

    public mut prop WindowMinSize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiStyle_WindowMinSize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_WindowMinSize(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop WindowTitleAlign: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiStyle_WindowTitleAlign(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_WindowTitleAlign(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop WindowMenuButtonPosition: ImGuiDir {
        get() {
            return unsafe { capi.access_ImGuiStyle_WindowMenuButtonPosition(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_WindowMenuButtonPosition(pointer).write(value) }
        }
    }

    public mut prop ChildRounding: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_ChildRounding(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_ChildRounding(pointer).write(value) }
        }
    }

    public mut prop ChildBorderSize: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_ChildBorderSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_ChildBorderSize(pointer).write(value) }
        }
    }

    public mut prop PopupRounding: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_PopupRounding(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_PopupRounding(pointer).write(value) }
        }
    }

    public mut prop PopupBorderSize: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_PopupBorderSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_PopupBorderSize(pointer).write(value) }
        }
    }

    public mut prop FramePadding: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiStyle_FramePadding(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_FramePadding(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop FrameRounding: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_FrameRounding(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_FrameRounding(pointer).write(value) }
        }
    }

    public mut prop FrameBorderSize: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_FrameBorderSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_FrameBorderSize(pointer).write(value) }
        }
    }

    public mut prop ItemSpacing: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiStyle_ItemSpacing(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_ItemSpacing(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop ItemInnerSpacing: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiStyle_ItemInnerSpacing(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_ItemInnerSpacing(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop CellPadding: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiStyle_CellPadding(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_CellPadding(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop TouchExtraPadding: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiStyle_TouchExtraPadding(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_TouchExtraPadding(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop IndentSpacing: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_IndentSpacing(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_IndentSpacing(pointer).write(value) }
        }
    }

    public mut prop ColumnsMinSpacing: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_ColumnsMinSpacing(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_ColumnsMinSpacing(pointer).write(value) }
        }
    }

    public mut prop ScrollbarSize: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_ScrollbarSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_ScrollbarSize(pointer).write(value) }
        }
    }

    public mut prop ScrollbarRounding: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_ScrollbarRounding(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_ScrollbarRounding(pointer).write(value) }
        }
    }

    public mut prop GrabMinSize: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_GrabMinSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_GrabMinSize(pointer).write(value) }
        }
    }

    public mut prop GrabRounding: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_GrabRounding(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_GrabRounding(pointer).write(value) }
        }
    }

    public mut prop LogSliderDeadzone: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_LogSliderDeadzone(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_LogSliderDeadzone(pointer).write(value) }
        }
    }

    public mut prop TabRounding: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_TabRounding(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_TabRounding(pointer).write(value) }
        }
    }

    public mut prop TabBorderSize: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_TabBorderSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_TabBorderSize(pointer).write(value) }
        }
    }

    public mut prop TabMinWidthForCloseButton: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_TabMinWidthForCloseButton(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_TabMinWidthForCloseButton(pointer).write(value) }
        }
    }

    public mut prop TabBarBorderSize: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_TabBarBorderSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_TabBarBorderSize(pointer).write(value) }
        }
    }

    public mut prop TableAngledHeadersAngle: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_TableAngledHeadersAngle(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_TableAngledHeadersAngle(pointer).write(value) }
        }
    }

    public mut prop TableAngledHeadersTextAlign: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiStyle_TableAngledHeadersTextAlign(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_TableAngledHeadersTextAlign(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop ColorButtonPosition: ImGuiDir {
        get() {
            return unsafe { capi.access_ImGuiStyle_ColorButtonPosition(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_ColorButtonPosition(pointer).write(value) }
        }
    }

    public mut prop ButtonTextAlign: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiStyle_ButtonTextAlign(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_ButtonTextAlign(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop SelectableTextAlign: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiStyle_SelectableTextAlign(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_SelectableTextAlign(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop SeparatorTextBorderSize: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_SeparatorTextBorderSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_SeparatorTextBorderSize(pointer).write(value) }
        }
    }

    public mut prop SeparatorTextAlign: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiStyle_SeparatorTextAlign(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_SeparatorTextAlign(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop SeparatorTextPadding: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiStyle_SeparatorTextPadding(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_SeparatorTextPadding(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop DisplayWindowPadding: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiStyle_DisplayWindowPadding(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_DisplayWindowPadding(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop DisplaySafeAreaPadding: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiStyle_DisplaySafeAreaPadding(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_DisplaySafeAreaPadding(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop DockingSeparatorSize: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_DockingSeparatorSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_DockingSeparatorSize(pointer).write(value) }
        }
    }

    public mut prop MouseCursorScale: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_MouseCursorScale(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_MouseCursorScale(pointer).write(value) }
        }
    }

    public mut prop AntiAliasedLines: Bool {
        get() {
            return unsafe { capi.access_ImGuiStyle_AntiAliasedLines(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_AntiAliasedLines(pointer).write(value) }
        }
    }

    public mut prop AntiAliasedLinesUseTex: Bool {
        get() {
            return unsafe { capi.access_ImGuiStyle_AntiAliasedLinesUseTex(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_AntiAliasedLinesUseTex(pointer).write(value) }
        }
    }

    public mut prop AntiAliasedFill: Bool {
        get() {
            return unsafe { capi.access_ImGuiStyle_AntiAliasedFill(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_AntiAliasedFill(pointer).write(value) }
        }
    }

    public mut prop CurveTessellationTol: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_CurveTessellationTol(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_CurveTessellationTol(pointer).write(value) }
        }
    }

    public mut prop CircleTessellationMaxError: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_CircleTessellationMaxError(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_CircleTessellationMaxError(pointer).write(value) }
        }
    }

    public mut prop Colors: ImVec4 {
        get() {
            return unsafe { ImVec4(capi.access_ImGuiStyle_Colors(pointer).read(), count: 55, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop HoverStationaryDelay: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_HoverStationaryDelay(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_HoverStationaryDelay(pointer).write(value) }
        }
    }

    public mut prop HoverDelayShort: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_HoverDelayShort(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_HoverDelayShort(pointer).write(value) }
        }
    }

    public mut prop HoverDelayNormal: Float32 {
        get() {
            return unsafe { capi.access_ImGuiStyle_HoverDelayNormal(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_HoverDelayNormal(pointer).write(value) }
        }
    }

    public mut prop HoverFlagsForTooltipMouse: ImGuiHoveredFlags {
        get() {
            return unsafe { capi.access_ImGuiStyle_HoverFlagsForTooltipMouse(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_HoverFlagsForTooltipMouse(pointer).write(value) }
        }
    }

    public mut prop HoverFlagsForTooltipNav: ImGuiHoveredFlags {
        get() {
            return unsafe { capi.access_ImGuiStyle_HoverFlagsForTooltipNav(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiStyle_HoverFlagsForTooltipNav(pointer).write(value) }
        }
    }

    public func ScaleAllSizes(scale_factor: Float32): Unit {
        return ImGuiStyle_ScaleAllSizes(this, scale_factor)
    }
}

public class ImGuiTabBar <: StructWrapper<capi.ImGuiTabBar> {
    public init(value!: ?capi.ImGuiTabBar, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiTabBar>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiTabBar_ImGuiTabBar().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiTabBar_destroy(this.pointer)
        }
    }

    public mut prop Tabs: ImVector_ImGuiTabItem {
        get() {
            return unsafe { ImVector_ImGuiTabItem(capi.access_ImGuiTabBar_Tabs(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_Tabs(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Flags: ImGuiTabBarFlags {
        get() {
            return unsafe { capi.access_ImGuiTabBar_Flags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_Flags(pointer).write(value) }
        }
    }

    public mut prop ID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiTabBar_ID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_ID(pointer).write(value) }
        }
    }

    public mut prop SelectedTabId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiTabBar_SelectedTabId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_SelectedTabId(pointer).write(value) }
        }
    }

    public mut prop NextSelectedTabId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiTabBar_NextSelectedTabId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_NextSelectedTabId(pointer).write(value) }
        }
    }

    public mut prop VisibleTabId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiTabBar_VisibleTabId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_VisibleTabId(pointer).write(value) }
        }
    }

    public mut prop CurrFrameVisible: Int32 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_CurrFrameVisible(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_CurrFrameVisible(pointer).write(value) }
        }
    }

    public mut prop PrevFrameVisible: Int32 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_PrevFrameVisible(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_PrevFrameVisible(pointer).write(value) }
        }
    }

    public mut prop BarRect: ImRect {
        get() {
            return unsafe { ImRect(capi.access_ImGuiTabBar_BarRect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_BarRect(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop CurrTabsContentsHeight: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_CurrTabsContentsHeight(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_CurrTabsContentsHeight(pointer).write(value) }
        }
    }

    public mut prop PrevTabsContentsHeight: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_PrevTabsContentsHeight(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_PrevTabsContentsHeight(pointer).write(value) }
        }
    }

    public mut prop WidthAllTabs: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_WidthAllTabs(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_WidthAllTabs(pointer).write(value) }
        }
    }

    public mut prop WidthAllTabsIdeal: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_WidthAllTabsIdeal(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_WidthAllTabsIdeal(pointer).write(value) }
        }
    }

    public mut prop ScrollingAnim: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_ScrollingAnim(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_ScrollingAnim(pointer).write(value) }
        }
    }

    public mut prop ScrollingTarget: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_ScrollingTarget(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_ScrollingTarget(pointer).write(value) }
        }
    }

    public mut prop ScrollingTargetDistToVisibility: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_ScrollingTargetDistToVisibility(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_ScrollingTargetDistToVisibility(pointer).write(value) }
        }
    }

    public mut prop ScrollingSpeed: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_ScrollingSpeed(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_ScrollingSpeed(pointer).write(value) }
        }
    }

    public mut prop ScrollingRectMinX: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_ScrollingRectMinX(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_ScrollingRectMinX(pointer).write(value) }
        }
    }

    public mut prop ScrollingRectMaxX: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_ScrollingRectMaxX(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_ScrollingRectMaxX(pointer).write(value) }
        }
    }

    public mut prop SeparatorMinX: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_SeparatorMinX(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_SeparatorMinX(pointer).write(value) }
        }
    }

    public mut prop SeparatorMaxX: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_SeparatorMaxX(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_SeparatorMaxX(pointer).write(value) }
        }
    }

    public mut prop ReorderRequestTabId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiTabBar_ReorderRequestTabId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_ReorderRequestTabId(pointer).write(value) }
        }
    }

    public mut prop ReorderRequestOffset: ImS16 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_ReorderRequestOffset(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_ReorderRequestOffset(pointer).write(value) }
        }
    }

    public mut prop BeginCount: ImS8 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_BeginCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_BeginCount(pointer).write(value) }
        }
    }

    public mut prop WantLayout: Bool {
        get() {
            return unsafe { capi.access_ImGuiTabBar_WantLayout(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_WantLayout(pointer).write(value) }
        }
    }

    public mut prop VisibleTabWasSubmitted: Bool {
        get() {
            return unsafe { capi.access_ImGuiTabBar_VisibleTabWasSubmitted(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_VisibleTabWasSubmitted(pointer).write(value) }
        }
    }

    public mut prop TabsAddedNew: Bool {
        get() {
            return unsafe { capi.access_ImGuiTabBar_TabsAddedNew(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_TabsAddedNew(pointer).write(value) }
        }
    }

    public mut prop TabsActiveCount: ImS16 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_TabsActiveCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_TabsActiveCount(pointer).write(value) }
        }
    }

    public mut prop LastTabItemIdx: ImS16 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_LastTabItemIdx(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_LastTabItemIdx(pointer).write(value) }
        }
    }

    public mut prop ItemSpacingY: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabBar_ItemSpacingY(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_ItemSpacingY(pointer).write(value) }
        }
    }

    public mut prop FramePadding: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiTabBar_FramePadding(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_FramePadding(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop BackupCursorPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiTabBar_BackupCursorPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_BackupCursorPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop TabsNames: ImGuiTextBuffer {
        get() {
            return unsafe { ImGuiTextBuffer(capi.access_ImGuiTabBar_TabsNames(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabBar_TabsNames(pointer).write(value.getCPointer().read()) }
        }
    }
}

public class ImGuiTabItem <: StructWrapper<capi.ImGuiTabItem> {
    public init(value!: ?capi.ImGuiTabItem, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiTabItem>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiTabItem_ImGuiTabItem().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiTabItem_destroy(this.pointer)
        }
    }

    public mut prop ID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiTabItem_ID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabItem_ID(pointer).write(value) }
        }
    }

    public mut prop Flags: ImGuiTabItemFlags {
        get() {
            return unsafe { capi.access_ImGuiTabItem_Flags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabItem_Flags(pointer).write(value) }
        }
    }

    public mut prop Window: Ref<ImGuiWindow> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiTabItem_Window(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabItem_Window(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop LastFrameVisible: Int32 {
        get() {
            return unsafe { capi.access_ImGuiTabItem_LastFrameVisible(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabItem_LastFrameVisible(pointer).write(value) }
        }
    }

    public mut prop LastFrameSelected: Int32 {
        get() {
            return unsafe { capi.access_ImGuiTabItem_LastFrameSelected(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabItem_LastFrameSelected(pointer).write(value) }
        }
    }

    public mut prop Offset: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabItem_Offset(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabItem_Offset(pointer).write(value) }
        }
    }

    public mut prop Width: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabItem_Width(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabItem_Width(pointer).write(value) }
        }
    }

    public mut prop ContentWidth: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabItem_ContentWidth(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabItem_ContentWidth(pointer).write(value) }
        }
    }

    public mut prop RequestedWidth: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTabItem_RequestedWidth(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabItem_RequestedWidth(pointer).write(value) }
        }
    }

    public mut prop NameOffset: ImS32 {
        get() {
            return unsafe { capi.access_ImGuiTabItem_NameOffset(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabItem_NameOffset(pointer).write(value) }
        }
    }

    public mut prop BeginOrder: ImS16 {
        get() {
            return unsafe { capi.access_ImGuiTabItem_BeginOrder(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabItem_BeginOrder(pointer).write(value) }
        }
    }

    public mut prop IndexDuringLayout: ImS16 {
        get() {
            return unsafe { capi.access_ImGuiTabItem_IndexDuringLayout(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabItem_IndexDuringLayout(pointer).write(value) }
        }
    }

    public mut prop WantClose: Bool {
        get() {
            return unsafe { capi.access_ImGuiTabItem_WantClose(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTabItem_WantClose(pointer).write(value) }
        }
    }
}

public class ImGuiTableCellData <: StructWrapper<capi.ImGuiTableCellData> {
    public init(value!: ?capi.ImGuiTableCellData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiTableCellData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop BgColor: ImU32 {
        get() {
            return unsafe { capi.access_ImGuiTableCellData_BgColor(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableCellData_BgColor(pointer).write(value) }
        }
    }

    public mut prop Column: ImGuiTableColumnIdx {
        get() {
            return unsafe { capi.access_ImGuiTableCellData_Column(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableCellData_Column(pointer).write(value) }
        }
    }
}

public class ImGuiTableColumnSortSpecs <: StructWrapper<capi.ImGuiTableColumnSortSpecs> {
    public init(value!: ?capi.ImGuiTableColumnSortSpecs, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiTableColumnSortSpecs>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiTableColumnSortSpecs_destroy(this.pointer)
        }
    }

    public mut prop ColumnUserID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiTableColumnSortSpecs_ColumnUserID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableColumnSortSpecs_ColumnUserID(pointer).write(value) }
        }
    }

    public mut prop ColumnIndex: ImS16 {
        get() {
            return unsafe { capi.access_ImGuiTableColumnSortSpecs_ColumnIndex(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableColumnSortSpecs_ColumnIndex(pointer).write(value) }
        }
    }

    public mut prop SortOrder: ImS16 {
        get() {
            return unsafe { capi.access_ImGuiTableColumnSortSpecs_SortOrder(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableColumnSortSpecs_SortOrder(pointer).write(value) }
        }
    }

    public mut prop SortDirection: ImGuiSortDirection {
        get() {
            return unsafe { capi.access_ImGuiTableColumnSortSpecs_SortDirection(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableColumnSortSpecs_SortDirection(pointer).write(value) }
        }
    }
}

public class ImGuiTableHeaderData <: StructWrapper<capi.ImGuiTableHeaderData> {
    public init(value!: ?capi.ImGuiTableHeaderData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiTableHeaderData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Index: ImGuiTableColumnIdx {
        get() {
            return unsafe { capi.access_ImGuiTableHeaderData_Index(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableHeaderData_Index(pointer).write(value) }
        }
    }

    public mut prop TextColor: ImU32 {
        get() {
            return unsafe { capi.access_ImGuiTableHeaderData_TextColor(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableHeaderData_TextColor(pointer).write(value) }
        }
    }

    public mut prop BgColor0: ImU32 {
        get() {
            return unsafe { capi.access_ImGuiTableHeaderData_BgColor0(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableHeaderData_BgColor0(pointer).write(value) }
        }
    }

    public mut prop BgColor1: ImU32 {
        get() {
            return unsafe { capi.access_ImGuiTableHeaderData_BgColor1(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableHeaderData_BgColor1(pointer).write(value) }
        }
    }
}

public class ImGuiTableInstanceData <: StructWrapper<capi.ImGuiTableInstanceData> {
    public init(value!: ?capi.ImGuiTableInstanceData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiTableInstanceData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiTableInstanceData_ImGuiTableInstanceData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiTableInstanceData_destroy(this.pointer)
        }
    }

    public mut prop TableInstanceID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiTableInstanceData_TableInstanceID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableInstanceData_TableInstanceID(pointer).write(value) }
        }
    }

    public mut prop LastOuterHeight: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTableInstanceData_LastOuterHeight(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableInstanceData_LastOuterHeight(pointer).write(value) }
        }
    }

    public mut prop LastTopHeadersRowHeight: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTableInstanceData_LastTopHeadersRowHeight(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableInstanceData_LastTopHeadersRowHeight(pointer).write(value) }
        }
    }

    public mut prop LastFrozenHeight: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTableInstanceData_LastFrozenHeight(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableInstanceData_LastFrozenHeight(pointer).write(value) }
        }
    }

    public mut prop HoveredRowLast: Int32 {
        get() {
            return unsafe { capi.access_ImGuiTableInstanceData_HoveredRowLast(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableInstanceData_HoveredRowLast(pointer).write(value) }
        }
    }

    public mut prop HoveredRowNext: Int32 {
        get() {
            return unsafe { capi.access_ImGuiTableInstanceData_HoveredRowNext(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableInstanceData_HoveredRowNext(pointer).write(value) }
        }
    }
}

public class ImGuiTableSettings <: StructWrapper<capi.ImGuiTableSettings> {
    public init(value!: ?capi.ImGuiTableSettings, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiTableSettings>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiTableSettings_ImGuiTableSettings().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiTableSettings_destroy(this.pointer)
        }
    }

    public mut prop ID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiTableSettings_ID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableSettings_ID(pointer).write(value) }
        }
    }

    public mut prop SaveFlags: ImGuiTableFlags {
        get() {
            return unsafe { capi.access_ImGuiTableSettings_SaveFlags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableSettings_SaveFlags(pointer).write(value) }
        }
    }

    public mut prop RefScale: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTableSettings_RefScale(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableSettings_RefScale(pointer).write(value) }
        }
    }

    public mut prop ColumnsCount: ImGuiTableColumnIdx {
        get() {
            return unsafe { capi.access_ImGuiTableSettings_ColumnsCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableSettings_ColumnsCount(pointer).write(value) }
        }
    }

    public mut prop ColumnsCountMax: ImGuiTableColumnIdx {
        get() {
            return unsafe { capi.access_ImGuiTableSettings_ColumnsCountMax(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableSettings_ColumnsCountMax(pointer).write(value) }
        }
    }

    public mut prop WantApply: Bool {
        get() {
            return unsafe { capi.access_ImGuiTableSettings_WantApply(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableSettings_WantApply(pointer).write(value) }
        }
    }

    public func GetColumnSettings(): Ref<ImGuiTableColumnSettings> {
        return ImGuiTableSettings_GetColumnSettings(this)
    }
}

public class ImGuiTableSortSpecs <: StructWrapper<capi.ImGuiTableSortSpecs> {
    public init(value!: ?capi.ImGuiTableSortSpecs, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiTableSortSpecs>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiTableSortSpecs_ImGuiTableSortSpecs().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiTableSortSpecs_destroy(this.pointer)
        }
    }

    public mut prop Specs: ImGuiTableColumnSortSpecs {
        get() {
            return unsafe { ImGuiTableColumnSortSpecs(capi.access_ImGuiTableSortSpecs_Specs(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableSortSpecs_Specs(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop SpecsCount: Int32 {
        get() {
            return unsafe { capi.access_ImGuiTableSortSpecs_SpecsCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableSortSpecs_SpecsCount(pointer).write(value) }
        }
    }

    public mut prop SpecsDirty: Bool {
        get() {
            return unsafe { capi.access_ImGuiTableSortSpecs_SpecsDirty(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableSortSpecs_SpecsDirty(pointer).write(value) }
        }
    }
}

public class ImGuiTableTempData <: StructWrapper<capi.ImGuiTableTempData> {
    public init(value!: ?capi.ImGuiTableTempData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiTableTempData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiTableTempData_ImGuiTableTempData().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiTableTempData_destroy(this.pointer)
        }
    }

    public mut prop TableIndex: Int32 {
        get() {
            return unsafe { capi.access_ImGuiTableTempData_TableIndex(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableTempData_TableIndex(pointer).write(value) }
        }
    }

    public mut prop LastTimeActive: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTableTempData_LastTimeActive(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableTempData_LastTimeActive(pointer).write(value) }
        }
    }

    public mut prop AngledHeadersExtraWidth: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTableTempData_AngledHeadersExtraWidth(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableTempData_AngledHeadersExtraWidth(pointer).write(value) }
        }
    }

    public mut prop AngledHeadersRequests: ImVector_ImGuiTableHeaderData {
        get() {
            return unsafe { ImVector_ImGuiTableHeaderData(capi.access_ImGuiTableTempData_AngledHeadersRequests(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableTempData_AngledHeadersRequests(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop UserOuterSize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiTableTempData_UserOuterSize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableTempData_UserOuterSize(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop DrawSplitter: ImDrawListSplitter {
        get() {
            return unsafe { ImDrawListSplitter(capi.access_ImGuiTableTempData_DrawSplitter(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableTempData_DrawSplitter(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop HostBackupWorkRect: ImRect {
        get() {
            return unsafe { ImRect(capi.access_ImGuiTableTempData_HostBackupWorkRect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableTempData_HostBackupWorkRect(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop HostBackupParentWorkRect: ImRect {
        get() {
            return unsafe { ImRect(capi.access_ImGuiTableTempData_HostBackupParentWorkRect(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableTempData_HostBackupParentWorkRect(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop HostBackupPrevLineSize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiTableTempData_HostBackupPrevLineSize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableTempData_HostBackupPrevLineSize(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop HostBackupCurrLineSize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiTableTempData_HostBackupCurrLineSize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableTempData_HostBackupCurrLineSize(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop HostBackupCursorMaxPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiTableTempData_HostBackupCursorMaxPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableTempData_HostBackupCursorMaxPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop HostBackupColumnsOffset: ImVec1 {
        get() {
            return unsafe { ImVec1(capi.access_ImGuiTableTempData_HostBackupColumnsOffset(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableTempData_HostBackupColumnsOffset(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop HostBackupItemWidth: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTableTempData_HostBackupItemWidth(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableTempData_HostBackupItemWidth(pointer).write(value) }
        }
    }

    public mut prop HostBackupItemWidthStackSize: Int32 {
        get() {
            return unsafe { capi.access_ImGuiTableTempData_HostBackupItemWidthStackSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTableTempData_HostBackupItemWidthStackSize(pointer).write(value) }
        }
    }
}

public class ImGuiTextBuffer <: StructWrapper<capi.ImGuiTextBuffer> {
    public init(value!: ?capi.ImGuiTextBuffer, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiTextBuffer>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiTextBuffer_ImGuiTextBuffer().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiTextBuffer_destroy(this.pointer)
        }
    }

    public mut prop Buf: ImVector_char {
        get() {
            return unsafe { ImVector_char(capi.access_ImGuiTextBuffer_Buf(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTextBuffer_Buf(pointer).write(value.getCPointer().read()) }
        }
    }

    public func append(str: CStringConvertable, str_end: CStringConvertable): Unit {
        return ImGuiTextBuffer_append(this, str, str_end)
    }

    public func appendf(fmt: CStringConvertable): Unit {
        return ImGuiTextBuffer_appendf(this, fmt)
    }


    public func begin(): String {
        return ImGuiTextBuffer_begin(this)
    }

    public func c_str(): String {
        return ImGuiTextBuffer_c_str(this)
    }

    public func clear(): Unit {
        return ImGuiTextBuffer_clear(this)
    }

    public func empty(): Bool {
        return ImGuiTextBuffer_empty(this)
    }

    public func end(): String {
        return ImGuiTextBuffer_end(this)
    }

    public func reserve(capacity: Int32): Unit {
        return ImGuiTextBuffer_reserve(this, capacity)
    }

    public func size(): Int32 {
        return ImGuiTextBuffer_size(this)
    }
}

public class ImGuiTextFilter <: StructWrapper<capi.ImGuiTextFilter> {
    public init(value!: ?capi.ImGuiTextFilter, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiTextFilter>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init(default_filter: CStringConvertable) {
        super(ImGuiTextFilter_ImGuiTextFilter(default_filter).getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiTextFilter_destroy(this.pointer)
        }
    }

    public mut prop InputBuf: Ref<UInt8> {
        get() {
            return unsafe { Ref<UInt8>.unsafeMake(capi.access_ImGuiTextFilter_InputBuf(pointer).read(), count: 256, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop Filters: ImVector_ImGuiTextRange {
        get() {
            return unsafe { ImVector_ImGuiTextRange(capi.access_ImGuiTextFilter_Filters(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTextFilter_Filters(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop CountGrep: Int32 {
        get() {
            return unsafe { capi.access_ImGuiTextFilter_CountGrep(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTextFilter_CountGrep(pointer).write(value) }
        }
    }

    public func Build(): Unit {
        return ImGuiTextFilter_Build(this)
    }

    public func Clear(): Unit {
        return ImGuiTextFilter_Clear(this)
    }

    public func Draw(label: CStringConvertable, width: Float32): Bool {
        return ImGuiTextFilter_Draw(this, label, width)
    }

    public func IsActive(): Bool {
        return ImGuiTextFilter_IsActive(this)
    }

    public func PassFilter(text: CStringConvertable, text_end: CStringConvertable): Bool {
        return ImGuiTextFilter_PassFilter(this, text, text_end)
    }
}

public class ImGuiTextIndex <: StructWrapper<capi.ImGuiTextIndex> {
    public init(value!: ?capi.ImGuiTextIndex, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiTextIndex>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop LineOffsets: ImVector_int {
        get() {
            return unsafe { ImVector_int(capi.access_ImGuiTextIndex_LineOffsets(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTextIndex_LineOffsets(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop EndOffset: Int32 {
        get() {
            return unsafe { capi.access_ImGuiTextIndex_EndOffset(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTextIndex_EndOffset(pointer).write(value) }
        }
    }

    public func append(base: CStringConvertable, old_size: Int32, new_size: Int32): Unit {
        return ImGuiTextIndex_append(this, base, old_size, new_size)
    }

    public func clear(): Unit {
        return ImGuiTextIndex_clear(this)
    }

    public func get_line_begin(base: CStringConvertable, n: Int32): String {
        return ImGuiTextIndex_get_line_begin(this, base, n)
    }

    public func get_line_end(base: CStringConvertable, n: Int32): String {
        return ImGuiTextIndex_get_line_end(this, base, n)
    }

    public func size(): Int32 {
        return ImGuiTextIndex_size(this)
    }
}

public class ImGuiTextRange <: StructWrapper<capi.ImGuiTextRange> {
    public init(value!: ?capi.ImGuiTextRange, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiTextRange>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiTextRange_ImGuiTextRange_Nil().getCPointer(), count: None, owned: true)
    }

    public init(_b: CStringConvertable, _e: CStringConvertable) {
        super(ImGuiTextRange_ImGuiTextRange_Str(_b, _e).getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiTextRange_destroy(this.pointer)
        }
    }

    public mut prop b: String {
        get() {
            return unsafe { CString(capi.access_ImGuiTextRange_b(pointer).read()).toString() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTextRange_b(pointer).write(value.asCString()) }
        }
    }

    public mut prop e: String {
        get() {
            return unsafe { CString(capi.access_ImGuiTextRange_e(pointer).read()).toString() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTextRange_e(pointer).write(value.asCString()) }
        }
    }

    public func empty(): Bool {
        return ImGuiTextRange_empty(this)
    }

    public func split(separator: UInt8, out: ImVector_ImGuiTextRange): Unit {
        return ImGuiTextRange_split(this, separator, out)
    }
}

public class ImGuiTypingSelectRequest <: StructWrapper<capi.ImGuiTypingSelectRequest> {
    public init(value!: ?capi.ImGuiTypingSelectRequest, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiTypingSelectRequest>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Flags: ImGuiTypingSelectFlags {
        get() {
            return unsafe { capi.access_ImGuiTypingSelectRequest_Flags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTypingSelectRequest_Flags(pointer).write(value) }
        }
    }

    public mut prop SearchBufferLen: Int32 {
        get() {
            return unsafe { capi.access_ImGuiTypingSelectRequest_SearchBufferLen(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTypingSelectRequest_SearchBufferLen(pointer).write(value) }
        }
    }

    public mut prop SearchBuffer: String {
        get() {
            return unsafe { CString(capi.access_ImGuiTypingSelectRequest_SearchBuffer(pointer).read()).toString() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTypingSelectRequest_SearchBuffer(pointer).write(value.asCString()) }
        }
    }

    public mut prop SelectRequest: Bool {
        get() {
            return unsafe { capi.access_ImGuiTypingSelectRequest_SelectRequest(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTypingSelectRequest_SelectRequest(pointer).write(value) }
        }
    }

    public mut prop SingleCharMode: Bool {
        get() {
            return unsafe { capi.access_ImGuiTypingSelectRequest_SingleCharMode(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTypingSelectRequest_SingleCharMode(pointer).write(value) }
        }
    }

    public mut prop SingleCharSize: ImS8 {
        get() {
            return unsafe { capi.access_ImGuiTypingSelectRequest_SingleCharSize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTypingSelectRequest_SingleCharSize(pointer).write(value) }
        }
    }
}

public class ImGuiTypingSelectState <: StructWrapper<capi.ImGuiTypingSelectState> {
    public init(value!: ?capi.ImGuiTypingSelectState, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiTypingSelectState>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiTypingSelectState_ImGuiTypingSelectState().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiTypingSelectState_destroy(this.pointer)
        }
    }

    public mut prop Request: ImGuiTypingSelectRequest {
        get() {
            return unsafe { ImGuiTypingSelectRequest(capi.access_ImGuiTypingSelectState_Request(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiTypingSelectState_Request(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop SearchBuffer: Ref<UInt8> {
        get() {
            return unsafe { Ref<UInt8>.unsafeMake(capi.access_ImGuiTypingSelectState_SearchBuffer(pointer).read(), count: 64, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop FocusScope: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiTypingSelectState_FocusScope(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTypingSelectState_FocusScope(pointer).write(value) }
        }
    }

    public mut prop LastRequestFrame: Int32 {
        get() {
            return unsafe { capi.access_ImGuiTypingSelectState_LastRequestFrame(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTypingSelectState_LastRequestFrame(pointer).write(value) }
        }
    }

    public mut prop LastRequestTime: Float32 {
        get() {
            return unsafe { capi.access_ImGuiTypingSelectState_LastRequestTime(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTypingSelectState_LastRequestTime(pointer).write(value) }
        }
    }

    public mut prop SingleCharModeLock: Bool {
        get() {
            return unsafe { capi.access_ImGuiTypingSelectState_SingleCharModeLock(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiTypingSelectState_SingleCharModeLock(pointer).write(value) }
        }
    }

    public func Clear(): Unit {
        return ImGuiTypingSelectState_Clear(this)
    }
}

public class ImGuiViewport <: StructWrapper<capi.ImGuiViewport> {
    public init(value!: ?capi.ImGuiViewport, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiViewport>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiViewport_ImGuiViewport().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiViewport_destroy(this.pointer)
        }
    }

    public mut prop ID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiViewport_ID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_ID(pointer).write(value) }
        }
    }

    public mut prop Flags: ImGuiViewportFlags {
        get() {
            return unsafe { capi.access_ImGuiViewport_Flags(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_Flags(pointer).write(value) }
        }
    }

    public mut prop Pos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiViewport_Pos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_Pos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Size: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiViewport_Size(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_Size(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop WorkPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiViewport_WorkPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_WorkPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop WorkSize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiViewport_WorkSize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_WorkSize(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop DpiScale: Float32 {
        get() {
            return unsafe { capi.access_ImGuiViewport_DpiScale(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_DpiScale(pointer).write(value) }
        }
    }

    public mut prop ParentViewportId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiViewport_ParentViewportId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_ParentViewportId(pointer).write(value) }
        }
    }

    public mut prop DrawData: ImDrawData {
        get() {
            return unsafe { ImDrawData(capi.access_ImGuiViewport_DrawData(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_DrawData(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop RendererUserData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiViewport_RendererUserData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_RendererUserData(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop PlatformUserData: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiViewport_PlatformUserData(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_PlatformUserData(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop PlatformHandle: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiViewport_PlatformHandle(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_PlatformHandle(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop PlatformHandleRaw: Ref<Unit> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiViewport_PlatformHandleRaw(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_PlatformHandleRaw(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop PlatformWindowCreated: Bool {
        get() {
            return unsafe { capi.access_ImGuiViewport_PlatformWindowCreated(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_PlatformWindowCreated(pointer).write(value) }
        }
    }

    public mut prop PlatformRequestMove: Bool {
        get() {
            return unsafe { capi.access_ImGuiViewport_PlatformRequestMove(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_PlatformRequestMove(pointer).write(value) }
        }
    }

    public mut prop PlatformRequestResize: Bool {
        get() {
            return unsafe { capi.access_ImGuiViewport_PlatformRequestResize(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_PlatformRequestResize(pointer).write(value) }
        }
    }

    public mut prop PlatformRequestClose: Bool {
        get() {
            return unsafe { capi.access_ImGuiViewport_PlatformRequestClose(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewport_PlatformRequestClose(pointer).write(value) }
        }
    }

    public func GetCenter(pOut: ImVec2): Unit {
        return ImGuiViewport_GetCenter(pOut, this)
    }

    public func GetWorkCenter(pOut: ImVec2): Unit {
        return ImGuiViewport_GetWorkCenter(pOut, this)
    }
}

public class ImGuiViewportP <: StructWrapper<capi.ImGuiViewportP> {
    public init(value!: ?capi.ImGuiViewportP, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiViewportP>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiViewportP_ImGuiViewportP().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiViewportP_destroy(this.pointer)
        }
    }

    public mut prop _ImGuiViewport: ImGuiViewport {
        get() {
            return unsafe { ImGuiViewport(capi.access_ImGuiViewportP__ImGuiViewport(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP__ImGuiViewport(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Window: Ref<ImGuiWindow> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiViewportP_Window(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_Window(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop Idx: Int32 {
        get() {
            return unsafe { capi.access_ImGuiViewportP_Idx(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_Idx(pointer).write(value) }
        }
    }

    public mut prop LastFrameActive: Int32 {
        get() {
            return unsafe { capi.access_ImGuiViewportP_LastFrameActive(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_LastFrameActive(pointer).write(value) }
        }
    }

    public mut prop LastFocusedStampCount: Int32 {
        get() {
            return unsafe { capi.access_ImGuiViewportP_LastFocusedStampCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_LastFocusedStampCount(pointer).write(value) }
        }
    }

    public mut prop LastNameHash: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiViewportP_LastNameHash(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_LastNameHash(pointer).write(value) }
        }
    }

    public mut prop LastPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiViewportP_LastPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_LastPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Alpha: Float32 {
        get() {
            return unsafe { capi.access_ImGuiViewportP_Alpha(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_Alpha(pointer).write(value) }
        }
    }

    public mut prop LastAlpha: Float32 {
        get() {
            return unsafe { capi.access_ImGuiViewportP_LastAlpha(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_LastAlpha(pointer).write(value) }
        }
    }

    public mut prop LastFocusedHadNavWindow: Bool {
        get() {
            return unsafe { capi.access_ImGuiViewportP_LastFocusedHadNavWindow(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_LastFocusedHadNavWindow(pointer).write(value) }
        }
    }

    public mut prop PlatformMonitor: Int16 {
        get() {
            return unsafe { capi.access_ImGuiViewportP_PlatformMonitor(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_PlatformMonitor(pointer).write(value) }
        }
    }

    public mut prop BgFgDrawListsLastFrame: Ref<Int32> {
        get() {
            return unsafe { Ref<Int32>.unsafeMake(capi.access_ImGuiViewportP_BgFgDrawListsLastFrame(pointer).read(), count: 2, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop BgFgDrawLists: Ref<CPointer<capi.ImDrawList>> {
        get() {
            return unsafe { Ref<CPointer<capi.ImDrawList>>.unsafeMake(capi.access_ImGuiViewportP_BgFgDrawLists(pointer).read(), count: 2, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop DrawDataP: ImDrawData {
        get() {
            return unsafe { ImDrawData(capi.access_ImGuiViewportP_DrawDataP(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_DrawDataP(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop DrawDataBuilder: ImDrawDataBuilder {
        get() {
            return unsafe { ImDrawDataBuilder(capi.access_ImGuiViewportP_DrawDataBuilder(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_DrawDataBuilder(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop LastPlatformPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiViewportP_LastPlatformPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_LastPlatformPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop LastPlatformSize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiViewportP_LastPlatformSize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_LastPlatformSize(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop LastRendererSize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiViewportP_LastRendererSize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_LastRendererSize(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop WorkOffsetMin: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiViewportP_WorkOffsetMin(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_WorkOffsetMin(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop WorkOffsetMax: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiViewportP_WorkOffsetMax(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_WorkOffsetMax(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop BuildWorkOffsetMin: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiViewportP_BuildWorkOffsetMin(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_BuildWorkOffsetMin(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop BuildWorkOffsetMax: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiViewportP_BuildWorkOffsetMax(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiViewportP_BuildWorkOffsetMax(pointer).write(value.getCPointer().read()) }
        }
    }

    public func CalcWorkRectPos(pOut: ImVec2, off_min: ImVec2): Unit {
        return ImGuiViewportP_CalcWorkRectPos(pOut, this, off_min)
    }

    public func CalcWorkRectSize(pOut: ImVec2, off_min: ImVec2, off_max: ImVec2): Unit {
        return ImGuiViewportP_CalcWorkRectSize(pOut, this, off_min, off_max)
    }

    public func ClearRequestFlags(): Unit {
        return ImGuiViewportP_ClearRequestFlags(this)
    }

    public func GetBuildWorkRect(pOut: ImRect): Unit {
        return ImGuiViewportP_GetBuildWorkRect(pOut, this)
    }

    public func GetMainRect(pOut: ImRect): Unit {
        return ImGuiViewportP_GetMainRect(pOut, this)
    }

    public func GetWorkRect(pOut: ImRect): Unit {
        return ImGuiViewportP_GetWorkRect(pOut, this)
    }

    public func UpdateWorkRect(): Unit {
        return ImGuiViewportP_UpdateWorkRect(this)
    }
}

public class ImGuiWindowClass <: StructWrapper<capi.ImGuiWindowClass> {
    public init(value!: ?capi.ImGuiWindowClass, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiWindowClass>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiWindowClass_ImGuiWindowClass().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiWindowClass_destroy(this.pointer)
        }
    }

    public mut prop ClassId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiWindowClass_ClassId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowClass_ClassId(pointer).write(value) }
        }
    }

    public mut prop ParentViewportId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiWindowClass_ParentViewportId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowClass_ParentViewportId(pointer).write(value) }
        }
    }

    public mut prop FocusRouteParentWindowId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiWindowClass_FocusRouteParentWindowId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowClass_FocusRouteParentWindowId(pointer).write(value) }
        }
    }

    public mut prop ViewportFlagsOverrideSet: ImGuiViewportFlags {
        get() {
            return unsafe { capi.access_ImGuiWindowClass_ViewportFlagsOverrideSet(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowClass_ViewportFlagsOverrideSet(pointer).write(value) }
        }
    }

    public mut prop ViewportFlagsOverrideClear: ImGuiViewportFlags {
        get() {
            return unsafe { capi.access_ImGuiWindowClass_ViewportFlagsOverrideClear(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowClass_ViewportFlagsOverrideClear(pointer).write(value) }
        }
    }

    public mut prop TabItemFlagsOverrideSet: ImGuiTabItemFlags {
        get() {
            return unsafe { capi.access_ImGuiWindowClass_TabItemFlagsOverrideSet(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowClass_TabItemFlagsOverrideSet(pointer).write(value) }
        }
    }

    public mut prop DockNodeFlagsOverrideSet: ImGuiDockNodeFlags {
        get() {
            return unsafe { capi.access_ImGuiWindowClass_DockNodeFlagsOverrideSet(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowClass_DockNodeFlagsOverrideSet(pointer).write(value) }
        }
    }

    public mut prop DockingAlwaysTabBar: Bool {
        get() {
            return unsafe { capi.access_ImGuiWindowClass_DockingAlwaysTabBar(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowClass_DockingAlwaysTabBar(pointer).write(value) }
        }
    }

    public mut prop DockingAllowUnclassed: Bool {
        get() {
            return unsafe { capi.access_ImGuiWindowClass_DockingAllowUnclassed(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowClass_DockingAllowUnclassed(pointer).write(value) }
        }
    }
}

public class ImGuiWindowDockStyle <: StructWrapper<capi.ImGuiWindowDockStyle> {
    public init(value!: ?capi.ImGuiWindowDockStyle, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiWindowDockStyle>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Colors: Ref<ImU32> {
        get() {
            return unsafe { Ref<ImU32>.unsafeMake(capi.access_ImGuiWindowDockStyle_Colors(pointer).read(), count: 6, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }
}

public class ImGuiWindowSettings <: StructWrapper<capi.ImGuiWindowSettings> {
    public init(value!: ?capi.ImGuiWindowSettings, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiWindowSettings>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImGuiWindowSettings_ImGuiWindowSettings().getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImGuiWindowSettings_destroy(this.pointer)
        }
    }

    public mut prop ID: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiWindowSettings_ID(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowSettings_ID(pointer).write(value) }
        }
    }

    public mut prop Pos: ImVec2ih {
        get() {
            return unsafe { ImVec2ih(capi.access_ImGuiWindowSettings_Pos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowSettings_Pos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Size: ImVec2ih {
        get() {
            return unsafe { ImVec2ih(capi.access_ImGuiWindowSettings_Size(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowSettings_Size(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop ViewportPos: ImVec2ih {
        get() {
            return unsafe { ImVec2ih(capi.access_ImGuiWindowSettings_ViewportPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowSettings_ViewportPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop ViewportId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiWindowSettings_ViewportId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowSettings_ViewportId(pointer).write(value) }
        }
    }

    public mut prop DockId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiWindowSettings_DockId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowSettings_DockId(pointer).write(value) }
        }
    }

    public mut prop ClassId: ImGuiID {
        get() {
            return unsafe { capi.access_ImGuiWindowSettings_ClassId(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowSettings_ClassId(pointer).write(value) }
        }
    }

    public mut prop DockOrder: Int16 {
        get() {
            return unsafe { capi.access_ImGuiWindowSettings_DockOrder(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowSettings_DockOrder(pointer).write(value) }
        }
    }

    public mut prop Collapsed: Bool {
        get() {
            return unsafe { capi.access_ImGuiWindowSettings_Collapsed(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowSettings_Collapsed(pointer).write(value) }
        }
    }

    public mut prop IsChild: Bool {
        get() {
            return unsafe { capi.access_ImGuiWindowSettings_IsChild(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowSettings_IsChild(pointer).write(value) }
        }
    }

    public mut prop WantApply: Bool {
        get() {
            return unsafe { capi.access_ImGuiWindowSettings_WantApply(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowSettings_WantApply(pointer).write(value) }
        }
    }

    public mut prop WantDelete: Bool {
        get() {
            return unsafe { capi.access_ImGuiWindowSettings_WantDelete(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowSettings_WantDelete(pointer).write(value) }
        }
    }

    public func GetName(): String {
        return ImGuiWindowSettings_GetName(this)
    }
}

public class ImGuiWindowStackData <: StructWrapper<capi.ImGuiWindowStackData> {
    public init(value!: ?capi.ImGuiWindowStackData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiWindowStackData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Window: Ref<ImGuiWindow> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImGuiWindowStackData_Window(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowStackData_Window(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop ParentLastItemDataBackup: ImGuiLastItemData {
        get() {
            return unsafe { ImGuiLastItemData(capi.access_ImGuiWindowStackData_ParentLastItemDataBackup(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowStackData_ParentLastItemDataBackup(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop StackSizesOnBegin: ImGuiStackSizes {
        get() {
            return unsafe { ImGuiStackSizes(capi.access_ImGuiWindowStackData_StackSizesOnBegin(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowStackData_StackSizesOnBegin(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop DisabledOverrideReenable: Bool {
        get() {
            return unsafe { capi.access_ImGuiWindowStackData_DisabledOverrideReenable(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowStackData_DisabledOverrideReenable(pointer).write(value) }
        }
    }
}

public class ImGuiWindowTempData <: StructWrapper<capi.ImGuiWindowTempData> {
    public init(value!: ?capi.ImGuiWindowTempData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImGuiWindowTempData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop CursorPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiWindowTempData_CursorPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_CursorPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop CursorPosPrevLine: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiWindowTempData_CursorPosPrevLine(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_CursorPosPrevLine(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop CursorStartPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiWindowTempData_CursorStartPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_CursorStartPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop CursorMaxPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiWindowTempData_CursorMaxPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_CursorMaxPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop IdealMaxPos: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiWindowTempData_IdealMaxPos(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_IdealMaxPos(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop CurrLineSize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiWindowTempData_CurrLineSize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_CurrLineSize(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop PrevLineSize: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiWindowTempData_PrevLineSize(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_PrevLineSize(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop CurrLineTextBaseOffset: Float32 {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_CurrLineTextBaseOffset(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_CurrLineTextBaseOffset(pointer).write(value) }
        }
    }

    public mut prop PrevLineTextBaseOffset: Float32 {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_PrevLineTextBaseOffset(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_PrevLineTextBaseOffset(pointer).write(value) }
        }
    }

    public mut prop IsSameLine: Bool {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_IsSameLine(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_IsSameLine(pointer).write(value) }
        }
    }

    public mut prop IsSetPos: Bool {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_IsSetPos(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_IsSetPos(pointer).write(value) }
        }
    }

    public mut prop Indent: ImVec1 {
        get() {
            return unsafe { ImVec1(capi.access_ImGuiWindowTempData_Indent(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_Indent(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop ColumnsOffset: ImVec1 {
        get() {
            return unsafe { ImVec1(capi.access_ImGuiWindowTempData_ColumnsOffset(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_ColumnsOffset(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop GroupOffset: ImVec1 {
        get() {
            return unsafe { ImVec1(capi.access_ImGuiWindowTempData_GroupOffset(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_GroupOffset(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop CursorStartPosLossyness: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiWindowTempData_CursorStartPosLossyness(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_CursorStartPosLossyness(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop NavLayerCurrent: ImGuiNavLayer {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_NavLayerCurrent(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_NavLayerCurrent(pointer).write(value) }
        }
    }

    public mut prop NavLayersActiveMask: Int16 {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_NavLayersActiveMask(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_NavLayersActiveMask(pointer).write(value) }
        }
    }

    public mut prop NavLayersActiveMaskNext: Int16 {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_NavLayersActiveMaskNext(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_NavLayersActiveMaskNext(pointer).write(value) }
        }
    }

    public mut prop NavIsScrollPushableX: Bool {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_NavIsScrollPushableX(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_NavIsScrollPushableX(pointer).write(value) }
        }
    }

    public mut prop NavHideHighlightOneFrame: Bool {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_NavHideHighlightOneFrame(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_NavHideHighlightOneFrame(pointer).write(value) }
        }
    }

    public mut prop NavWindowHasScrollY: Bool {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_NavWindowHasScrollY(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_NavWindowHasScrollY(pointer).write(value) }
        }
    }

    public mut prop MenuBarAppending: Bool {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_MenuBarAppending(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_MenuBarAppending(pointer).write(value) }
        }
    }

    public mut prop MenuBarOffset: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImGuiWindowTempData_MenuBarOffset(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_MenuBarOffset(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop MenuColumns: ImGuiMenuColumns {
        get() {
            return unsafe { ImGuiMenuColumns(capi.access_ImGuiWindowTempData_MenuColumns(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_MenuColumns(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop TreeDepth: Int32 {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_TreeDepth(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_TreeDepth(pointer).write(value) }
        }
    }

    public mut prop TreeJumpToParentOnPopMask: ImU32 {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_TreeJumpToParentOnPopMask(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_TreeJumpToParentOnPopMask(pointer).write(value) }
        }
    }

    public mut prop ChildWindows: ImVector_ImGuiWindowPtr {
        get() {
            return unsafe { ImVector_ImGuiWindowPtr(capi.access_ImGuiWindowTempData_ChildWindows(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_ChildWindows(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop StateStorage: ImGuiStorage {
        get() {
            return unsafe { ImGuiStorage(capi.access_ImGuiWindowTempData_StateStorage(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_StateStorage(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop CurrentColumns: ImGuiOldColumns {
        get() {
            return unsafe { ImGuiOldColumns(capi.access_ImGuiWindowTempData_CurrentColumns(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_CurrentColumns(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop CurrentTableIdx: Int32 {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_CurrentTableIdx(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_CurrentTableIdx(pointer).write(value) }
        }
    }

    public mut prop LayoutType: ImGuiLayoutType {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_LayoutType(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_LayoutType(pointer).write(value) }
        }
    }

    public mut prop ParentLayoutType: ImGuiLayoutType {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_ParentLayoutType(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_ParentLayoutType(pointer).write(value) }
        }
    }

    public mut prop ModalDimBgColor: ImU32 {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_ModalDimBgColor(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_ModalDimBgColor(pointer).write(value) }
        }
    }

    public mut prop ItemWidth: Float32 {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_ItemWidth(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_ItemWidth(pointer).write(value) }
        }
    }

    public mut prop TextWrapPos: Float32 {
        get() {
            return unsafe { capi.access_ImGuiWindowTempData_TextWrapPos(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_TextWrapPos(pointer).write(value) }
        }
    }

    public mut prop ItemWidthStack: ImVector_float {
        get() {
            return unsafe { ImVector_float(capi.access_ImGuiWindowTempData_ItemWidthStack(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_ItemWidthStack(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop TextWrapPosStack: ImVector_float {
        get() {
            return unsafe { ImVector_float(capi.access_ImGuiWindowTempData_TextWrapPosStack(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImGuiWindowTempData_TextWrapPosStack(pointer).write(value.getCPointer().read()) }
        }
    }
}

public class ImRect <: StructWrapper<capi.ImRect> {
    public init(value!: ?capi.ImRect, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImRect>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImRect_ImRect_Nil().getCPointer(), count: None, owned: true)
    }

    public init(min: ImVec2, max: ImVec2) {
        super(ImRect_ImRect_Vec2(min, max).getCPointer(), count: None, owned: true)
    }

    public init(v: ImVec4) {
        super(ImRect_ImRect_Vec4(v).getCPointer(), count: None, owned: true)
    }

    public init(x1: Float32, y1: Float32, x2: Float32, y2: Float32) {
        super(ImRect_ImRect_Float(x1, y1, x2, y2).getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImRect_destroy(this.pointer)
        }
    }

    public mut prop Min: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImRect_Min(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImRect_Min(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Max: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImRect_Max(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImRect_Max(pointer).write(value.getCPointer().read()) }
        }
    }

    public func Add(p: ImVec2): Unit {
        return ImRect_Add_Vec2(this, p)
    }

    public func Add(r: ImRect): Unit {
        return ImRect_Add_Rect(this, r)
    }

    public func ClipWith(r: ImRect): Unit {
        return ImRect_ClipWith(this, r)
    }

    public func ClipWithFull(r: ImRect): Unit {
        return ImRect_ClipWithFull(this, r)
    }

    public func Contains(p: ImVec2): Bool {
        return ImRect_Contains_Vec2(this, p)
    }

    public func Contains(r: ImRect): Bool {
        return ImRect_Contains_Rect(this, r)
    }

    public func ContainsWithPad(p: ImVec2, pad: ImVec2): Bool {
        return ImRect_ContainsWithPad(this, p, pad)
    }

    public func Expand(amount: Float32): Unit {
        return ImRect_Expand_Float(this, amount)
    }

    public func Expand(amount: ImVec2): Unit {
        return ImRect_Expand_Vec2(this, amount)
    }

    public func Floor(): Unit {
        return ImRect_Floor(this)
    }

    public func GetArea(): Float32 {
        return ImRect_GetArea(this)
    }

    public func GetBL(pOut: ImVec2): Unit {
        return ImRect_GetBL(pOut, this)
    }

    public func GetBR(pOut: ImVec2): Unit {
        return ImRect_GetBR(pOut, this)
    }

    public func GetCenter(pOut: ImVec2): Unit {
        return ImRect_GetCenter(pOut, this)
    }

    public func GetHeight(): Float32 {
        return ImRect_GetHeight(this)
    }

    public func GetSize(pOut: ImVec2): Unit {
        return ImRect_GetSize(pOut, this)
    }

    public func GetTL(pOut: ImVec2): Unit {
        return ImRect_GetTL(pOut, this)
    }

    public func GetTR(pOut: ImVec2): Unit {
        return ImRect_GetTR(pOut, this)
    }

    public func GetWidth(): Float32 {
        return ImRect_GetWidth(this)
    }

    public func IsInverted(): Bool {
        return ImRect_IsInverted(this)
    }

    public func Overlaps(r: ImRect): Bool {
        return ImRect_Overlaps(this, r)
    }

    public func ToVec4(pOut: ImVec4): Unit {
        return ImRect_ToVec4(pOut, this)
    }

    public func Translate(d: ImVec2): Unit {
        return ImRect_Translate(this, d)
    }

    public func TranslateX(dx: Float32): Unit {
        return ImRect_TranslateX(this, dx)
    }

    public func TranslateY(dy: Float32): Unit {
        return ImRect_TranslateY(this, dy)
    }
}

public class ImVec1 <: StructWrapper<capi.ImVec1> {
    public init(value!: ?capi.ImVec1, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVec1>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImVec1_ImVec1_Nil().getCPointer(), count: None, owned: true)
    }

    public init(_x: Float32) {
        super(ImVec1_ImVec1_Float(_x).getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImVec1_destroy(this.pointer)
        }
    }

    public mut prop x: Float32 {
        get() {
            return unsafe { capi.access_ImVec1_x(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVec1_x(pointer).write(value) }
        }
    }
}

public class ImVec2 <: StructWrapper<capi.ImVec2> {
    public init(value!: ?capi.ImVec2, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVec2>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImVec2_ImVec2_Nil().getCPointer(), count: None, owned: true)
    }

    public init(_x: Float32, _y: Float32) {
        super(ImVec2_ImVec2_Float(_x, _y).getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImVec2_destroy(this.pointer)
        }
    }

    public mut prop x: Float32 {
        get() {
            return unsafe { capi.access_ImVec2_x(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVec2_x(pointer).write(value) }
        }
    }

    public mut prop y: Float32 {
        get() {
            return unsafe { capi.access_ImVec2_y(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVec2_y(pointer).write(value) }
        }
    }
}

public class ImVec2ih <: StructWrapper<capi.ImVec2ih> {
    public init(value!: ?capi.ImVec2ih, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVec2ih>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImVec2ih_ImVec2ih_Nil().getCPointer(), count: None, owned: true)
    }

    public init(_x: Int16, _y: Int16) {
        super(ImVec2ih_ImVec2ih_short(_x, _y).getCPointer(), count: None, owned: true)
    }

    public init(rhs: ImVec2) {
        super(ImVec2ih_ImVec2ih_Vec2(rhs).getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImVec2ih_destroy(this.pointer)
        }
    }

    public mut prop x: Int16 {
        get() {
            return unsafe { capi.access_ImVec2ih_x(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVec2ih_x(pointer).write(value) }
        }
    }

    public mut prop y: Int16 {
        get() {
            return unsafe { capi.access_ImVec2ih_y(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVec2ih_y(pointer).write(value) }
        }
    }
}

public class ImVec4 <: StructWrapper<capi.ImVec4> {
    public init(value!: ?capi.ImVec4, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVec4>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    public init() {
        super(ImVec4_ImVec4_Nil().getCPointer(), count: None, owned: true)
    }

    public init(_x: Float32, _y: Float32, _z: Float32, _w: Float32) {
        super(ImVec4_ImVec4_Float(_x, _y, _z, _w).getCPointer(), count: None, owned: true)
    }

    ~init() {
        if (owned) {
            capi.ImVec4_destroy(this.pointer)
        }
    }

    public mut prop x: Float32 {
        get() {
            return unsafe { capi.access_ImVec4_x(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVec4_x(pointer).write(value) }
        }
    }

    public mut prop y: Float32 {
        get() {
            return unsafe { capi.access_ImVec4_y(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVec4_y(pointer).write(value) }
        }
    }

    public mut prop z: Float32 {
        get() {
            return unsafe { capi.access_ImVec4_z(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVec4_z(pointer).write(value) }
        }
    }

    public mut prop w: Float32 {
        get() {
            return unsafe { capi.access_ImVec4_w(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVec4_w(pointer).write(value) }
        }
    }
}

public class STB_TexteditState <: StructWrapper<capi.STB_TexteditState> {
    public init(value!: ?capi.STB_TexteditState, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.STB_TexteditState>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop cursor: Int32 {
        get() {
            return unsafe { capi.access_STB_TexteditState_cursor(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_STB_TexteditState_cursor(pointer).write(value) }
        }
    }

    public mut prop select_start: Int32 {
        get() {
            return unsafe { capi.access_STB_TexteditState_select_start(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_STB_TexteditState_select_start(pointer).write(value) }
        }
    }

    public mut prop select_end: Int32 {
        get() {
            return unsafe { capi.access_STB_TexteditState_select_end(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_STB_TexteditState_select_end(pointer).write(value) }
        }
    }

    public mut prop insert_mode: UInt8 {
        get() {
            return unsafe { capi.access_STB_TexteditState_insert_mode(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_STB_TexteditState_insert_mode(pointer).write(value) }
        }
    }

    public mut prop row_count_per_page: Int32 {
        get() {
            return unsafe { capi.access_STB_TexteditState_row_count_per_page(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_STB_TexteditState_row_count_per_page(pointer).write(value) }
        }
    }

    public mut prop cursor_at_end_of_line: UInt8 {
        get() {
            return unsafe { capi.access_STB_TexteditState_cursor_at_end_of_line(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_STB_TexteditState_cursor_at_end_of_line(pointer).write(value) }
        }
    }

    public mut prop initialized: UInt8 {
        get() {
            return unsafe { capi.access_STB_TexteditState_initialized(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_STB_TexteditState_initialized(pointer).write(value) }
        }
    }

    public mut prop has_preferred_x: UInt8 {
        get() {
            return unsafe { capi.access_STB_TexteditState_has_preferred_x(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_STB_TexteditState_has_preferred_x(pointer).write(value) }
        }
    }

    public mut prop single_line: UInt8 {
        get() {
            return unsafe { capi.access_STB_TexteditState_single_line(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_STB_TexteditState_single_line(pointer).write(value) }
        }
    }

    public mut prop padding1: UInt8 {
        get() {
            return unsafe { capi.access_STB_TexteditState_padding1(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_STB_TexteditState_padding1(pointer).write(value) }
        }
    }

    public mut prop padding2: UInt8 {
        get() {
            return unsafe { capi.access_STB_TexteditState_padding2(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_STB_TexteditState_padding2(pointer).write(value) }
        }
    }

    public mut prop padding3: UInt8 {
        get() {
            return unsafe { capi.access_STB_TexteditState_padding3(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_STB_TexteditState_padding3(pointer).write(value) }
        }
    }

    public mut prop preferred_x: Float32 {
        get() {
            return unsafe { capi.access_STB_TexteditState_preferred_x(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_STB_TexteditState_preferred_x(pointer).write(value) }
        }
    }

    public mut prop undostate: StbUndoState {
        get() {
            return unsafe { StbUndoState(capi.access_STB_TexteditState_undostate(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_STB_TexteditState_undostate(pointer).write(value.getCPointer().read()) }
        }
    }
}

public class StbTexteditRow <: StructWrapper<capi.StbTexteditRow> {
    public init(value!: ?capi.StbTexteditRow, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.StbTexteditRow>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop x0: Float32 {
        get() {
            return unsafe { capi.access_StbTexteditRow_x0(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_StbTexteditRow_x0(pointer).write(value) }
        }
    }

    public mut prop x1: Float32 {
        get() {
            return unsafe { capi.access_StbTexteditRow_x1(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_StbTexteditRow_x1(pointer).write(value) }
        }
    }

    public mut prop baseline_y_delta: Float32 {
        get() {
            return unsafe { capi.access_StbTexteditRow_baseline_y_delta(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_StbTexteditRow_baseline_y_delta(pointer).write(value) }
        }
    }

    public mut prop ymin: Float32 {
        get() {
            return unsafe { capi.access_StbTexteditRow_ymin(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_StbTexteditRow_ymin(pointer).write(value) }
        }
    }

    public mut prop ymax: Float32 {
        get() {
            return unsafe { capi.access_StbTexteditRow_ymax(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_StbTexteditRow_ymax(pointer).write(value) }
        }
    }

    public mut prop num_chars: Int32 {
        get() {
            return unsafe { capi.access_StbTexteditRow_num_chars(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_StbTexteditRow_num_chars(pointer).write(value) }
        }
    }
}

public class StbUndoRecord <: StructWrapper<capi.StbUndoRecord> {
    public init(value!: ?capi.StbUndoRecord, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.StbUndoRecord>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop `where`: Int32 {
        get() {
            return unsafe { capi.access_StbUndoRecord_where(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_StbUndoRecord_where(pointer).write(value) }
        }
    }

    public mut prop insert_length: Int32 {
        get() {
            return unsafe { capi.access_StbUndoRecord_insert_length(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_StbUndoRecord_insert_length(pointer).write(value) }
        }
    }

    public mut prop delete_length: Int32 {
        get() {
            return unsafe { capi.access_StbUndoRecord_delete_length(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_StbUndoRecord_delete_length(pointer).write(value) }
        }
    }

    public mut prop char_storage: Int32 {
        get() {
            return unsafe { capi.access_StbUndoRecord_char_storage(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_StbUndoRecord_char_storage(pointer).write(value) }
        }
    }
}

public class StbUndoState <: StructWrapper<capi.StbUndoState> {
    public init(value!: ?capi.StbUndoState, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.StbUndoState>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop undo_rec: StbUndoRecord {
        get() {
            return unsafe { StbUndoRecord(capi.access_StbUndoState_undo_rec(pointer).read(), count: 99, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop undo_char: Ref<ImWchar> {
        get() {
            return unsafe { Ref<ImWchar>.unsafeMake(capi.access_StbUndoState_undo_char(pointer).read(), count: 999, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }

    public mut prop undo_point: Int16 {
        get() {
            return unsafe { capi.access_StbUndoState_undo_point(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_StbUndoState_undo_point(pointer).write(value) }
        }
    }

    public mut prop redo_point: Int16 {
        get() {
            return unsafe { capi.access_StbUndoState_redo_point(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_StbUndoState_redo_point(pointer).write(value) }
        }
    }

    public mut prop undo_char_point: Int32 {
        get() {
            return unsafe { capi.access_StbUndoState_undo_char_point(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_StbUndoState_undo_char_point(pointer).write(value) }
        }
    }

    public mut prop redo_char_point: Int32 {
        get() {
            return unsafe { capi.access_StbUndoState_redo_char_point(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_StbUndoState_redo_char_point(pointer).write(value) }
        }
    }
}

public class ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN <: StructWrapper<capi.ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN> {
    public init(value!: ?capi.ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Storage: Ref<ImU32> {
        get() {
            return unsafe { Ref<ImU32>.unsafeMake(capi.access_ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN_Storage(pointer).read(), count: 5, owned: false) }
        }

        set(value) {
            unsafe { throw UnsupportedException("C array member can not be set ${value}"); }
        }
    }
}

public class ImChunkStream_ImGuiTableSettings <: StructWrapper<capi.ImChunkStream_ImGuiTableSettings> {
    public init(value!: ?capi.ImChunkStream_ImGuiTableSettings, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImChunkStream_ImGuiTableSettings>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Buf: ImVector_char {
        get() {
            return unsafe { ImVector_char(capi.access_ImChunkStream_ImGuiTableSettings_Buf(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImChunkStream_ImGuiTableSettings_Buf(pointer).write(value.getCPointer().read()) }
        }
    }
}

public class ImChunkStream_ImGuiWindowSettings <: StructWrapper<capi.ImChunkStream_ImGuiWindowSettings> {
    public init(value!: ?capi.ImChunkStream_ImGuiWindowSettings, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImChunkStream_ImGuiWindowSettings>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Buf: ImVector_char {
        get() {
            return unsafe { ImVector_char(capi.access_ImChunkStream_ImGuiWindowSettings_Buf(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImChunkStream_ImGuiWindowSettings_Buf(pointer).write(value.getCPointer().read()) }
        }
    }
}

public class ImPool_ImGuiTabBar <: StructWrapper<capi.ImPool_ImGuiTabBar> {
    public init(value!: ?capi.ImPool_ImGuiTabBar, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImPool_ImGuiTabBar>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Buf: ImVector_ImGuiTabBar {
        get() {
            return unsafe { ImVector_ImGuiTabBar(capi.access_ImPool_ImGuiTabBar_Buf(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImPool_ImGuiTabBar_Buf(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Map: ImGuiStorage {
        get() {
            return unsafe { ImGuiStorage(capi.access_ImPool_ImGuiTabBar_Map(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImPool_ImGuiTabBar_Map(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop FreeIdx: ImPoolIdx {
        get() {
            return unsafe { capi.access_ImPool_ImGuiTabBar_FreeIdx(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImPool_ImGuiTabBar_FreeIdx(pointer).write(value) }
        }
    }

    public mut prop AliveCount: ImPoolIdx {
        get() {
            return unsafe { capi.access_ImPool_ImGuiTabBar_AliveCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImPool_ImGuiTabBar_AliveCount(pointer).write(value) }
        }
    }
}

public class ImPool_ImGuiTable <: StructWrapper<capi.ImPool_ImGuiTable> {
    public init(value!: ?capi.ImPool_ImGuiTable, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImPool_ImGuiTable>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Buf: ImVector_ImGuiTable {
        get() {
            return unsafe { ImVector_ImGuiTable(capi.access_ImPool_ImGuiTable_Buf(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImPool_ImGuiTable_Buf(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop Map: ImGuiStorage {
        get() {
            return unsafe { ImGuiStorage(capi.access_ImPool_ImGuiTable_Map(pointer), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImPool_ImGuiTable_Map(pointer).write(value.getCPointer().read()) }
        }
    }

    public mut prop FreeIdx: ImPoolIdx {
        get() {
            return unsafe { capi.access_ImPool_ImGuiTable_FreeIdx(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImPool_ImGuiTable_FreeIdx(pointer).write(value) }
        }
    }

    public mut prop AliveCount: ImPoolIdx {
        get() {
            return unsafe { capi.access_ImPool_ImGuiTable_AliveCount(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImPool_ImGuiTable_AliveCount(pointer).write(value) }
        }
    }
}

public class ImSpan_ImGuiTableCellData <: StructWrapper<capi.ImSpan_ImGuiTableCellData> {
    public init(value!: ?capi.ImSpan_ImGuiTableCellData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImSpan_ImGuiTableCellData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Data: ImGuiTableCellData {
        get() {
            return unsafe { ImGuiTableCellData(capi.access_ImSpan_ImGuiTableCellData_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImSpan_ImGuiTableCellData_Data(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop DataEnd: ImGuiTableCellData {
        get() {
            return unsafe { ImGuiTableCellData(capi.access_ImSpan_ImGuiTableCellData_DataEnd(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImSpan_ImGuiTableCellData_DataEnd(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImSpan_ImGuiTableColumn <: StructWrapper<capi.ImSpan_ImGuiTableColumn> {
    public init(value!: ?capi.ImSpan_ImGuiTableColumn, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImSpan_ImGuiTableColumn>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Data: Ref<ImGuiTableColumn> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImSpan_ImGuiTableColumn_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImSpan_ImGuiTableColumn_Data(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop DataEnd: Ref<ImGuiTableColumn> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImSpan_ImGuiTableColumn_DataEnd(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImSpan_ImGuiTableColumn_DataEnd(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImSpan_ImGuiTableColumnIdx <: StructWrapper<capi.ImSpan_ImGuiTableColumnIdx> {
    public init(value!: ?capi.ImSpan_ImGuiTableColumnIdx, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImSpan_ImGuiTableColumnIdx>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Data: Ref<ImGuiTableColumnIdx> {
        get() {
            return unsafe { Ref<Int16>.unsafeMake(capi.access_ImSpan_ImGuiTableColumnIdx_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImSpan_ImGuiTableColumnIdx_Data(pointer).write(value.getCPointer()) }
        }
    }

    public mut prop DataEnd: Ref<ImGuiTableColumnIdx> {
        get() {
            return unsafe { Ref<Int16>.unsafeMake(capi.access_ImSpan_ImGuiTableColumnIdx_DataEnd(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImSpan_ImGuiTableColumnIdx_DataEnd(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImDrawChannel <: StructWrapper<capi.ImVector_ImDrawChannel> {
    public init(value!: ?capi.ImVector_ImDrawChannel, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImDrawChannel>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImDrawChannel_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImDrawChannel_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImDrawChannel_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImDrawChannel_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImDrawChannel {
        get() {
            return unsafe { ImDrawChannel(capi.access_ImVector_ImDrawChannel_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImDrawChannel_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImDrawCmd <: StructWrapper<capi.ImVector_ImDrawCmd> {
    public init(value!: ?capi.ImVector_ImDrawCmd, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImDrawCmd>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImDrawCmd_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImDrawCmd_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImDrawCmd_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImDrawCmd_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImDrawCmd {
        get() {
            return unsafe { ImDrawCmd(capi.access_ImVector_ImDrawCmd_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImDrawCmd_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImDrawIdx <: StructWrapper<capi.ImVector_ImDrawIdx> {
    public init(value!: ?capi.ImVector_ImDrawIdx, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImDrawIdx>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImDrawIdx_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImDrawIdx_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImDrawIdx_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImDrawIdx_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<ImDrawIdx> {
        get() {
            return unsafe { Ref<UInt16>.unsafeMake(capi.access_ImVector_ImDrawIdx_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImDrawIdx_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImDrawListPtr <: StructWrapper<capi.ImVector_ImDrawListPtr> {
    public init(value!: ?capi.ImVector_ImDrawListPtr, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImDrawListPtr>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImDrawListPtr_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImDrawListPtr_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImDrawListPtr_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImDrawListPtr_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: CPointer<CPointer<capi.ImDrawList>> {
        get() {
            return unsafe { capi.access_ImVector_ImDrawListPtr_Data(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImDrawListPtr_Data(pointer).write(value) }
        }
    }
}

public class ImVector_ImDrawVert <: StructWrapper<capi.ImVector_ImDrawVert> {
    public init(value!: ?capi.ImVector_ImDrawVert, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImDrawVert>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImDrawVert_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImDrawVert_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImDrawVert_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImDrawVert_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImDrawVert {
        get() {
            return unsafe { ImDrawVert(capi.access_ImVector_ImDrawVert_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImDrawVert_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImFontPtr <: StructWrapper<capi.ImVector_ImFontPtr> {
    public init(value!: ?capi.ImVector_ImFontPtr, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImFontPtr>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImFontPtr_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImFontPtr_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImFontPtr_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImFontPtr_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: CPointer<CPointer<capi.ImFont>> {
        get() {
            return unsafe { capi.access_ImVector_ImFontPtr_Data(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImFontPtr_Data(pointer).write(value) }
        }
    }
}

public class ImVector_ImFontAtlasCustomRect <: StructWrapper<capi.ImVector_ImFontAtlasCustomRect> {
    public init(value!: ?capi.ImVector_ImFontAtlasCustomRect, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImFontAtlasCustomRect>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImFontAtlasCustomRect_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImFontAtlasCustomRect_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImFontAtlasCustomRect_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImFontAtlasCustomRect_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImFontAtlasCustomRect {
        get() {
            return unsafe { ImFontAtlasCustomRect(capi.access_ImVector_ImFontAtlasCustomRect_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImFontAtlasCustomRect_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImFontConfig <: StructWrapper<capi.ImVector_ImFontConfig> {
    public init(value!: ?capi.ImVector_ImFontConfig, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImFontConfig>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImFontConfig_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImFontConfig_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImFontConfig_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImFontConfig_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImFontConfig {
        get() {
            return unsafe { ImFontConfig(capi.access_ImVector_ImFontConfig_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImFontConfig_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImFontGlyph <: StructWrapper<capi.ImVector_ImFontGlyph> {
    public init(value!: ?capi.ImVector_ImFontGlyph, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImFontGlyph>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImFontGlyph_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImFontGlyph_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImFontGlyph_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImFontGlyph_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<ImFontGlyph> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImVector_ImFontGlyph_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImFontGlyph_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiColorMod <: StructWrapper<capi.ImVector_ImGuiColorMod> {
    public init(value!: ?capi.ImVector_ImGuiColorMod, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiColorMod>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiColorMod_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiColorMod_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiColorMod_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiColorMod_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiColorMod {
        get() {
            return unsafe { ImGuiColorMod(capi.access_ImVector_ImGuiColorMod_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiColorMod_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiContextHook <: StructWrapper<capi.ImVector_ImGuiContextHook> {
    public init(value!: ?capi.ImVector_ImGuiContextHook, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiContextHook>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiContextHook_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiContextHook_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiContextHook_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiContextHook_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiContextHook {
        get() {
            return unsafe { ImGuiContextHook(capi.access_ImVector_ImGuiContextHook_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiContextHook_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiDockNodeSettings <: StructWrapper<capi.ImVector_ImGuiDockNodeSettings> {
    public init(value!: ?capi.ImVector_ImGuiDockNodeSettings, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiDockNodeSettings>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiDockNodeSettings_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiDockNodeSettings_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiDockNodeSettings_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiDockNodeSettings_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<ImGuiDockNodeSettings> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImVector_ImGuiDockNodeSettings_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiDockNodeSettings_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiDockRequest <: StructWrapper<capi.ImVector_ImGuiDockRequest> {
    public init(value!: ?capi.ImVector_ImGuiDockRequest, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiDockRequest>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiDockRequest_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiDockRequest_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiDockRequest_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiDockRequest_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<ImGuiDockRequest> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImVector_ImGuiDockRequest_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiDockRequest_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiFocusScopeData <: StructWrapper<capi.ImVector_ImGuiFocusScopeData> {
    public init(value!: ?capi.ImVector_ImGuiFocusScopeData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiFocusScopeData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiFocusScopeData_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiFocusScopeData_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiFocusScopeData_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiFocusScopeData_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiFocusScopeData {
        get() {
            return unsafe { ImGuiFocusScopeData(capi.access_ImVector_ImGuiFocusScopeData_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiFocusScopeData_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiGroupData <: StructWrapper<capi.ImVector_ImGuiGroupData> {
    public init(value!: ?capi.ImVector_ImGuiGroupData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiGroupData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiGroupData_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiGroupData_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiGroupData_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiGroupData_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiGroupData {
        get() {
            return unsafe { ImGuiGroupData(capi.access_ImVector_ImGuiGroupData_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiGroupData_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiID <: StructWrapper<capi.ImVector_ImGuiID> {
    public init(value!: ?capi.ImVector_ImGuiID, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiID>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiID_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiID_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiID_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiID_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<ImGuiID> {
        get() {
            return unsafe { Ref<UInt32>.unsafeMake(capi.access_ImVector_ImGuiID_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiID_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiInputEvent <: StructWrapper<capi.ImVector_ImGuiInputEvent> {
    public init(value!: ?capi.ImVector_ImGuiInputEvent, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiInputEvent>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiInputEvent_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiInputEvent_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiInputEvent_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiInputEvent_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<ImGuiInputEvent> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImVector_ImGuiInputEvent_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiInputEvent_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiItemFlags <: StructWrapper<capi.ImVector_ImGuiItemFlags> {
    public init(value!: ?capi.ImVector_ImGuiItemFlags, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiItemFlags>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiItemFlags_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiItemFlags_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiItemFlags_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiItemFlags_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<ImGuiItemFlags> {
        get() {
            return unsafe { Ref<Int32>.unsafeMake(capi.access_ImVector_ImGuiItemFlags_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiItemFlags_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiKeyRoutingData <: StructWrapper<capi.ImVector_ImGuiKeyRoutingData> {
    public init(value!: ?capi.ImVector_ImGuiKeyRoutingData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiKeyRoutingData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiKeyRoutingData_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiKeyRoutingData_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiKeyRoutingData_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiKeyRoutingData_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiKeyRoutingData {
        get() {
            return unsafe { ImGuiKeyRoutingData(capi.access_ImVector_ImGuiKeyRoutingData_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiKeyRoutingData_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiListClipperData <: StructWrapper<capi.ImVector_ImGuiListClipperData> {
    public init(value!: ?capi.ImVector_ImGuiListClipperData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiListClipperData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiListClipperData_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiListClipperData_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiListClipperData_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiListClipperData_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiListClipperData {
        get() {
            return unsafe { ImGuiListClipperData(capi.access_ImVector_ImGuiListClipperData_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiListClipperData_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiListClipperRange <: StructWrapper<capi.ImVector_ImGuiListClipperRange> {
    public init(value!: ?capi.ImVector_ImGuiListClipperRange, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiListClipperRange>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiListClipperRange_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiListClipperRange_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiListClipperRange_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiListClipperRange_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiListClipperRange {
        get() {
            return unsafe { ImGuiListClipperRange(capi.access_ImVector_ImGuiListClipperRange_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiListClipperRange_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiNavTreeNodeData <: StructWrapper<capi.ImVector_ImGuiNavTreeNodeData> {
    public init(value!: ?capi.ImVector_ImGuiNavTreeNodeData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiNavTreeNodeData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiNavTreeNodeData_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiNavTreeNodeData_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiNavTreeNodeData_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiNavTreeNodeData_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiNavTreeNodeData {
        get() {
            return unsafe { ImGuiNavTreeNodeData(capi.access_ImVector_ImGuiNavTreeNodeData_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiNavTreeNodeData_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiOldColumnData <: StructWrapper<capi.ImVector_ImGuiOldColumnData> {
    public init(value!: ?capi.ImVector_ImGuiOldColumnData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiOldColumnData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiOldColumnData_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiOldColumnData_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiOldColumnData_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiOldColumnData_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiOldColumnData {
        get() {
            return unsafe { ImGuiOldColumnData(capi.access_ImVector_ImGuiOldColumnData_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiOldColumnData_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiOldColumns <: StructWrapper<capi.ImVector_ImGuiOldColumns> {
    public init(value!: ?capi.ImVector_ImGuiOldColumns, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiOldColumns>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiOldColumns_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiOldColumns_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiOldColumns_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiOldColumns_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiOldColumns {
        get() {
            return unsafe { ImGuiOldColumns(capi.access_ImVector_ImGuiOldColumns_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiOldColumns_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiPlatformMonitor <: StructWrapper<capi.ImVector_ImGuiPlatformMonitor> {
    public init(value!: ?capi.ImVector_ImGuiPlatformMonitor, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiPlatformMonitor>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiPlatformMonitor_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiPlatformMonitor_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiPlatformMonitor_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiPlatformMonitor_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiPlatformMonitor {
        get() {
            return unsafe { ImGuiPlatformMonitor(capi.access_ImVector_ImGuiPlatformMonitor_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiPlatformMonitor_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiPopupData <: StructWrapper<capi.ImVector_ImGuiPopupData> {
    public init(value!: ?capi.ImVector_ImGuiPopupData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiPopupData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiPopupData_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiPopupData_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiPopupData_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiPopupData_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiPopupData {
        get() {
            return unsafe { ImGuiPopupData(capi.access_ImVector_ImGuiPopupData_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiPopupData_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiPtrOrIndex <: StructWrapper<capi.ImVector_ImGuiPtrOrIndex> {
    public init(value!: ?capi.ImVector_ImGuiPtrOrIndex, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiPtrOrIndex>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiPtrOrIndex_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiPtrOrIndex_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiPtrOrIndex_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiPtrOrIndex_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiPtrOrIndex {
        get() {
            return unsafe { ImGuiPtrOrIndex(capi.access_ImVector_ImGuiPtrOrIndex_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiPtrOrIndex_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiSettingsHandler <: StructWrapper<capi.ImVector_ImGuiSettingsHandler> {
    public init(value!: ?capi.ImVector_ImGuiSettingsHandler, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiSettingsHandler>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiSettingsHandler_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiSettingsHandler_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiSettingsHandler_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiSettingsHandler_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiSettingsHandler {
        get() {
            return unsafe { ImGuiSettingsHandler(capi.access_ImVector_ImGuiSettingsHandler_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiSettingsHandler_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiShrinkWidthItem <: StructWrapper<capi.ImVector_ImGuiShrinkWidthItem> {
    public init(value!: ?capi.ImVector_ImGuiShrinkWidthItem, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiShrinkWidthItem>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiShrinkWidthItem_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiShrinkWidthItem_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiShrinkWidthItem_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiShrinkWidthItem_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiShrinkWidthItem {
        get() {
            return unsafe { ImGuiShrinkWidthItem(capi.access_ImVector_ImGuiShrinkWidthItem_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiShrinkWidthItem_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiStackLevelInfo <: StructWrapper<capi.ImVector_ImGuiStackLevelInfo> {
    public init(value!: ?capi.ImVector_ImGuiStackLevelInfo, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiStackLevelInfo>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiStackLevelInfo_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiStackLevelInfo_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiStackLevelInfo_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiStackLevelInfo_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<ImGuiStackLevelInfo> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImVector_ImGuiStackLevelInfo_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiStackLevelInfo_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiStoragePair <: StructWrapper<capi.ImVector_ImGuiStoragePair> {
    public init(value!: ?capi.ImVector_ImGuiStoragePair, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiStoragePair>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiStoragePair_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiStoragePair_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiStoragePair_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiStoragePair_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<ImGuiStoragePair> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImVector_ImGuiStoragePair_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiStoragePair_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiStyleMod <: StructWrapper<capi.ImVector_ImGuiStyleMod> {
    public init(value!: ?capi.ImVector_ImGuiStyleMod, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiStyleMod>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiStyleMod_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiStyleMod_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiStyleMod_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiStyleMod_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<ImGuiStyleMod> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImVector_ImGuiStyleMod_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiStyleMod_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiTabBar <: StructWrapper<capi.ImVector_ImGuiTabBar> {
    public init(value!: ?capi.ImVector_ImGuiTabBar, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiTabBar>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTabBar_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTabBar_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTabBar_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTabBar_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiTabBar {
        get() {
            return unsafe { ImGuiTabBar(capi.access_ImVector_ImGuiTabBar_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTabBar_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiTabItem <: StructWrapper<capi.ImVector_ImGuiTabItem> {
    public init(value!: ?capi.ImVector_ImGuiTabItem, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiTabItem>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTabItem_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTabItem_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTabItem_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTabItem_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiTabItem {
        get() {
            return unsafe { ImGuiTabItem(capi.access_ImVector_ImGuiTabItem_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTabItem_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiTable <: StructWrapper<capi.ImVector_ImGuiTable> {
    public init(value!: ?capi.ImVector_ImGuiTable, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiTable>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTable_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTable_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTable_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTable_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<ImGuiTable> {
        get() {
            return unsafe { Ref<Unit>.unsafeMake(capi.access_ImVector_ImGuiTable_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTable_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiTableColumnSortSpecs <: StructWrapper<capi.ImVector_ImGuiTableColumnSortSpecs> {
    public init(value!: ?capi.ImVector_ImGuiTableColumnSortSpecs, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiTableColumnSortSpecs>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTableColumnSortSpecs_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTableColumnSortSpecs_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTableColumnSortSpecs_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTableColumnSortSpecs_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiTableColumnSortSpecs {
        get() {
            return unsafe { ImGuiTableColumnSortSpecs(capi.access_ImVector_ImGuiTableColumnSortSpecs_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTableColumnSortSpecs_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiTableHeaderData <: StructWrapper<capi.ImVector_ImGuiTableHeaderData> {
    public init(value!: ?capi.ImVector_ImGuiTableHeaderData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiTableHeaderData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTableHeaderData_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTableHeaderData_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTableHeaderData_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTableHeaderData_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiTableHeaderData {
        get() {
            return unsafe { ImGuiTableHeaderData(capi.access_ImVector_ImGuiTableHeaderData_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTableHeaderData_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiTableInstanceData <: StructWrapper<capi.ImVector_ImGuiTableInstanceData> {
    public init(value!: ?capi.ImVector_ImGuiTableInstanceData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiTableInstanceData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTableInstanceData_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTableInstanceData_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTableInstanceData_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTableInstanceData_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiTableInstanceData {
        get() {
            return unsafe { ImGuiTableInstanceData(capi.access_ImVector_ImGuiTableInstanceData_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTableInstanceData_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiTableTempData <: StructWrapper<capi.ImVector_ImGuiTableTempData> {
    public init(value!: ?capi.ImVector_ImGuiTableTempData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiTableTempData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTableTempData_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTableTempData_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTableTempData_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTableTempData_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiTableTempData {
        get() {
            return unsafe { ImGuiTableTempData(capi.access_ImVector_ImGuiTableTempData_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTableTempData_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiTextRange <: StructWrapper<capi.ImVector_ImGuiTextRange> {
    public init(value!: ?capi.ImVector_ImGuiTextRange, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiTextRange>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTextRange_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTextRange_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiTextRange_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTextRange_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiTextRange {
        get() {
            return unsafe { ImGuiTextRange(capi.access_ImVector_ImGuiTextRange_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiTextRange_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImGuiViewportPtr <: StructWrapper<capi.ImVector_ImGuiViewportPtr> {
    public init(value!: ?capi.ImVector_ImGuiViewportPtr, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiViewportPtr>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiViewportPtr_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiViewportPtr_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiViewportPtr_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiViewportPtr_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: CPointer<CPointer<capi.ImGuiViewport>> {
        get() {
            return unsafe { capi.access_ImVector_ImGuiViewportPtr_Data(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiViewportPtr_Data(pointer).write(value) }
        }
    }
}

public class ImVector_ImGuiViewportPPtr <: StructWrapper<capi.ImVector_ImGuiViewportPPtr> {
    public init(value!: ?capi.ImVector_ImGuiViewportPPtr, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiViewportPPtr>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiViewportPPtr_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiViewportPPtr_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiViewportPPtr_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiViewportPPtr_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: CPointer<CPointer<capi.ImGuiViewportP>> {
        get() {
            return unsafe { capi.access_ImVector_ImGuiViewportPPtr_Data(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiViewportPPtr_Data(pointer).write(value) }
        }
    }
}

public class ImVector_ImGuiWindowPtr <: StructWrapper<capi.ImVector_ImGuiWindowPtr> {
    public init(value!: ?capi.ImVector_ImGuiWindowPtr, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiWindowPtr>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiWindowPtr_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiWindowPtr_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiWindowPtr_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiWindowPtr_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: CPointer<CPointer<ImGuiWindow>> {
        get() {
            return unsafe { capi.access_ImVector_ImGuiWindowPtr_Data(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiWindowPtr_Data(pointer).write(value) }
        }
    }
}

public class ImVector_ImGuiWindowStackData <: StructWrapper<capi.ImVector_ImGuiWindowStackData> {
    public init(value!: ?capi.ImVector_ImGuiWindowStackData, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImGuiWindowStackData>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiWindowStackData_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiWindowStackData_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImGuiWindowStackData_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiWindowStackData_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImGuiWindowStackData {
        get() {
            return unsafe { ImGuiWindowStackData(capi.access_ImVector_ImGuiWindowStackData_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImGuiWindowStackData_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImTextureID <: StructWrapper<capi.ImVector_ImTextureID> {
    public init(value!: ?capi.ImVector_ImTextureID, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImTextureID>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImTextureID_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImTextureID_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImTextureID_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImTextureID_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: CPointer<ImTextureID> {
        get() {
            return unsafe { capi.access_ImVector_ImTextureID_Data(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImTextureID_Data(pointer).write(value) }
        }
    }
}

public class ImVector_ImU32 <: StructWrapper<capi.ImVector_ImU32> {
    public init(value!: ?capi.ImVector_ImU32, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImU32>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImU32_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImU32_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImU32_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImU32_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<ImU32> {
        get() {
            return unsafe { Ref<UInt32>.unsafeMake(capi.access_ImVector_ImU32_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImU32_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImVec2 <: StructWrapper<capi.ImVector_ImVec2> {
    public init(value!: ?capi.ImVector_ImVec2, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImVec2>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImVec2_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImVec2_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImVec2_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImVec2_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImVec2 {
        get() {
            return unsafe { ImVec2(capi.access_ImVector_ImVec2_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImVec2_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImVec4 <: StructWrapper<capi.ImVector_ImVec4> {
    public init(value!: ?capi.ImVector_ImVec4, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImVec4>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImVec4_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImVec4_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImVec4_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImVec4_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: ImVec4 {
        get() {
            return unsafe { ImVec4(capi.access_ImVector_ImVec4_Data(pointer).read(), owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImVec4_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_ImWchar <: StructWrapper<capi.ImVector_ImWchar> {
    public init(value!: ?capi.ImVector_ImWchar, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_ImWchar>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImWchar_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImWchar_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_ImWchar_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImWchar_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<ImWchar> {
        get() {
            return unsafe { Ref<UInt16>.unsafeMake(capi.access_ImVector_ImWchar_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_ImWchar_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_char <: StructWrapper<capi.ImVector_char> {
    public init(value!: ?capi.ImVector_char, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_char>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_char_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_char_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_char_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_char_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: String {
        get() {
            return unsafe { CString(capi.access_ImVector_char_Data(pointer).read()).toString() }
        }

        set(value) {
            unsafe { capi.access_ImVector_char_Data(pointer).write(value.asCString()) }
        }
    }
}

public class ImVector_const_charPtr <: StructWrapper<capi.ImVector_const_charPtr> {
    public init(value!: ?capi.ImVector_const_charPtr, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_const_charPtr>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_const_charPtr_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_const_charPtr_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_const_charPtr_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_const_charPtr_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<CPointer<UInt8>> {
        get() {
            return unsafe { Ref<CPointer<UInt8>>.unsafeMake(capi.access_ImVector_const_charPtr_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_const_charPtr_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_float <: StructWrapper<capi.ImVector_float> {
    public init(value!: ?capi.ImVector_float, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_float>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_float_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_float_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_float_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_float_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<Float32> {
        get() {
            return unsafe { Ref<Float32>.unsafeMake(capi.access_ImVector_float_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_float_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_int <: StructWrapper<capi.ImVector_int> {
    public init(value!: ?capi.ImVector_int, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_int>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_int_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_int_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_int_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_int_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<Int32> {
        get() {
            return unsafe { Ref<Int32>.unsafeMake(capi.access_ImVector_int_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_int_Data(pointer).write(value.getCPointer()) }
        }
    }
}

public class ImVector_unsigned_char <: StructWrapper<capi.ImVector_unsigned_char> {
    public init(value!: ?capi.ImVector_unsigned_char, count!: ?Int64 = None) {
        super(value: value, count: count)
    }

    public init(pointer: CPointer<capi.ImVector_unsigned_char>, count!: ?Int64 = None, owned!: Bool = false) {
        super(pointer, count: count, owned: owned)
    }

    ~init() {
        if (owned) {
            unsafe { LibC.free(this.pointer) }
        }
    }

    public mut prop Size: Int32 {
        get() {
            return unsafe { capi.access_ImVector_unsigned_char_Size(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_unsigned_char_Size(pointer).write(value) }
        }
    }

    public mut prop Capacity: Int32 {
        get() {
            return unsafe { capi.access_ImVector_unsigned_char_Capacity(pointer).read() }
        }

        set(value) {
            unsafe { capi.access_ImVector_unsigned_char_Capacity(pointer).write(value) }
        }
    }

    public mut prop Data: Ref<UInt8> {
        get() {
            return unsafe { Ref<UInt8>.unsafeMake(capi.access_ImVector_unsigned_char_Data(pointer).read(), count: -1, owned: false) }
        }

        set(value) {
            unsafe { capi.access_ImVector_unsigned_char_Data(pointer).write(value.getCPointer()) }
        }
    }
}
