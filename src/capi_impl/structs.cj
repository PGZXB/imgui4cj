// +----------------------------------------------------+
// + THIS FILE IS AUTO-GENERATED BY `cimgui_generator`. +
// +      FROM: https://github.com/PGZXB/imgui.cj       +
// +------------------- DO NOT EDIT. -------------------+

package capi_impl

// struct ImBitVector
@C
public struct ImBitVector {
    public ImBitVector(public var Storage!: ImVector_ImU32) {
    }

    public init() {
        Storage = ImVector_ImU32()
    }
}

// struct ImColor
@C
public struct ImColor {
    public ImColor(public var Value!: ImVec4) {
    }

    public init() {
        Value = ImVec4()
    }
}

// struct ImDrawChannel
@C
public struct ImDrawChannel {
    public ImDrawChannel(public var _CmdBuffer!: ImVector_ImDrawCmd, public var _IdxBuffer!: ImVector_ImDrawIdx) {
    }

    public init() {
        _CmdBuffer = ImVector_ImDrawCmd()
        _IdxBuffer = ImVector_ImDrawIdx()
    }
}

// struct ImDrawCmd
@C
public struct ImDrawCmd {
    public ImDrawCmd(public var ClipRect!: ImVec4, public var TextureId!: ImTextureID, public var VtxOffset!: Int32, public var IdxOffset!: Int32, public var ElemCount!: Int32, public var UserCallback!: ImDrawCallback, public var UserCallbackData!: CPointer<Unit>) {
    }

    public init() {
        ClipRect = ImVec4()
        TextureId = CPointer<Unit>()
        VtxOffset = 0
        IdxOffset = 0
        ElemCount = 0
        UserCallback = CFunc<(parent_list: CPointer<ImDrawList>, cmd: CPointer<ImDrawCmd>) -> Unit>(CPointer<Unit>())
        UserCallbackData = CPointer<Unit>()
    }
}

// struct ImDrawCmdHeader
@C
public struct ImDrawCmdHeader {
    public ImDrawCmdHeader(public var ClipRect!: ImVec4, public var TextureId!: ImTextureID, public var VtxOffset!: Int32) {
    }

    public init() {
        ClipRect = ImVec4()
        TextureId = CPointer<Unit>()
        VtxOffset = 0
    }
}

// struct ImDrawData
@C
public struct ImDrawData {
    public ImDrawData(public var Valid!: Bool, public var CmdListsCount!: Int32, public var TotalIdxCount!: Int32, public var TotalVtxCount!: Int32, public var CmdLists!: ImVector_ImDrawListPtr, public var DisplayPos!: ImVec2, public var DisplaySize!: ImVec2, public var FramebufferScale!: ImVec2, public var OwnerViewport!: CPointer<ImGuiViewport>) {
    }

    public init() {
        Valid = false
        CmdListsCount = 0
        TotalIdxCount = 0
        TotalVtxCount = 0
        CmdLists = ImVector_ImDrawListPtr()
        DisplayPos = ImVec2()
        DisplaySize = ImVec2()
        FramebufferScale = ImVec2()
        OwnerViewport = CPointer<ImGuiViewport>()
    }
}

// struct ImDrawDataBuilder
@C
public struct ImDrawDataBuilder {
    public ImDrawDataBuilder(public var Layers!: VArray<CPointer<ImVector_ImDrawListPtr>, $2>, public var LayerData1!: ImVector_ImDrawListPtr) {
    }

    public init() {
        Layers = VArray<CPointer<ImVector_ImDrawListPtr>, $2>(item: CPointer<ImVector_ImDrawListPtr>())
        LayerData1 = ImVector_ImDrawListPtr()
    }
}

// struct ImDrawList
@C
public struct ImDrawList {
    public ImDrawList(public var CmdBuffer!: ImVector_ImDrawCmd, public var IdxBuffer!: ImVector_ImDrawIdx, public var VtxBuffer!: ImVector_ImDrawVert, public var Flags!: ImDrawListFlags, public var _VtxCurrentIdx!: Int32, public var _Data!: CPointer<ImDrawListSharedData>, public var _VtxWritePtr!: CPointer<ImDrawVert>, public var _IdxWritePtr!: CPointer<ImDrawIdx>, public var _Path!: ImVector_ImVec2, public var _CmdHeader!: ImDrawCmdHeader, public var _Splitter!: ImDrawListSplitter, public var _ClipRectStack!: ImVector_ImVec4, public var _TextureIdStack!: ImVector_ImTextureID, public var _FringeScale!: Float32, public var _OwnerName!: CString) {
    }

    public init() {
        CmdBuffer = ImVector_ImDrawCmd()
        IdxBuffer = ImVector_ImDrawIdx()
        VtxBuffer = ImVector_ImDrawVert()
        Flags = 0
        _VtxCurrentIdx = 0
        _Data = CPointer<ImDrawListSharedData>()
        _VtxWritePtr = CPointer<ImDrawVert>()
        _IdxWritePtr = CPointer<ImDrawIdx>()
        _Path = ImVector_ImVec2()
        _CmdHeader = ImDrawCmdHeader()
        _Splitter = ImDrawListSplitter()
        _ClipRectStack = ImVector_ImVec4()
        _TextureIdStack = ImVector_ImTextureID()
        _FringeScale = 0.0f32
        _OwnerName = CString(CPointer<UInt8>())
    }
}

// struct ImDrawListSharedData
@C
public struct ImDrawListSharedData {
    public ImDrawListSharedData(public var TexUvWhitePixel!: ImVec2, public var Font!: CPointer<ImFont>, public var FontSize!: Float32, public var CurveTessellationTol!: Float32, public var CircleSegmentMaxError!: Float32, public var ClipRectFullscreen!: ImVec4, public var InitialFlags!: ImDrawListFlags, public var TempBuffer!: ImVector_ImVec2, public var ArcFastVtx!: VArray<ImVec2, $48>, public var ArcFastRadiusCutoff!: Float32, public var CircleSegmentCounts!: VArray<ImU8, $64>, public var TexUvLines!: CPointer<ImVec4>) {
    }

    public init() {
        TexUvWhitePixel = ImVec2()
        Font = CPointer<ImFont>()
        FontSize = 0.0f32
        CurveTessellationTol = 0.0f32
        CircleSegmentMaxError = 0.0f32
        ClipRectFullscreen = ImVec4()
        InitialFlags = 0
        TempBuffer = ImVector_ImVec2()
        ArcFastVtx = VArray<ImVec2, $48>(item: ImVec2())
        ArcFastRadiusCutoff = 0.0f32
        CircleSegmentCounts = VArray<ImU8, $64>(item: 0)
        TexUvLines = CPointer<ImVec4>()
    }
}

// struct ImDrawListSplitter
@C
public struct ImDrawListSplitter {
    public ImDrawListSplitter(public var _Current!: Int32, public var _Count!: Int32, public var _Channels!: ImVector_ImDrawChannel) {
    }

    public init() {
        _Current = 0
        _Count = 0
        _Channels = ImVector_ImDrawChannel()
    }
}

// struct ImDrawVert
@C
public struct ImDrawVert {
    public ImDrawVert(public var pos!: ImVec2, public var uv!: ImVec2, public var col!: ImU32) {
    }

    public init() {
        pos = ImVec2()
        uv = ImVec2()
        col = 0
    }
}

// struct ImFont
@C
public struct ImFont {
    public ImFont(public var IndexAdvanceX!: ImVector_float, public var FallbackAdvanceX!: Float32, public var FontSize!: Float32, public var IndexLookup!: ImVector_ImWchar, public var Glyphs!: ImVector_ImFontGlyph, public var FallbackGlyph!: CPointer<ImFontGlyph>, public var ContainerAtlas!: CPointer<ImFontAtlas>, public var ConfigData!: CPointer<ImFontConfig>, public var ConfigDataCount!: Int16, public var FallbackChar!: ImWchar, public var EllipsisChar!: ImWchar, public var EllipsisCharCount!: Int16, public var EllipsisWidth!: Float32, public var EllipsisCharStep!: Float32, public var DirtyLookupTables!: Bool, public var Scale!: Float32, public var Ascent!: Float32, public var Descent!: Float32, public var MetricsTotalSurface!: Int32, public var Used4kPagesMap!: VArray<ImU8, $2>) {
    }

    public init() {
        IndexAdvanceX = ImVector_float()
        FallbackAdvanceX = 0.0f32
        FontSize = 0.0f32
        IndexLookup = ImVector_ImWchar()
        Glyphs = ImVector_ImFontGlyph()
        FallbackGlyph = CPointer<ImFontGlyph>()
        ContainerAtlas = CPointer<ImFontAtlas>()
        ConfigData = CPointer<ImFontConfig>()
        ConfigDataCount = 0
        FallbackChar = 0
        EllipsisChar = 0
        EllipsisCharCount = 0
        EllipsisWidth = 0.0f32
        EllipsisCharStep = 0.0f32
        DirtyLookupTables = false
        Scale = 0.0f32
        Ascent = 0.0f32
        Descent = 0.0f32
        MetricsTotalSurface = 0
        Used4kPagesMap = VArray<ImU8, $2>(item: 0)
    }
}

// struct ImFontAtlas
@C
public struct ImFontAtlas {
    public ImFontAtlas(public var Flags!: ImFontAtlasFlags, public var TexID!: ImTextureID, public var TexDesiredWidth!: Int32, public var TexGlyphPadding!: Int32, public var Locked!: Bool, public var UserData!: CPointer<Unit>, public var TexReady!: Bool, public var TexPixelsUseColors!: Bool, public var TexPixelsAlpha8!: CPointer<UInt8>, public var TexPixelsRGBA32!: CPointer<Int32>, public var TexWidth!: Int32, public var TexHeight!: Int32, public var TexUvScale!: ImVec2, public var TexUvWhitePixel!: ImVec2, public var Fonts!: ImVector_ImFontPtr, public var CustomRects!: ImVector_ImFontAtlasCustomRect, public var ConfigData!: ImVector_ImFontConfig, public var TexUvLines!: VArray<ImVec4, $64>, public var FontBuilderIO!: CPointer<ImFontBuilderIO>, public var FontBuilderFlags!: Int32, public var PackIdMouseCursors!: Int32, public var PackIdLines!: Int32) {
    }

    public init() {
        Flags = 0
        TexID = CPointer<Unit>()
        TexDesiredWidth = 0
        TexGlyphPadding = 0
        Locked = false
        UserData = CPointer<Unit>()
        TexReady = false
        TexPixelsUseColors = false
        TexPixelsAlpha8 = CPointer<UInt8>()
        TexPixelsRGBA32 = CPointer<Int32>()
        TexWidth = 0
        TexHeight = 0
        TexUvScale = ImVec2()
        TexUvWhitePixel = ImVec2()
        Fonts = ImVector_ImFontPtr()
        CustomRects = ImVector_ImFontAtlasCustomRect()
        ConfigData = ImVector_ImFontConfig()
        TexUvLines = VArray<ImVec4, $64>(item: ImVec4())
        FontBuilderIO = CPointer<ImFontBuilderIO>()
        FontBuilderFlags = 0
        PackIdMouseCursors = 0
        PackIdLines = 0
    }
}

// struct ImFontAtlasCustomRect
@C
public struct ImFontAtlasCustomRect {
    public ImFontAtlasCustomRect(public var Width!: Int16, public var Height!: Int16, public var X!: Int16, public var Y!: Int16, public var GlyphID!: Int32, public var GlyphAdvanceX!: Float32, public var GlyphOffset!: ImVec2, public var Font!: CPointer<ImFont>) {
    }

    public init() {
        Width = 0
        Height = 0
        X = 0
        Y = 0
        GlyphID = 0
        GlyphAdvanceX = 0.0f32
        GlyphOffset = ImVec2()
        Font = CPointer<ImFont>()
    }
}

// struct ImFontBuilderIO
@C
public struct ImFontBuilderIO {
    public ImFontBuilderIO(public var FontBuilder_Build!: CFunc<(atlas: CPointer<ImFontAtlas>) -> Bool>) {
    }

    public init() {
        FontBuilder_Build = CFunc<(atlas: CPointer<ImFontAtlas>) -> Bool>(CPointer<Unit>())
    }
}

// struct ImFontConfig
@C
public struct ImFontConfig {
    public ImFontConfig(public var FontData!: CPointer<Unit>, public var FontDataSize!: Int32, public var FontDataOwnedByAtlas!: Bool, public var FontNo!: Int32, public var SizePixels!: Float32, public var OversampleH!: Int32, public var OversampleV!: Int32, public var PixelSnapH!: Bool, public var GlyphExtraSpacing!: ImVec2, public var GlyphOffset!: ImVec2, public var GlyphRanges!: CPointer<ImWchar>, public var GlyphMinAdvanceX!: Float32, public var GlyphMaxAdvanceX!: Float32, public var MergeMode!: Bool, public var FontBuilderFlags!: Int32, public var RasterizerMultiply!: Float32, public var RasterizerDensity!: Float32, public var EllipsisChar!: ImWchar, public var Name!: VArray<UInt8, $40>, public var DstFont!: CPointer<ImFont>) {
    }

    public init() {
        FontData = CPointer<Unit>()
        FontDataSize = 0
        FontDataOwnedByAtlas = false
        FontNo = 0
        SizePixels = 0.0f32
        OversampleH = 0
        OversampleV = 0
        PixelSnapH = false
        GlyphExtraSpacing = ImVec2()
        GlyphOffset = ImVec2()
        GlyphRanges = CPointer<ImWchar>()
        GlyphMinAdvanceX = 0.0f32
        GlyphMaxAdvanceX = 0.0f32
        MergeMode = false
        FontBuilderFlags = 0
        RasterizerMultiply = 0.0f32
        RasterizerDensity = 0.0f32
        EllipsisChar = 0
        Name = VArray<UInt8, $40>(item: 0)
        DstFont = CPointer<ImFont>()
    }
}

// struct ImFontGlyphRangesBuilder
@C
public struct ImFontGlyphRangesBuilder {
    public ImFontGlyphRangesBuilder(public var UsedChars!: ImVector_ImU32) {
    }

    public init() {
        UsedChars = ImVector_ImU32()
    }
}

// struct ImGuiColorMod
@C
public struct ImGuiColorMod {
    public ImGuiColorMod(public var Col!: ImGuiCol, public var BackupValue!: ImVec4) {
    }

    public init() {
        Col = 0
        BackupValue = ImVec4()
    }
}

// struct ImGuiComboPreviewData
@C
public struct ImGuiComboPreviewData {
    public ImGuiComboPreviewData(public var PreviewRect!: ImRect, public var BackupCursorPos!: ImVec2, public var BackupCursorMaxPos!: ImVec2, public var BackupCursorPosPrevLine!: ImVec2, public var BackupPrevLineTextBaseOffset!: Float32, public var BackupLayout!: ImGuiLayoutType) {
    }

    public init() {
        PreviewRect = ImRect()
        BackupCursorPos = ImVec2()
        BackupCursorMaxPos = ImVec2()
        BackupCursorPosPrevLine = ImVec2()
        BackupPrevLineTextBaseOffset = 0.0f32
        BackupLayout = 0
    }
}

// struct ImGuiContextHook
@C
public struct ImGuiContextHook {
    public ImGuiContextHook(public var HookId!: ImGuiID, public var Type!: ImGuiContextHookType, public var Owner!: ImGuiID, public var Callback!: ImGuiContextHookCallback, public var UserData!: CPointer<Unit>) {
    }

    public init() {
        HookId = 0
        Type = 0
        Owner = 0
        Callback = CFunc<(ctx: CPointer<ImGuiContext>, hook: CPointer<ImGuiContextHook>) -> Unit>(CPointer<Unit>())
        UserData = CPointer<Unit>()
    }
}

// struct ImGuiDataTypeInfo
@C
public struct ImGuiDataTypeInfo {
    public ImGuiDataTypeInfo(public var Size!: UIntNative, public var Name!: CString, public var PrintFmt!: CString, public var ScanFmt!: CString) {
    }

    public init() {
        Size = 0
        Name = CString(CPointer<UInt8>())
        PrintFmt = CString(CPointer<UInt8>())
        ScanFmt = CString(CPointer<UInt8>())
    }
}

// struct ImGuiDataTypeStorage
@C
public struct ImGuiDataTypeStorage {
    public ImGuiDataTypeStorage(public var Data!: VArray<ImU8, $8>) {
    }

    public init() {
        Data = VArray<ImU8, $8>(item: 0)
    }
}

// struct ImGuiDataVarInfo
@C
public struct ImGuiDataVarInfo {
    public ImGuiDataVarInfo(public var Type!: ImGuiDataType, public var Count!: ImU32, public var Offset!: ImU32) {
    }

    public init() {
        Type = 0
        Count = 0
        Offset = 0
    }
}

// struct ImGuiDebugAllocEntry
@C
public struct ImGuiDebugAllocEntry {
    public ImGuiDebugAllocEntry(public var FrameCount!: Int32, public var AllocCount!: ImS16, public var FreeCount!: ImS16) {
    }

    public init() {
        FrameCount = 0
        AllocCount = 0
        FreeCount = 0
    }
}

// struct ImGuiDebugAllocInfo
@C
public struct ImGuiDebugAllocInfo {
    public ImGuiDebugAllocInfo(public var TotalAllocCount!: Int32, public var TotalFreeCount!: Int32, public var LastEntriesIdx!: ImS16, public var LastEntriesBuf!: VArray<ImGuiDebugAllocEntry, $6>) {
    }

    public init() {
        TotalAllocCount = 0
        TotalFreeCount = 0
        LastEntriesIdx = 0
        LastEntriesBuf = VArray<ImGuiDebugAllocEntry, $6>(item: ImGuiDebugAllocEntry())
    }
}

// struct ImGuiDockContext
@C
public struct ImGuiDockContext {
    public ImGuiDockContext(public var Nodes!: ImGuiStorage, public var Requests!: ImVector_ImGuiDockRequest, public var NodesSettings!: ImVector_ImGuiDockNodeSettings, public var WantFullRebuild!: Bool) {
    }

    public init() {
        Nodes = ImGuiStorage()
        Requests = ImVector_ImGuiDockRequest()
        NodesSettings = ImVector_ImGuiDockNodeSettings()
        WantFullRebuild = false
    }
}

// struct ImGuiFocusScopeData
@C
public struct ImGuiFocusScopeData {
    public ImGuiFocusScopeData(public var ID!: ImGuiID, public var WindowID!: ImGuiID) {
    }

    public init() {
        ID = 0
        WindowID = 0
    }
}

// struct ImGuiGroupData
@C
public struct ImGuiGroupData {
    public ImGuiGroupData(public var WindowID!: ImGuiID, public var BackupCursorPos!: ImVec2, public var BackupCursorMaxPos!: ImVec2, public var BackupCursorPosPrevLine!: ImVec2, public var BackupIndent!: ImVec1, public var BackupGroupOffset!: ImVec1, public var BackupCurrLineSize!: ImVec2, public var BackupCurrLineTextBaseOffset!: Float32, public var BackupActiveIdIsAlive!: ImGuiID, public var BackupActiveIdPreviousFrameIsAlive!: Bool, public var BackupHoveredIdIsAlive!: Bool, public var BackupIsSameLine!: Bool, public var EmitItem!: Bool) {
    }

    public init() {
        WindowID = 0
        BackupCursorPos = ImVec2()
        BackupCursorMaxPos = ImVec2()
        BackupCursorPosPrevLine = ImVec2()
        BackupIndent = ImVec1()
        BackupGroupOffset = ImVec1()
        BackupCurrLineSize = ImVec2()
        BackupCurrLineTextBaseOffset = 0.0f32
        BackupActiveIdIsAlive = 0
        BackupActiveIdPreviousFrameIsAlive = false
        BackupHoveredIdIsAlive = false
        BackupIsSameLine = false
        EmitItem = false
    }
}

// struct ImGuiIDStackTool
@C
public struct ImGuiIDStackTool {
    public ImGuiIDStackTool(public var LastActiveFrame!: Int32, public var StackLevel!: Int32, public var QueryId!: ImGuiID, public var Results!: ImVector_ImGuiStackLevelInfo, public var CopyToClipboardOnCtrlC!: Bool, public var CopyToClipboardLastTime!: Float32) {
    }

    public init() {
        LastActiveFrame = 0
        StackLevel = 0
        QueryId = 0
        Results = ImVector_ImGuiStackLevelInfo()
        CopyToClipboardOnCtrlC = false
        CopyToClipboardLastTime = 0.0f32
    }
}

// struct ImGuiIO
@C
public struct ImGuiIO {
    public ImGuiIO(public var ConfigFlags!: ImGuiConfigFlags, public var BackendFlags!: ImGuiBackendFlags, public var DisplaySize!: ImVec2, public var DeltaTime!: Float32, public var IniSavingRate!: Float32, public var IniFilename!: CString, public var LogFilename!: CString, public var UserData!: CPointer<Unit>, public var Fonts!: CPointer<ImFontAtlas>, public var FontGlobalScale!: Float32, public var FontAllowUserScaling!: Bool, public var FontDefault!: CPointer<ImFont>, public var DisplayFramebufferScale!: ImVec2, public var ConfigDockingNoSplit!: Bool, public var ConfigDockingWithShift!: Bool, public var ConfigDockingAlwaysTabBar!: Bool, public var ConfigDockingTransparentPayload!: Bool, public var ConfigViewportsNoAutoMerge!: Bool, public var ConfigViewportsNoTaskBarIcon!: Bool, public var ConfigViewportsNoDecoration!: Bool, public var ConfigViewportsNoDefaultParent!: Bool, public var MouseDrawCursor!: Bool, public var ConfigMacOSXBehaviors!: Bool, public var ConfigInputTrickleEventQueue!: Bool, public var ConfigInputTextCursorBlink!: Bool, public var ConfigInputTextEnterKeepActive!: Bool, public var ConfigDragClickToInputText!: Bool, public var ConfigWindowsResizeFromEdges!: Bool, public var ConfigWindowsMoveFromTitleBarOnly!: Bool, public var ConfigMemoryCompactTimer!: Float32, public var MouseDoubleClickTime!: Float32, public var MouseDoubleClickMaxDist!: Float32, public var MouseDragThreshold!: Float32, public var KeyRepeatDelay!: Float32, public var KeyRepeatRate!: Float32, public var ConfigDebugIsDebuggerPresent!: Bool, public var ConfigDebugBeginReturnValueOnce!: Bool, public var ConfigDebugBeginReturnValueLoop!: Bool, public var ConfigDebugIgnoreFocusLoss!: Bool, public var ConfigDebugIniSettings!: Bool, public var BackendPlatformName!: CString, public var BackendRendererName!: CString, public var BackendPlatformUserData!: CPointer<Unit>, public var BackendRendererUserData!: CPointer<Unit>, public var BackendLanguageUserData!: CPointer<Unit>, public var GetClipboardTextFn!: CFunc<(user_data: CPointer<Unit>) -> CString>, public var SetClipboardTextFn!: CFunc<(user_data: CPointer<Unit>, text: CString) -> Unit>, public var ClipboardUserData!: CPointer<Unit>, public var SetPlatformImeDataFn!: CFunc<(viewport: CPointer<ImGuiViewport>, data: CPointer<ImGuiPlatformImeData>) -> Unit>, public var PlatformLocaleDecimalPoint!: ImWchar, public var WantCaptureMouse!: Bool, public var WantCaptureKeyboard!: Bool, public var WantTextInput!: Bool, public var WantSetMousePos!: Bool, public var WantSaveIniSettings!: Bool, public var NavActive!: Bool, public var NavVisible!: Bool, public var Framerate!: Float32, public var MetricsRenderVertices!: Int32, public var MetricsRenderIndices!: Int32, public var MetricsRenderWindows!: Int32, public var MetricsActiveWindows!: Int32, public var MouseDelta!: ImVec2, public var Ctx!: CPointer<ImGuiContext>, public var MousePos!: ImVec2, public var MouseDown!: VArray<Bool, $5>, public var MouseWheel!: Float32, public var MouseWheelH!: Float32, public var MouseSource!: ImGuiMouseSource, public var MouseHoveredViewport!: ImGuiID, public var KeyCtrl!: Bool, public var KeyShift!: Bool, public var KeyAlt!: Bool, public var KeySuper!: Bool, public var KeyMods!: ImGuiKeyChord, public var KeysData!: VArray<ImGuiKeyData, $154>, public var WantCaptureMouseUnlessPopupClose!: Bool, public var MousePosPrev!: ImVec2, public var MouseClickedPos!: VArray<ImVec2, $5>, public var MouseClickedTime!: VArray<Float64, $5>, public var MouseClicked!: VArray<Bool, $5>, public var MouseDoubleClicked!: VArray<Bool, $5>, public var MouseClickedCount!: VArray<ImU16, $5>, public var MouseClickedLastCount!: VArray<ImU16, $5>, public var MouseReleased!: VArray<Bool, $5>, public var MouseDownOwned!: VArray<Bool, $5>, public var MouseDownOwnedUnlessPopupClose!: VArray<Bool, $5>, public var MouseWheelRequestAxisSwap!: Bool, public var MouseCtrlLeftAsRightClick!: Bool, public var MouseDownDuration!: VArray<Float32, $5>, public var MouseDownDurationPrev!: VArray<Float32, $5>, public var MouseDragMaxDistanceAbs!: VArray<ImVec2, $5>, public var MouseDragMaxDistanceSqr!: VArray<Float32, $5>, public var PenPressure!: Float32, public var AppFocusLost!: Bool, public var AppAcceptingEvents!: Bool, public var BackendUsingLegacyKeyArrays!: ImS8, public var BackendUsingLegacyNavInputArray!: Bool, public var InputQueueSurrogate!: ImWchar16, public var InputQueueCharacters!: ImVector_ImWchar) {
    }

    public init() {
        ConfigFlags = 0
        BackendFlags = 0
        DisplaySize = ImVec2()
        DeltaTime = 0.0f32
        IniSavingRate = 0.0f32
        IniFilename = CString(CPointer<UInt8>())
        LogFilename = CString(CPointer<UInt8>())
        UserData = CPointer<Unit>()
        Fonts = CPointer<ImFontAtlas>()
        FontGlobalScale = 0.0f32
        FontAllowUserScaling = false
        FontDefault = CPointer<ImFont>()
        DisplayFramebufferScale = ImVec2()
        ConfigDockingNoSplit = false
        ConfigDockingWithShift = false
        ConfigDockingAlwaysTabBar = false
        ConfigDockingTransparentPayload = false
        ConfigViewportsNoAutoMerge = false
        ConfigViewportsNoTaskBarIcon = false
        ConfigViewportsNoDecoration = false
        ConfigViewportsNoDefaultParent = false
        MouseDrawCursor = false
        ConfigMacOSXBehaviors = false
        ConfigInputTrickleEventQueue = false
        ConfigInputTextCursorBlink = false
        ConfigInputTextEnterKeepActive = false
        ConfigDragClickToInputText = false
        ConfigWindowsResizeFromEdges = false
        ConfigWindowsMoveFromTitleBarOnly = false
        ConfigMemoryCompactTimer = 0.0f32
        MouseDoubleClickTime = 0.0f32
        MouseDoubleClickMaxDist = 0.0f32
        MouseDragThreshold = 0.0f32
        KeyRepeatDelay = 0.0f32
        KeyRepeatRate = 0.0f32
        ConfigDebugIsDebuggerPresent = false
        ConfigDebugBeginReturnValueOnce = false
        ConfigDebugBeginReturnValueLoop = false
        ConfigDebugIgnoreFocusLoss = false
        ConfigDebugIniSettings = false
        BackendPlatformName = CString(CPointer<UInt8>())
        BackendRendererName = CString(CPointer<UInt8>())
        BackendPlatformUserData = CPointer<Unit>()
        BackendRendererUserData = CPointer<Unit>()
        BackendLanguageUserData = CPointer<Unit>()
        GetClipboardTextFn = CFunc<(user_data: CPointer<Unit>) -> CString>(CPointer<Unit>())
        SetClipboardTextFn = CFunc<(user_data: CPointer<Unit>, text: CString) -> Unit>(CPointer<Unit>())
        ClipboardUserData = CPointer<Unit>()
        SetPlatformImeDataFn = CFunc<(viewport: CPointer<ImGuiViewport>, data: CPointer<ImGuiPlatformImeData>) -> Unit>(CPointer<Unit>())
        PlatformLocaleDecimalPoint = 0
        WantCaptureMouse = false
        WantCaptureKeyboard = false
        WantTextInput = false
        WantSetMousePos = false
        WantSaveIniSettings = false
        NavActive = false
        NavVisible = false
        Framerate = 0.0f32
        MetricsRenderVertices = 0
        MetricsRenderIndices = 0
        MetricsRenderWindows = 0
        MetricsActiveWindows = 0
        MouseDelta = ImVec2()
        Ctx = CPointer<ImGuiContext>()
        MousePos = ImVec2()
        MouseDown = VArray<Bool, $5>(item: false)
        MouseWheel = 0.0f32
        MouseWheelH = 0.0f32
        MouseSource = 0
        MouseHoveredViewport = 0
        KeyCtrl = false
        KeyShift = false
        KeyAlt = false
        KeySuper = false
        KeyMods = 0
        KeysData = VArray<ImGuiKeyData, $154>(item: ImGuiKeyData())
        WantCaptureMouseUnlessPopupClose = false
        MousePosPrev = ImVec2()
        MouseClickedPos = VArray<ImVec2, $5>(item: ImVec2())
        MouseClickedTime = VArray<Float64, $5>(item: 0.0f64)
        MouseClicked = VArray<Bool, $5>(item: false)
        MouseDoubleClicked = VArray<Bool, $5>(item: false)
        MouseClickedCount = VArray<ImU16, $5>(item: 0)
        MouseClickedLastCount = VArray<ImU16, $5>(item: 0)
        MouseReleased = VArray<Bool, $5>(item: false)
        MouseDownOwned = VArray<Bool, $5>(item: false)
        MouseDownOwnedUnlessPopupClose = VArray<Bool, $5>(item: false)
        MouseWheelRequestAxisSwap = false
        MouseCtrlLeftAsRightClick = false
        MouseDownDuration = VArray<Float32, $5>(item: 0.0f32)
        MouseDownDurationPrev = VArray<Float32, $5>(item: 0.0f32)
        MouseDragMaxDistanceAbs = VArray<ImVec2, $5>(item: ImVec2())
        MouseDragMaxDistanceSqr = VArray<Float32, $5>(item: 0.0f32)
        PenPressure = 0.0f32
        AppFocusLost = false
        AppAcceptingEvents = false
        BackendUsingLegacyKeyArrays = 0
        BackendUsingLegacyNavInputArray = false
        InputQueueSurrogate = 0
        InputQueueCharacters = ImVector_ImWchar()
    }
}

// struct ImGuiInputEventAppFocused
@C
public struct ImGuiInputEventAppFocused {
    public ImGuiInputEventAppFocused(public var Focused!: Bool) {
    }

    public init() {
        Focused = false
    }
}

// struct ImGuiInputEventKey
@C
public struct ImGuiInputEventKey {
    public ImGuiInputEventKey(public var Key!: ImGuiKey, public var Down!: Bool, public var AnalogValue!: Float32) {
    }

    public init() {
        Key = 0
        Down = false
        AnalogValue = 0.0f32
    }
}

// struct ImGuiInputEventMouseButton
@C
public struct ImGuiInputEventMouseButton {
    public ImGuiInputEventMouseButton(public var Button!: Int32, public var Down!: Bool, public var MouseSource!: ImGuiMouseSource) {
    }

    public init() {
        Button = 0
        Down = false
        MouseSource = 0
    }
}

// struct ImGuiInputEventMousePos
@C
public struct ImGuiInputEventMousePos {
    public ImGuiInputEventMousePos(public var PosX!: Float32, public var PosY!: Float32, public var MouseSource!: ImGuiMouseSource) {
    }

    public init() {
        PosX = 0.0f32
        PosY = 0.0f32
        MouseSource = 0
    }
}

// struct ImGuiInputEventMouseViewport
@C
public struct ImGuiInputEventMouseViewport {
    public ImGuiInputEventMouseViewport(public var HoveredViewportID!: ImGuiID) {
    }

    public init() {
        HoveredViewportID = 0
    }
}

// struct ImGuiInputEventMouseWheel
@C
public struct ImGuiInputEventMouseWheel {
    public ImGuiInputEventMouseWheel(public var WheelX!: Float32, public var WheelY!: Float32, public var MouseSource!: ImGuiMouseSource) {
    }

    public init() {
        WheelX = 0.0f32
        WheelY = 0.0f32
        MouseSource = 0
    }
}

// struct ImGuiInputEventText
@C
public struct ImGuiInputEventText {
    public ImGuiInputEventText(public var `Char`!: Int32) {
    }

    public init() {
        `Char` = 0
    }
}

// struct ImGuiInputTextCallbackData
@C
public struct ImGuiInputTextCallbackData {
    public ImGuiInputTextCallbackData(public var Ctx!: CPointer<ImGuiContext>, public var EventFlag!: ImGuiInputTextFlags, public var Flags!: ImGuiInputTextFlags, public var UserData!: CPointer<Unit>, public var EventChar!: ImWchar, public var EventKey!: ImGuiKey, public var Buf!: CString, public var BufTextLen!: Int32, public var BufSize!: Int32, public var BufDirty!: Bool, public var CursorPos!: Int32, public var SelectionStart!: Int32, public var SelectionEnd!: Int32) {
    }

    public init() {
        Ctx = CPointer<ImGuiContext>()
        EventFlag = 0
        Flags = 0
        UserData = CPointer<Unit>()
        EventChar = 0
        EventKey = 0
        Buf = CString(CPointer<UInt8>())
        BufTextLen = 0
        BufSize = 0
        BufDirty = false
        CursorPos = 0
        SelectionStart = 0
        SelectionEnd = 0
    }
}

// struct ImGuiInputTextDeactivatedState
@C
public struct ImGuiInputTextDeactivatedState {
    public ImGuiInputTextDeactivatedState(public var ID!: ImGuiID, public var TextA!: ImVector_char) {
    }

    public init() {
        ID = 0
        TextA = ImVector_char()
    }
}

// struct ImGuiInputTextState
@C
public struct ImGuiInputTextState {
    public ImGuiInputTextState(public var Ctx!: CPointer<ImGuiContext>, public var ID!: ImGuiID, public var CurLenW!: Int32, public var CurLenA!: Int32, public var TextW!: ImVector_ImWchar, public var TextA!: ImVector_char, public var InitialTextA!: ImVector_char, public var TextAIsValid!: Bool, public var BufCapacityA!: Int32, public var ScrollX!: Float32, public var Stb!: STB_TexteditState, public var CursorAnim!: Float32, public var CursorFollow!: Bool, public var SelectedAllMouseLock!: Bool, public var Edited!: Bool, public var Flags!: ImGuiInputTextFlags, public var ReloadUserBuf!: Bool, public var ReloadSelectionStart!: Int32, public var ReloadSelectionEnd!: Int32) {
    }

    public init() {
        Ctx = CPointer<ImGuiContext>()
        ID = 0
        CurLenW = 0
        CurLenA = 0
        TextW = ImVector_ImWchar()
        TextA = ImVector_char()
        InitialTextA = ImVector_char()
        TextAIsValid = false
        BufCapacityA = 0
        ScrollX = 0.0f32
        Stb = STB_TexteditState()
        CursorAnim = 0.0f32
        CursorFollow = false
        SelectedAllMouseLock = false
        Edited = false
        Flags = 0
        ReloadUserBuf = false
        ReloadSelectionStart = 0
        ReloadSelectionEnd = 0
    }
}

// struct ImGuiKeyData
@C
public struct ImGuiKeyData {
    public ImGuiKeyData(public var Down!: Bool, public var DownDuration!: Float32, public var DownDurationPrev!: Float32, public var AnalogValue!: Float32) {
    }

    public init() {
        Down = false
        DownDuration = 0.0f32
        DownDurationPrev = 0.0f32
        AnalogValue = 0.0f32
    }
}

// struct ImGuiKeyOwnerData
@C
public struct ImGuiKeyOwnerData {
    public ImGuiKeyOwnerData(public var OwnerCurr!: ImGuiID, public var OwnerNext!: ImGuiID, public var LockThisFrame!: Bool, public var LockUntilRelease!: Bool) {
    }

    public init() {
        OwnerCurr = 0
        OwnerNext = 0
        LockThisFrame = false
        LockUntilRelease = false
    }
}

// struct ImGuiKeyRoutingData
@C
public struct ImGuiKeyRoutingData {
    public ImGuiKeyRoutingData(public var NextEntryIndex!: ImGuiKeyRoutingIndex, public var Mods!: ImU16, public var RoutingCurrScore!: ImU8, public var RoutingNextScore!: ImU8, public var RoutingCurr!: ImGuiID, public var RoutingNext!: ImGuiID) {
    }

    public init() {
        NextEntryIndex = 0
        Mods = 0
        RoutingCurrScore = 0
        RoutingNextScore = 0
        RoutingCurr = 0
        RoutingNext = 0
    }
}

// struct ImGuiKeyRoutingTable
@C
public struct ImGuiKeyRoutingTable {
    public ImGuiKeyRoutingTable(public var Index!: VArray<ImGuiKeyRoutingIndex, $154>, public var Entries!: ImVector_ImGuiKeyRoutingData, public var EntriesNext!: ImVector_ImGuiKeyRoutingData) {
    }

    public init() {
        Index = VArray<ImGuiKeyRoutingIndex, $154>(item: 0)
        Entries = ImVector_ImGuiKeyRoutingData()
        EntriesNext = ImVector_ImGuiKeyRoutingData()
    }
}

// struct ImGuiLastItemData
@C
public struct ImGuiLastItemData {
    public ImGuiLastItemData(public var ID!: ImGuiID, public var InFlags!: ImGuiItemFlags, public var StatusFlags!: ImGuiItemStatusFlags, public var Rect!: ImRect, public var NavRect!: ImRect, public var DisplayRect!: ImRect, public var ClipRect!: ImRect, public var Shortcut!: ImGuiKeyChord) {
    }

    public init() {
        ID = 0
        InFlags = 0
        StatusFlags = 0
        Rect = ImRect()
        NavRect = ImRect()
        DisplayRect = ImRect()
        ClipRect = ImRect()
        Shortcut = 0
    }
}

// struct ImGuiListClipper
@C
public struct ImGuiListClipper {
    public ImGuiListClipper(public var Ctx!: CPointer<ImGuiContext>, public var DisplayStart!: Int32, public var DisplayEnd!: Int32, public var ItemsCount!: Int32, public var ItemsHeight!: Float32, public var StartPosY!: Float32, public var TempData!: CPointer<Unit>) {
    }

    public init() {
        Ctx = CPointer<ImGuiContext>()
        DisplayStart = 0
        DisplayEnd = 0
        ItemsCount = 0
        ItemsHeight = 0.0f32
        StartPosY = 0.0f32
        TempData = CPointer<Unit>()
    }
}

// struct ImGuiListClipperData
@C
public struct ImGuiListClipperData {
    public ImGuiListClipperData(public var ListClipper!: CPointer<ImGuiListClipper>, public var LossynessOffset!: Float32, public var StepNo!: Int32, public var ItemsFrozen!: Int32, public var Ranges!: ImVector_ImGuiListClipperRange) {
    }

    public init() {
        ListClipper = CPointer<ImGuiListClipper>()
        LossynessOffset = 0.0f32
        StepNo = 0
        ItemsFrozen = 0
        Ranges = ImVector_ImGuiListClipperRange()
    }
}

// struct ImGuiListClipperRange
@C
public struct ImGuiListClipperRange {
    public ImGuiListClipperRange(public var Min!: Int32, public var Max!: Int32, public var PosToIndexConvert!: Bool, public var PosToIndexOffsetMin!: ImS8, public var PosToIndexOffsetMax!: ImS8) {
    }

    public init() {
        Min = 0
        Max = 0
        PosToIndexConvert = false
        PosToIndexOffsetMin = 0
        PosToIndexOffsetMax = 0
    }
}

// struct ImGuiLocEntry
@C
public struct ImGuiLocEntry {
    public ImGuiLocEntry(public var Key!: ImGuiLocKey, public var Text!: CString) {
    }

    public init() {
        Key = 0
        Text = CString(CPointer<UInt8>())
    }
}

// struct ImGuiMenuColumns
@C
public struct ImGuiMenuColumns {
    public ImGuiMenuColumns(public var TotalWidth!: ImU32, public var NextTotalWidth!: ImU32, public var Spacing!: ImU16, public var OffsetIcon!: ImU16, public var OffsetLabel!: ImU16, public var OffsetShortcut!: ImU16, public var OffsetMark!: ImU16, public var Widths!: VArray<ImU16, $4>) {
    }

    public init() {
        TotalWidth = 0
        NextTotalWidth = 0
        Spacing = 0
        OffsetIcon = 0
        OffsetLabel = 0
        OffsetShortcut = 0
        OffsetMark = 0
        Widths = VArray<ImU16, $4>(item: 0)
    }
}

// struct ImGuiMetricsConfig
@C
public struct ImGuiMetricsConfig {
    public ImGuiMetricsConfig(public var ShowDebugLog!: Bool, public var ShowIDStackTool!: Bool, public var ShowWindowsRects!: Bool, public var ShowWindowsBeginOrder!: Bool, public var ShowTablesRects!: Bool, public var ShowDrawCmdMesh!: Bool, public var ShowDrawCmdBoundingBoxes!: Bool, public var ShowTextEncodingViewer!: Bool, public var ShowAtlasTintedWithTextColor!: Bool, public var ShowDockingNodes!: Bool, public var ShowWindowsRectsType!: Int32, public var ShowTablesRectsType!: Int32, public var HighlightMonitorIdx!: Int32, public var HighlightViewportID!: ImGuiID) {
    }

    public init() {
        ShowDebugLog = false
        ShowIDStackTool = false
        ShowWindowsRects = false
        ShowWindowsBeginOrder = false
        ShowTablesRects = false
        ShowDrawCmdMesh = false
        ShowDrawCmdBoundingBoxes = false
        ShowTextEncodingViewer = false
        ShowAtlasTintedWithTextColor = false
        ShowDockingNodes = false
        ShowWindowsRectsType = 0
        ShowTablesRectsType = 0
        HighlightMonitorIdx = 0
        HighlightViewportID = 0
    }
}

// struct ImGuiNavItemData
@C
public struct ImGuiNavItemData {
    public ImGuiNavItemData(public var Window!: CPointer<ImGuiWindow>, public var ID!: ImGuiID, public var FocusScopeId!: ImGuiID, public var RectRel!: ImRect, public var InFlags!: ImGuiItemFlags, public var DistBox!: Float32, public var DistCenter!: Float32, public var DistAxial!: Float32, public var SelectionUserData!: ImGuiSelectionUserData) {
    }

    public init() {
        Window = CPointer<ImGuiWindow>()
        ID = 0
        FocusScopeId = 0
        RectRel = ImRect()
        InFlags = 0
        DistBox = 0.0f32
        DistCenter = 0.0f32
        DistAxial = 0.0f32
        SelectionUserData = 0
    }
}

// struct ImGuiNavTreeNodeData
@C
public struct ImGuiNavTreeNodeData {
    public ImGuiNavTreeNodeData(public var ID!: ImGuiID, public var InFlags!: ImGuiItemFlags, public var NavRect!: ImRect) {
    }

    public init() {
        ID = 0
        InFlags = 0
        NavRect = ImRect()
    }
}

// struct ImGuiNextItemData
@C
public struct ImGuiNextItemData {
    public ImGuiNextItemData(public var Flags!: ImGuiNextItemDataFlags, public var ItemFlags!: ImGuiItemFlags, public var SelectionUserData!: ImGuiSelectionUserData, public var Width!: Float32, public var Shortcut!: ImGuiKeyChord, public var ShortcutFlags!: ImGuiInputFlags, public var OpenVal!: Bool, public var OpenCond!: ImU8, public var RefVal!: ImGuiDataTypeStorage) {
    }

    public init() {
        Flags = 0
        ItemFlags = 0
        SelectionUserData = 0
        Width = 0.0f32
        Shortcut = 0
        ShortcutFlags = 0
        OpenVal = false
        OpenCond = 0
        RefVal = ImGuiDataTypeStorage()
    }
}

// struct ImGuiNextWindowData
@C
public struct ImGuiNextWindowData {
    public ImGuiNextWindowData(public var Flags!: ImGuiNextWindowDataFlags, public var PosCond!: ImGuiCond, public var SizeCond!: ImGuiCond, public var CollapsedCond!: ImGuiCond, public var DockCond!: ImGuiCond, public var PosVal!: ImVec2, public var PosPivotVal!: ImVec2, public var SizeVal!: ImVec2, public var ContentSizeVal!: ImVec2, public var ScrollVal!: ImVec2, public var ChildFlags!: ImGuiChildFlags, public var PosUndock!: Bool, public var CollapsedVal!: Bool, public var SizeConstraintRect!: ImRect, public var SizeCallback!: ImGuiSizeCallback, public var SizeCallbackUserData!: CPointer<Unit>, public var BgAlphaVal!: Float32, public var ViewportId!: ImGuiID, public var DockId!: ImGuiID, public var WindowClass!: ImGuiWindowClass, public var MenuBarOffsetMinVal!: ImVec2, public var RefreshFlagsVal!: ImGuiWindowRefreshFlags) {
    }

    public init() {
        Flags = 0
        PosCond = 0
        SizeCond = 0
        CollapsedCond = 0
        DockCond = 0
        PosVal = ImVec2()
        PosPivotVal = ImVec2()
        SizeVal = ImVec2()
        ContentSizeVal = ImVec2()
        ScrollVal = ImVec2()
        ChildFlags = 0
        PosUndock = false
        CollapsedVal = false
        SizeConstraintRect = ImRect()
        SizeCallback = CFunc<(data: CPointer<ImGuiSizeCallbackData>) -> Unit>(CPointer<Unit>())
        SizeCallbackUserData = CPointer<Unit>()
        BgAlphaVal = 0.0f32
        ViewportId = 0
        DockId = 0
        WindowClass = ImGuiWindowClass()
        MenuBarOffsetMinVal = ImVec2()
        RefreshFlagsVal = 0
    }
}

// struct ImGuiOldColumnData
@C
public struct ImGuiOldColumnData {
    public ImGuiOldColumnData(public var OffsetNorm!: Float32, public var OffsetNormBeforeResize!: Float32, public var Flags!: ImGuiOldColumnFlags, public var ClipRect!: ImRect) {
    }

    public init() {
        OffsetNorm = 0.0f32
        OffsetNormBeforeResize = 0.0f32
        Flags = 0
        ClipRect = ImRect()
    }
}

// struct ImGuiOldColumns
@C
public struct ImGuiOldColumns {
    public ImGuiOldColumns(public var ID!: ImGuiID, public var Flags!: ImGuiOldColumnFlags, public var IsFirstFrame!: Bool, public var IsBeingResized!: Bool, public var Current!: Int32, public var Count!: Int32, public var OffMinX!: Float32, public var OffMaxX!: Float32, public var LineMinY!: Float32, public var LineMaxY!: Float32, public var HostCursorPosY!: Float32, public var HostCursorMaxPosX!: Float32, public var HostInitialClipRect!: ImRect, public var HostBackupClipRect!: ImRect, public var HostBackupParentWorkRect!: ImRect, public var Columns!: ImVector_ImGuiOldColumnData, public var Splitter!: ImDrawListSplitter) {
    }

    public init() {
        ID = 0
        Flags = 0
        IsFirstFrame = false
        IsBeingResized = false
        Current = 0
        Count = 0
        OffMinX = 0.0f32
        OffMaxX = 0.0f32
        LineMinY = 0.0f32
        LineMaxY = 0.0f32
        HostCursorPosY = 0.0f32
        HostCursorMaxPosX = 0.0f32
        HostInitialClipRect = ImRect()
        HostBackupClipRect = ImRect()
        HostBackupParentWorkRect = ImRect()
        Columns = ImVector_ImGuiOldColumnData()
        Splitter = ImDrawListSplitter()
    }
}

// struct ImGuiOnceUponAFrame
@C
public struct ImGuiOnceUponAFrame {
    public ImGuiOnceUponAFrame(public var RefFrame!: Int32) {
    }

    public init() {
        RefFrame = 0
    }
}

// struct ImGuiPayload
@C
public struct ImGuiPayload {
    public ImGuiPayload(public var Data!: CPointer<Unit>, public var DataSize!: Int32, public var SourceId!: ImGuiID, public var SourceParentId!: ImGuiID, public var DataFrameCount!: Int32, public var DataType!: VArray<UInt8, $33>, public var Preview!: Bool, public var Delivery!: Bool) {
    }

    public init() {
        Data = CPointer<Unit>()
        DataSize = 0
        SourceId = 0
        SourceParentId = 0
        DataFrameCount = 0
        DataType = VArray<UInt8, $33>(item: 0)
        Preview = false
        Delivery = false
    }
}

// struct ImGuiPlatformIO
@C
public struct ImGuiPlatformIO {
    public ImGuiPlatformIO(public var Platform_CreateWindow!: CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>, public var Platform_DestroyWindow!: CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>, public var Platform_ShowWindow!: CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>, public var Platform_SetWindowPos!: CFunc<(vp: CPointer<ImGuiViewport>, pos: ImVec2) -> Unit>, public var Platform_GetWindowPos!: CFunc<(vp: CPointer<ImGuiViewport>) -> ImVec2>, public var Platform_SetWindowSize!: CFunc<(vp: CPointer<ImGuiViewport>, size: ImVec2) -> Unit>, public var Platform_GetWindowSize!: CFunc<(vp: CPointer<ImGuiViewport>) -> ImVec2>, public var Platform_SetWindowFocus!: CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>, public var Platform_GetWindowFocus!: CFunc<(vp: CPointer<ImGuiViewport>) -> Bool>, public var Platform_GetWindowMinimized!: CFunc<(vp: CPointer<ImGuiViewport>) -> Bool>, public var Platform_SetWindowTitle!: CFunc<(vp: CPointer<ImGuiViewport>, str: CString) -> Unit>, public var Platform_SetWindowAlpha!: CFunc<(vp: CPointer<ImGuiViewport>, alpha: Float32) -> Unit>, public var Platform_UpdateWindow!: CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>, public var Platform_RenderWindow!: CFunc<(vp: CPointer<ImGuiViewport>, render_arg: CPointer<Unit>) -> Unit>, public var Platform_SwapBuffers!: CFunc<(vp: CPointer<ImGuiViewport>, render_arg: CPointer<Unit>) -> Unit>, public var Platform_GetWindowDpiScale!: CFunc<(vp: CPointer<ImGuiViewport>) -> Float32>, public var Platform_OnChangedViewport!: CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>, public var Platform_CreateVkSurface!: CFunc<(vp: CPointer<ImGuiViewport>, vk_inst: ImU64, vk_allocators: CPointer<Unit>, out_vk_surface: CPointer<ImU64>) -> Int32>, public var Renderer_CreateWindow!: CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>, public var Renderer_DestroyWindow!: CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>, public var Renderer_SetWindowSize!: CFunc<(vp: CPointer<ImGuiViewport>, size: ImVec2) -> Unit>, public var Renderer_RenderWindow!: CFunc<(vp: CPointer<ImGuiViewport>, render_arg: CPointer<Unit>) -> Unit>, public var Renderer_SwapBuffers!: CFunc<(vp: CPointer<ImGuiViewport>, render_arg: CPointer<Unit>) -> Unit>, public var Monitors!: ImVector_ImGuiPlatformMonitor, public var Viewports!: ImVector_ImGuiViewportPtr) {
    }

    public init() {
        Platform_CreateWindow = CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>(CPointer<Unit>())
        Platform_DestroyWindow = CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>(CPointer<Unit>())
        Platform_ShowWindow = CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>(CPointer<Unit>())
        Platform_SetWindowPos = CFunc<(vp: CPointer<ImGuiViewport>, pos: ImVec2) -> Unit>(CPointer<Unit>())
        Platform_GetWindowPos = CFunc<(vp: CPointer<ImGuiViewport>) -> ImVec2>(CPointer<Unit>())
        Platform_SetWindowSize = CFunc<(vp: CPointer<ImGuiViewport>, size: ImVec2) -> Unit>(CPointer<Unit>())
        Platform_GetWindowSize = CFunc<(vp: CPointer<ImGuiViewport>) -> ImVec2>(CPointer<Unit>())
        Platform_SetWindowFocus = CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>(CPointer<Unit>())
        Platform_GetWindowFocus = CFunc<(vp: CPointer<ImGuiViewport>) -> Bool>(CPointer<Unit>())
        Platform_GetWindowMinimized = CFunc<(vp: CPointer<ImGuiViewport>) -> Bool>(CPointer<Unit>())
        Platform_SetWindowTitle = CFunc<(vp: CPointer<ImGuiViewport>, str: CString) -> Unit>(CPointer<Unit>())
        Platform_SetWindowAlpha = CFunc<(vp: CPointer<ImGuiViewport>, alpha: Float32) -> Unit>(CPointer<Unit>())
        Platform_UpdateWindow = CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>(CPointer<Unit>())
        Platform_RenderWindow = CFunc<(vp: CPointer<ImGuiViewport>, render_arg: CPointer<Unit>) -> Unit>(CPointer<Unit>())
        Platform_SwapBuffers = CFunc<(vp: CPointer<ImGuiViewport>, render_arg: CPointer<Unit>) -> Unit>(CPointer<Unit>())
        Platform_GetWindowDpiScale = CFunc<(vp: CPointer<ImGuiViewport>) -> Float32>(CPointer<Unit>())
        Platform_OnChangedViewport = CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>(CPointer<Unit>())
        Platform_CreateVkSurface = CFunc<(vp: CPointer<ImGuiViewport>, vk_inst: ImU64, vk_allocators: CPointer<Unit>, out_vk_surface: CPointer<ImU64>) -> Int32>(CPointer<Unit>())
        Renderer_CreateWindow = CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>(CPointer<Unit>())
        Renderer_DestroyWindow = CFunc<(vp: CPointer<ImGuiViewport>) -> Unit>(CPointer<Unit>())
        Renderer_SetWindowSize = CFunc<(vp: CPointer<ImGuiViewport>, size: ImVec2) -> Unit>(CPointer<Unit>())
        Renderer_RenderWindow = CFunc<(vp: CPointer<ImGuiViewport>, render_arg: CPointer<Unit>) -> Unit>(CPointer<Unit>())
        Renderer_SwapBuffers = CFunc<(vp: CPointer<ImGuiViewport>, render_arg: CPointer<Unit>) -> Unit>(CPointer<Unit>())
        Monitors = ImVector_ImGuiPlatformMonitor()
        Viewports = ImVector_ImGuiViewportPtr()
    }
}

// struct ImGuiPlatformImeData
@C
public struct ImGuiPlatformImeData {
    public ImGuiPlatformImeData(public var WantVisible!: Bool, public var InputPos!: ImVec2, public var InputLineHeight!: Float32) {
    }

    public init() {
        WantVisible = false
        InputPos = ImVec2()
        InputLineHeight = 0.0f32
    }
}

// struct ImGuiPlatformMonitor
@C
public struct ImGuiPlatformMonitor {
    public ImGuiPlatformMonitor(public var MainPos!: ImVec2, public var MainSize!: ImVec2, public var WorkPos!: ImVec2, public var WorkSize!: ImVec2, public var DpiScale!: Float32, public var PlatformHandle!: CPointer<Unit>) {
    }

    public init() {
        MainPos = ImVec2()
        MainSize = ImVec2()
        WorkPos = ImVec2()
        WorkSize = ImVec2()
        DpiScale = 0.0f32
        PlatformHandle = CPointer<Unit>()
    }
}

// struct ImGuiPopupData
@C
public struct ImGuiPopupData {
    public ImGuiPopupData(public var PopupId!: ImGuiID, public var Window!: CPointer<ImGuiWindow>, public var RestoreNavWindow!: CPointer<ImGuiWindow>, public var ParentNavLayer!: Int32, public var OpenFrameCount!: Int32, public var OpenParentId!: ImGuiID, public var OpenPopupPos!: ImVec2, public var OpenMousePos!: ImVec2) {
    }

    public init() {
        PopupId = 0
        Window = CPointer<ImGuiWindow>()
        RestoreNavWindow = CPointer<ImGuiWindow>()
        ParentNavLayer = 0
        OpenFrameCount = 0
        OpenParentId = 0
        OpenPopupPos = ImVec2()
        OpenMousePos = ImVec2()
    }
}

// struct ImGuiPtrOrIndex
@C
public struct ImGuiPtrOrIndex {
    public ImGuiPtrOrIndex(public var Ptr!: CPointer<Unit>, public var Index!: Int32) {
    }

    public init() {
        Ptr = CPointer<Unit>()
        Index = 0
    }
}

// struct ImGuiSettingsHandler
@C
public struct ImGuiSettingsHandler {
    public ImGuiSettingsHandler(public var TypeName!: CString, public var TypeHash!: ImGuiID, public var ClearAllFn!: CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<ImGuiSettingsHandler>) -> Unit>, public var ReadInitFn!: CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<ImGuiSettingsHandler>) -> Unit>, public var ReadOpenFn!: CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<ImGuiSettingsHandler>, name: CString) -> CPointer<Unit>>, public var ReadLineFn!: CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<ImGuiSettingsHandler>, entry: CPointer<Unit>, line: CString) -> Unit>, public var ApplyAllFn!: CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<ImGuiSettingsHandler>) -> Unit>, public var WriteAllFn!: CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<ImGuiSettingsHandler>, out_buf: CPointer<ImGuiTextBuffer>) -> Unit>, public var UserData!: CPointer<Unit>) {
    }

    public init() {
        TypeName = CString(CPointer<UInt8>())
        TypeHash = 0
        ClearAllFn = CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<ImGuiSettingsHandler>) -> Unit>(CPointer<Unit>())
        ReadInitFn = CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<ImGuiSettingsHandler>) -> Unit>(CPointer<Unit>())
        ReadOpenFn = CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<ImGuiSettingsHandler>, name: CString) -> CPointer<Unit>>(CPointer<Unit>())
        ReadLineFn = CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<ImGuiSettingsHandler>, entry: CPointer<Unit>, line: CString) -> Unit>(CPointer<Unit>())
        ApplyAllFn = CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<ImGuiSettingsHandler>) -> Unit>(CPointer<Unit>())
        WriteAllFn = CFunc<(ctx: CPointer<ImGuiContext>, handler: CPointer<ImGuiSettingsHandler>, out_buf: CPointer<ImGuiTextBuffer>) -> Unit>(CPointer<Unit>())
        UserData = CPointer<Unit>()
    }
}

// struct ImGuiShrinkWidthItem
@C
public struct ImGuiShrinkWidthItem {
    public ImGuiShrinkWidthItem(public var Index!: Int32, public var Width!: Float32, public var InitialWidth!: Float32) {
    }

    public init() {
        Index = 0
        Width = 0.0f32
        InitialWidth = 0.0f32
    }
}

// struct ImGuiSizeCallbackData
@C
public struct ImGuiSizeCallbackData {
    public ImGuiSizeCallbackData(public var UserData!: CPointer<Unit>, public var Pos!: ImVec2, public var CurrentSize!: ImVec2, public var DesiredSize!: ImVec2) {
    }

    public init() {
        UserData = CPointer<Unit>()
        Pos = ImVec2()
        CurrentSize = ImVec2()
        DesiredSize = ImVec2()
    }
}

// struct ImGuiStackSizes
@C
public struct ImGuiStackSizes {
    public ImGuiStackSizes(public var SizeOfIDStack!: Int16, public var SizeOfColorStack!: Int16, public var SizeOfStyleVarStack!: Int16, public var SizeOfFontStack!: Int16, public var SizeOfFocusScopeStack!: Int16, public var SizeOfGroupStack!: Int16, public var SizeOfItemFlagsStack!: Int16, public var SizeOfBeginPopupStack!: Int16, public var SizeOfDisabledStack!: Int16) {
    }

    public init() {
        SizeOfIDStack = 0
        SizeOfColorStack = 0
        SizeOfStyleVarStack = 0
        SizeOfFontStack = 0
        SizeOfFocusScopeStack = 0
        SizeOfGroupStack = 0
        SizeOfItemFlagsStack = 0
        SizeOfBeginPopupStack = 0
        SizeOfDisabledStack = 0
    }
}

// struct ImGuiStorage
@C
public struct ImGuiStorage {
    public ImGuiStorage(public var Data!: ImVector_ImGuiStoragePair) {
    }

    public init() {
        Data = ImVector_ImGuiStoragePair()
    }
}

// struct ImGuiStyle
@C
public struct ImGuiStyle {
    public ImGuiStyle(public var Alpha!: Float32, public var DisabledAlpha!: Float32, public var WindowPadding!: ImVec2, public var WindowRounding!: Float32, public var WindowBorderSize!: Float32, public var WindowMinSize!: ImVec2, public var WindowTitleAlign!: ImVec2, public var WindowMenuButtonPosition!: ImGuiDir, public var ChildRounding!: Float32, public var ChildBorderSize!: Float32, public var PopupRounding!: Float32, public var PopupBorderSize!: Float32, public var FramePadding!: ImVec2, public var FrameRounding!: Float32, public var FrameBorderSize!: Float32, public var ItemSpacing!: ImVec2, public var ItemInnerSpacing!: ImVec2, public var CellPadding!: ImVec2, public var TouchExtraPadding!: ImVec2, public var IndentSpacing!: Float32, public var ColumnsMinSpacing!: Float32, public var ScrollbarSize!: Float32, public var ScrollbarRounding!: Float32, public var GrabMinSize!: Float32, public var GrabRounding!: Float32, public var LogSliderDeadzone!: Float32, public var TabRounding!: Float32, public var TabBorderSize!: Float32, public var TabMinWidthForCloseButton!: Float32, public var TabBarBorderSize!: Float32, public var TableAngledHeadersAngle!: Float32, public var TableAngledHeadersTextAlign!: ImVec2, public var ColorButtonPosition!: ImGuiDir, public var ButtonTextAlign!: ImVec2, public var SelectableTextAlign!: ImVec2, public var SeparatorTextBorderSize!: Float32, public var SeparatorTextAlign!: ImVec2, public var SeparatorTextPadding!: ImVec2, public var DisplayWindowPadding!: ImVec2, public var DisplaySafeAreaPadding!: ImVec2, public var DockingSeparatorSize!: Float32, public var MouseCursorScale!: Float32, public var AntiAliasedLines!: Bool, public var AntiAliasedLinesUseTex!: Bool, public var AntiAliasedFill!: Bool, public var CurveTessellationTol!: Float32, public var CircleTessellationMaxError!: Float32, public var Colors!: VArray<ImVec4, $55>, public var HoverStationaryDelay!: Float32, public var HoverDelayShort!: Float32, public var HoverDelayNormal!: Float32, public var HoverFlagsForTooltipMouse!: ImGuiHoveredFlags, public var HoverFlagsForTooltipNav!: ImGuiHoveredFlags) {
    }

    public init() {
        Alpha = 0.0f32
        DisabledAlpha = 0.0f32
        WindowPadding = ImVec2()
        WindowRounding = 0.0f32
        WindowBorderSize = 0.0f32
        WindowMinSize = ImVec2()
        WindowTitleAlign = ImVec2()
        WindowMenuButtonPosition = 0
        ChildRounding = 0.0f32
        ChildBorderSize = 0.0f32
        PopupRounding = 0.0f32
        PopupBorderSize = 0.0f32
        FramePadding = ImVec2()
        FrameRounding = 0.0f32
        FrameBorderSize = 0.0f32
        ItemSpacing = ImVec2()
        ItemInnerSpacing = ImVec2()
        CellPadding = ImVec2()
        TouchExtraPadding = ImVec2()
        IndentSpacing = 0.0f32
        ColumnsMinSpacing = 0.0f32
        ScrollbarSize = 0.0f32
        ScrollbarRounding = 0.0f32
        GrabMinSize = 0.0f32
        GrabRounding = 0.0f32
        LogSliderDeadzone = 0.0f32
        TabRounding = 0.0f32
        TabBorderSize = 0.0f32
        TabMinWidthForCloseButton = 0.0f32
        TabBarBorderSize = 0.0f32
        TableAngledHeadersAngle = 0.0f32
        TableAngledHeadersTextAlign = ImVec2()
        ColorButtonPosition = 0
        ButtonTextAlign = ImVec2()
        SelectableTextAlign = ImVec2()
        SeparatorTextBorderSize = 0.0f32
        SeparatorTextAlign = ImVec2()
        SeparatorTextPadding = ImVec2()
        DisplayWindowPadding = ImVec2()
        DisplaySafeAreaPadding = ImVec2()
        DockingSeparatorSize = 0.0f32
        MouseCursorScale = 0.0f32
        AntiAliasedLines = false
        AntiAliasedLinesUseTex = false
        AntiAliasedFill = false
        CurveTessellationTol = 0.0f32
        CircleTessellationMaxError = 0.0f32
        Colors = VArray<ImVec4, $55>(item: ImVec4())
        HoverStationaryDelay = 0.0f32
        HoverDelayShort = 0.0f32
        HoverDelayNormal = 0.0f32
        HoverFlagsForTooltipMouse = 0
        HoverFlagsForTooltipNav = 0
    }
}

// struct ImGuiTabBar
@C
public struct ImGuiTabBar {
    public ImGuiTabBar(public var Tabs!: ImVector_ImGuiTabItem, public var Flags!: ImGuiTabBarFlags, public var ID!: ImGuiID, public var SelectedTabId!: ImGuiID, public var NextSelectedTabId!: ImGuiID, public var VisibleTabId!: ImGuiID, public var CurrFrameVisible!: Int32, public var PrevFrameVisible!: Int32, public var BarRect!: ImRect, public var CurrTabsContentsHeight!: Float32, public var PrevTabsContentsHeight!: Float32, public var WidthAllTabs!: Float32, public var WidthAllTabsIdeal!: Float32, public var ScrollingAnim!: Float32, public var ScrollingTarget!: Float32, public var ScrollingTargetDistToVisibility!: Float32, public var ScrollingSpeed!: Float32, public var ScrollingRectMinX!: Float32, public var ScrollingRectMaxX!: Float32, public var SeparatorMinX!: Float32, public var SeparatorMaxX!: Float32, public var ReorderRequestTabId!: ImGuiID, public var ReorderRequestOffset!: ImS16, public var BeginCount!: ImS8, public var WantLayout!: Bool, public var VisibleTabWasSubmitted!: Bool, public var TabsAddedNew!: Bool, public var TabsActiveCount!: ImS16, public var LastTabItemIdx!: ImS16, public var ItemSpacingY!: Float32, public var FramePadding!: ImVec2, public var BackupCursorPos!: ImVec2, public var TabsNames!: ImGuiTextBuffer) {
    }

    public init() {
        Tabs = ImVector_ImGuiTabItem()
        Flags = 0
        ID = 0
        SelectedTabId = 0
        NextSelectedTabId = 0
        VisibleTabId = 0
        CurrFrameVisible = 0
        PrevFrameVisible = 0
        BarRect = ImRect()
        CurrTabsContentsHeight = 0.0f32
        PrevTabsContentsHeight = 0.0f32
        WidthAllTabs = 0.0f32
        WidthAllTabsIdeal = 0.0f32
        ScrollingAnim = 0.0f32
        ScrollingTarget = 0.0f32
        ScrollingTargetDistToVisibility = 0.0f32
        ScrollingSpeed = 0.0f32
        ScrollingRectMinX = 0.0f32
        ScrollingRectMaxX = 0.0f32
        SeparatorMinX = 0.0f32
        SeparatorMaxX = 0.0f32
        ReorderRequestTabId = 0
        ReorderRequestOffset = 0
        BeginCount = 0
        WantLayout = false
        VisibleTabWasSubmitted = false
        TabsAddedNew = false
        TabsActiveCount = 0
        LastTabItemIdx = 0
        ItemSpacingY = 0.0f32
        FramePadding = ImVec2()
        BackupCursorPos = ImVec2()
        TabsNames = ImGuiTextBuffer()
    }
}

// struct ImGuiTabItem
@C
public struct ImGuiTabItem {
    public ImGuiTabItem(public var ID!: ImGuiID, public var Flags!: ImGuiTabItemFlags, public var Window!: CPointer<ImGuiWindow>, public var LastFrameVisible!: Int32, public var LastFrameSelected!: Int32, public var Offset!: Float32, public var Width!: Float32, public var ContentWidth!: Float32, public var RequestedWidth!: Float32, public var NameOffset!: ImS32, public var BeginOrder!: ImS16, public var IndexDuringLayout!: ImS16, public var WantClose!: Bool) {
    }

    public init() {
        ID = 0
        Flags = 0
        Window = CPointer<ImGuiWindow>()
        LastFrameVisible = 0
        LastFrameSelected = 0
        Offset = 0.0f32
        Width = 0.0f32
        ContentWidth = 0.0f32
        RequestedWidth = 0.0f32
        NameOffset = 0
        BeginOrder = 0
        IndexDuringLayout = 0
        WantClose = false
    }
}

// struct ImGuiTableCellData
@C
public struct ImGuiTableCellData {
    public ImGuiTableCellData(public var BgColor!: ImU32, public var Column!: ImGuiTableColumnIdx) {
    }

    public init() {
        BgColor = 0
        Column = 0
    }
}

// struct ImGuiTableColumnSortSpecs
@C
public struct ImGuiTableColumnSortSpecs {
    public ImGuiTableColumnSortSpecs(public var ColumnUserID!: ImGuiID, public var ColumnIndex!: ImS16, public var SortOrder!: ImS16, public var SortDirection!: ImGuiSortDirection) {
    }

    public init() {
        ColumnUserID = 0
        ColumnIndex = 0
        SortOrder = 0
        SortDirection = 0
    }
}

// struct ImGuiTableHeaderData
@C
public struct ImGuiTableHeaderData {
    public ImGuiTableHeaderData(public var Index!: ImGuiTableColumnIdx, public var TextColor!: ImU32, public var BgColor0!: ImU32, public var BgColor1!: ImU32) {
    }

    public init() {
        Index = 0
        TextColor = 0
        BgColor0 = 0
        BgColor1 = 0
    }
}

// struct ImGuiTableInstanceData
@C
public struct ImGuiTableInstanceData {
    public ImGuiTableInstanceData(public var TableInstanceID!: ImGuiID, public var LastOuterHeight!: Float32, public var LastTopHeadersRowHeight!: Float32, public var LastFrozenHeight!: Float32, public var HoveredRowLast!: Int32, public var HoveredRowNext!: Int32) {
    }

    public init() {
        TableInstanceID = 0
        LastOuterHeight = 0.0f32
        LastTopHeadersRowHeight = 0.0f32
        LastFrozenHeight = 0.0f32
        HoveredRowLast = 0
        HoveredRowNext = 0
    }
}

// struct ImGuiTableSettings
@C
public struct ImGuiTableSettings {
    public ImGuiTableSettings(public var ID!: ImGuiID, public var SaveFlags!: ImGuiTableFlags, public var RefScale!: Float32, public var ColumnsCount!: ImGuiTableColumnIdx, public var ColumnsCountMax!: ImGuiTableColumnIdx, public var WantApply!: Bool) {
    }

    public init() {
        ID = 0
        SaveFlags = 0
        RefScale = 0.0f32
        ColumnsCount = 0
        ColumnsCountMax = 0
        WantApply = false
    }
}

// struct ImGuiTableSortSpecs
@C
public struct ImGuiTableSortSpecs {
    public ImGuiTableSortSpecs(public var Specs!: CPointer<ImGuiTableColumnSortSpecs>, public var SpecsCount!: Int32, public var SpecsDirty!: Bool) {
    }

    public init() {
        Specs = CPointer<ImGuiTableColumnSortSpecs>()
        SpecsCount = 0
        SpecsDirty = false
    }
}

// struct ImGuiTableTempData
@C
public struct ImGuiTableTempData {
    public ImGuiTableTempData(public var TableIndex!: Int32, public var LastTimeActive!: Float32, public var AngledHeadersExtraWidth!: Float32, public var AngledHeadersRequests!: ImVector_ImGuiTableHeaderData, public var UserOuterSize!: ImVec2, public var DrawSplitter!: ImDrawListSplitter, public var HostBackupWorkRect!: ImRect, public var HostBackupParentWorkRect!: ImRect, public var HostBackupPrevLineSize!: ImVec2, public var HostBackupCurrLineSize!: ImVec2, public var HostBackupCursorMaxPos!: ImVec2, public var HostBackupColumnsOffset!: ImVec1, public var HostBackupItemWidth!: Float32, public var HostBackupItemWidthStackSize!: Int32) {
    }

    public init() {
        TableIndex = 0
        LastTimeActive = 0.0f32
        AngledHeadersExtraWidth = 0.0f32
        AngledHeadersRequests = ImVector_ImGuiTableHeaderData()
        UserOuterSize = ImVec2()
        DrawSplitter = ImDrawListSplitter()
        HostBackupWorkRect = ImRect()
        HostBackupParentWorkRect = ImRect()
        HostBackupPrevLineSize = ImVec2()
        HostBackupCurrLineSize = ImVec2()
        HostBackupCursorMaxPos = ImVec2()
        HostBackupColumnsOffset = ImVec1()
        HostBackupItemWidth = 0.0f32
        HostBackupItemWidthStackSize = 0
    }
}

// struct ImGuiTextBuffer
@C
public struct ImGuiTextBuffer {
    public ImGuiTextBuffer(public var Buf!: ImVector_char) {
    }

    public init() {
        Buf = ImVector_char()
    }
}

// struct ImGuiTextFilter
@C
public struct ImGuiTextFilter {
    public ImGuiTextFilter(public var InputBuf!: VArray<UInt8, $256>, public var Filters!: ImVector_ImGuiTextRange, public var CountGrep!: Int32) {
    }

    public init() {
        InputBuf = VArray<UInt8, $256>(item: 0)
        Filters = ImVector_ImGuiTextRange()
        CountGrep = 0
    }
}

// struct ImGuiTextIndex
@C
public struct ImGuiTextIndex {
    public ImGuiTextIndex(public var LineOffsets!: ImVector_int, public var EndOffset!: Int32) {
    }

    public init() {
        LineOffsets = ImVector_int()
        EndOffset = 0
    }
}

// struct ImGuiTextRange
@C
public struct ImGuiTextRange {
    public ImGuiTextRange(public var b!: CString, public var e!: CString) {
    }

    public init() {
        b = CString(CPointer<UInt8>())
        e = CString(CPointer<UInt8>())
    }
}

// struct ImGuiTypingSelectRequest
@C
public struct ImGuiTypingSelectRequest {
    public ImGuiTypingSelectRequest(public var Flags!: ImGuiTypingSelectFlags, public var SearchBufferLen!: Int32, public var SearchBuffer!: CString, public var SelectRequest!: Bool, public var SingleCharMode!: Bool, public var SingleCharSize!: ImS8) {
    }

    public init() {
        Flags = 0
        SearchBufferLen = 0
        SearchBuffer = CString(CPointer<UInt8>())
        SelectRequest = false
        SingleCharMode = false
        SingleCharSize = 0
    }
}

// struct ImGuiTypingSelectState
@C
public struct ImGuiTypingSelectState {
    public ImGuiTypingSelectState(public var Request!: ImGuiTypingSelectRequest, public var SearchBuffer!: VArray<UInt8, $64>, public var FocusScope!: ImGuiID, public var LastRequestFrame!: Int32, public var LastRequestTime!: Float32, public var SingleCharModeLock!: Bool) {
    }

    public init() {
        Request = ImGuiTypingSelectRequest()
        SearchBuffer = VArray<UInt8, $64>(item: 0)
        FocusScope = 0
        LastRequestFrame = 0
        LastRequestTime = 0.0f32
        SingleCharModeLock = false
    }
}

// struct ImGuiViewport
@C
public struct ImGuiViewport {
    public ImGuiViewport(public var ID!: ImGuiID, public var Flags!: ImGuiViewportFlags, public var Pos!: ImVec2, public var Size!: ImVec2, public var WorkPos!: ImVec2, public var WorkSize!: ImVec2, public var DpiScale!: Float32, public var ParentViewportId!: ImGuiID, public var DrawData!: CPointer<ImDrawData>, public var RendererUserData!: CPointer<Unit>, public var PlatformUserData!: CPointer<Unit>, public var PlatformHandle!: CPointer<Unit>, public var PlatformHandleRaw!: CPointer<Unit>, public var PlatformWindowCreated!: Bool, public var PlatformRequestMove!: Bool, public var PlatformRequestResize!: Bool, public var PlatformRequestClose!: Bool) {
    }

    public init() {
        ID = 0
        Flags = 0
        Pos = ImVec2()
        Size = ImVec2()
        WorkPos = ImVec2()
        WorkSize = ImVec2()
        DpiScale = 0.0f32
        ParentViewportId = 0
        DrawData = CPointer<ImDrawData>()
        RendererUserData = CPointer<Unit>()
        PlatformUserData = CPointer<Unit>()
        PlatformHandle = CPointer<Unit>()
        PlatformHandleRaw = CPointer<Unit>()
        PlatformWindowCreated = false
        PlatformRequestMove = false
        PlatformRequestResize = false
        PlatformRequestClose = false
    }
}

// struct ImGuiViewportP
@C
public struct ImGuiViewportP {
    public ImGuiViewportP(public var _ImGuiViewport!: ImGuiViewport, public var Window!: CPointer<ImGuiWindow>, public var Idx!: Int32, public var LastFrameActive!: Int32, public var LastFocusedStampCount!: Int32, public var LastNameHash!: ImGuiID, public var LastPos!: ImVec2, public var Alpha!: Float32, public var LastAlpha!: Float32, public var LastFocusedHadNavWindow!: Bool, public var PlatformMonitor!: Int16, public var BgFgDrawListsLastFrame!: VArray<Int32, $2>, public var BgFgDrawLists!: VArray<CPointer<ImDrawList>, $2>, public var DrawDataP!: ImDrawData, public var DrawDataBuilder!: ImDrawDataBuilder, public var LastPlatformPos!: ImVec2, public var LastPlatformSize!: ImVec2, public var LastRendererSize!: ImVec2, public var WorkOffsetMin!: ImVec2, public var WorkOffsetMax!: ImVec2, public var BuildWorkOffsetMin!: ImVec2, public var BuildWorkOffsetMax!: ImVec2) {
    }

    public init() {
        _ImGuiViewport = ImGuiViewport()
        Window = CPointer<ImGuiWindow>()
        Idx = 0
        LastFrameActive = 0
        LastFocusedStampCount = 0
        LastNameHash = 0
        LastPos = ImVec2()
        Alpha = 0.0f32
        LastAlpha = 0.0f32
        LastFocusedHadNavWindow = false
        PlatformMonitor = 0
        BgFgDrawListsLastFrame = VArray<Int32, $2>(item: 0)
        BgFgDrawLists = VArray<CPointer<ImDrawList>, $2>(item: CPointer<ImDrawList>())
        DrawDataP = ImDrawData()
        DrawDataBuilder = ImDrawDataBuilder()
        LastPlatformPos = ImVec2()
        LastPlatformSize = ImVec2()
        LastRendererSize = ImVec2()
        WorkOffsetMin = ImVec2()
        WorkOffsetMax = ImVec2()
        BuildWorkOffsetMin = ImVec2()
        BuildWorkOffsetMax = ImVec2()
    }
}

// struct ImGuiWindowClass
@C
public struct ImGuiWindowClass {
    public ImGuiWindowClass(public var ClassId!: ImGuiID, public var ParentViewportId!: ImGuiID, public var FocusRouteParentWindowId!: ImGuiID, public var ViewportFlagsOverrideSet!: ImGuiViewportFlags, public var ViewportFlagsOverrideClear!: ImGuiViewportFlags, public var TabItemFlagsOverrideSet!: ImGuiTabItemFlags, public var DockNodeFlagsOverrideSet!: ImGuiDockNodeFlags, public var DockingAlwaysTabBar!: Bool, public var DockingAllowUnclassed!: Bool) {
    }

    public init() {
        ClassId = 0
        ParentViewportId = 0
        FocusRouteParentWindowId = 0
        ViewportFlagsOverrideSet = 0
        ViewportFlagsOverrideClear = 0
        TabItemFlagsOverrideSet = 0
        DockNodeFlagsOverrideSet = 0
        DockingAlwaysTabBar = false
        DockingAllowUnclassed = false
    }
}

// struct ImGuiWindowDockStyle
@C
public struct ImGuiWindowDockStyle {
    public ImGuiWindowDockStyle(public var Colors!: VArray<ImU32, $6>) {
    }

    public init() {
        Colors = VArray<ImU32, $6>(item: 0)
    }
}

// struct ImGuiWindowSettings
@C
public struct ImGuiWindowSettings {
    public ImGuiWindowSettings(public var ID!: ImGuiID, public var Pos!: ImVec2ih, public var Size!: ImVec2ih, public var ViewportPos!: ImVec2ih, public var ViewportId!: ImGuiID, public var DockId!: ImGuiID, public var ClassId!: ImGuiID, public var DockOrder!: Int16, public var Collapsed!: Bool, public var IsChild!: Bool, public var WantApply!: Bool, public var WantDelete!: Bool) {
    }

    public init() {
        ID = 0
        Pos = ImVec2ih()
        Size = ImVec2ih()
        ViewportPos = ImVec2ih()
        ViewportId = 0
        DockId = 0
        ClassId = 0
        DockOrder = 0
        Collapsed = false
        IsChild = false
        WantApply = false
        WantDelete = false
    }
}

// struct ImGuiWindowStackData
@C
public struct ImGuiWindowStackData {
    public ImGuiWindowStackData(public var Window!: CPointer<ImGuiWindow>, public var ParentLastItemDataBackup!: ImGuiLastItemData, public var StackSizesOnBegin!: ImGuiStackSizes, public var DisabledOverrideReenable!: Bool) {
    }

    public init() {
        Window = CPointer<ImGuiWindow>()
        ParentLastItemDataBackup = ImGuiLastItemData()
        StackSizesOnBegin = ImGuiStackSizes()
        DisabledOverrideReenable = false
    }
}

// struct ImGuiWindowTempData
@C
public struct ImGuiWindowTempData {
    public ImGuiWindowTempData(public var CursorPos!: ImVec2, public var CursorPosPrevLine!: ImVec2, public var CursorStartPos!: ImVec2, public var CursorMaxPos!: ImVec2, public var IdealMaxPos!: ImVec2, public var CurrLineSize!: ImVec2, public var PrevLineSize!: ImVec2, public var CurrLineTextBaseOffset!: Float32, public var PrevLineTextBaseOffset!: Float32, public var IsSameLine!: Bool, public var IsSetPos!: Bool, public var Indent!: ImVec1, public var ColumnsOffset!: ImVec1, public var GroupOffset!: ImVec1, public var CursorStartPosLossyness!: ImVec2, public var NavLayerCurrent!: ImGuiNavLayer, public var NavLayersActiveMask!: Int16, public var NavLayersActiveMaskNext!: Int16, public var NavIsScrollPushableX!: Bool, public var NavHideHighlightOneFrame!: Bool, public var NavWindowHasScrollY!: Bool, public var MenuBarAppending!: Bool, public var MenuBarOffset!: ImVec2, public var MenuColumns!: ImGuiMenuColumns, public var TreeDepth!: Int32, public var TreeJumpToParentOnPopMask!: ImU32, public var ChildWindows!: ImVector_ImGuiWindowPtr, public var StateStorage!: CPointer<ImGuiStorage>, public var CurrentColumns!: CPointer<ImGuiOldColumns>, public var CurrentTableIdx!: Int32, public var LayoutType!: ImGuiLayoutType, public var ParentLayoutType!: ImGuiLayoutType, public var ModalDimBgColor!: ImU32, public var ItemWidth!: Float32, public var TextWrapPos!: Float32, public var ItemWidthStack!: ImVector_float, public var TextWrapPosStack!: ImVector_float) {
    }

    public init() {
        CursorPos = ImVec2()
        CursorPosPrevLine = ImVec2()
        CursorStartPos = ImVec2()
        CursorMaxPos = ImVec2()
        IdealMaxPos = ImVec2()
        CurrLineSize = ImVec2()
        PrevLineSize = ImVec2()
        CurrLineTextBaseOffset = 0.0f32
        PrevLineTextBaseOffset = 0.0f32
        IsSameLine = false
        IsSetPos = false
        Indent = ImVec1()
        ColumnsOffset = ImVec1()
        GroupOffset = ImVec1()
        CursorStartPosLossyness = ImVec2()
        NavLayerCurrent = 0
        NavLayersActiveMask = 0
        NavLayersActiveMaskNext = 0
        NavIsScrollPushableX = false
        NavHideHighlightOneFrame = false
        NavWindowHasScrollY = false
        MenuBarAppending = false
        MenuBarOffset = ImVec2()
        MenuColumns = ImGuiMenuColumns()
        TreeDepth = 0
        TreeJumpToParentOnPopMask = 0
        ChildWindows = ImVector_ImGuiWindowPtr()
        StateStorage = CPointer<ImGuiStorage>()
        CurrentColumns = CPointer<ImGuiOldColumns>()
        CurrentTableIdx = 0
        LayoutType = 0
        ParentLayoutType = 0
        ModalDimBgColor = 0
        ItemWidth = 0.0f32
        TextWrapPos = 0.0f32
        ItemWidthStack = ImVector_float()
        TextWrapPosStack = ImVector_float()
    }
}

// struct ImRect
@C
public struct ImRect {
    public ImRect(public var Min!: ImVec2, public var Max!: ImVec2) {
    }

    public init() {
        Min = ImVec2()
        Max = ImVec2()
    }
}

// struct ImVec1
@C
public struct ImVec1 {
    public ImVec1(public var x!: Float32) {
    }

    public init() {
        x = 0.0f32
    }
}

// struct ImVec2
@C
public struct ImVec2 {
    public ImVec2(public var x!: Float32, public var y!: Float32) {
    }

    public init() {
        x = 0.0f32
        y = 0.0f32
    }
}

// struct ImVec2ih
@C
public struct ImVec2ih {
    public ImVec2ih(public var x!: Int16, public var y!: Int16) {
    }

    public init() {
        x = 0
        y = 0
    }
}

// struct ImVec4
@C
public struct ImVec4 {
    public ImVec4(public var x!: Float32, public var y!: Float32, public var z!: Float32, public var w!: Float32) {
    }

    public init() {
        x = 0.0f32
        y = 0.0f32
        z = 0.0f32
        w = 0.0f32
    }
}

// struct STB_TexteditState
@C
public struct STB_TexteditState {
    public STB_TexteditState(public var cursor!: Int32, public var select_start!: Int32, public var select_end!: Int32, public var insert_mode!: UInt8, public var row_count_per_page!: Int32, public var cursor_at_end_of_line!: UInt8, public var initialized!: UInt8, public var has_preferred_x!: UInt8, public var single_line!: UInt8, public var padding1!: UInt8, public var padding2!: UInt8, public var padding3!: UInt8, public var preferred_x!: Float32, public var undostate!: StbUndoState) {
    }

    public init() {
        cursor = 0
        select_start = 0
        select_end = 0
        insert_mode = 0
        row_count_per_page = 0
        cursor_at_end_of_line = 0
        initialized = 0
        has_preferred_x = 0
        single_line = 0
        padding1 = 0
        padding2 = 0
        padding3 = 0
        preferred_x = 0.0f32
        undostate = StbUndoState()
    }
}

// struct StbTexteditRow
@C
public struct StbTexteditRow {
    public StbTexteditRow(public var x0!: Float32, public var x1!: Float32, public var baseline_y_delta!: Float32, public var ymin!: Float32, public var ymax!: Float32, public var num_chars!: Int32) {
    }

    public init() {
        x0 = 0.0f32
        x1 = 0.0f32
        baseline_y_delta = 0.0f32
        ymin = 0.0f32
        ymax = 0.0f32
        num_chars = 0
    }
}

// struct StbUndoRecord
@C
public struct StbUndoRecord {
    public StbUndoRecord(public var `where`!: Int32, public var insert_length!: Int32, public var delete_length!: Int32, public var char_storage!: Int32) {
    }

    public init() {
        `where` = 0
        insert_length = 0
        delete_length = 0
        char_storage = 0
    }
}

// struct StbUndoState
@C
public struct StbUndoState {
    public StbUndoState(public var undo_rec!: VArray<StbUndoRecord, $99>, public var undo_char!: VArray<ImWchar, $999>, public var undo_point!: Int16, public var redo_point!: Int16, public var undo_char_point!: Int32, public var redo_char_point!: Int32) {
    }

    public init() {
        undo_rec = VArray<StbUndoRecord, $99>(item: StbUndoRecord())
        undo_char = VArray<ImWchar, $999>(item: 0)
        undo_point = 0
        redo_point = 0
        undo_char_point = 0
        redo_char_point = 0
    }
}

// struct ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN
@C
public struct ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN {
    public ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN(public var Storage!: VArray<ImU32, $5>) {
    }

    public init() {
        Storage = VArray<ImU32, $5>(item: 0)
    }
}

// struct ImChunkStream_ImGuiTableSettings
@C
public struct ImChunkStream_ImGuiTableSettings {
    public ImChunkStream_ImGuiTableSettings(public var Buf!: ImVector_char) {
    }

    public init() {
        Buf = ImVector_char()
    }
}

// struct ImChunkStream_ImGuiWindowSettings
@C
public struct ImChunkStream_ImGuiWindowSettings {
    public ImChunkStream_ImGuiWindowSettings(public var Buf!: ImVector_char) {
    }

    public init() {
        Buf = ImVector_char()
    }
}

// struct ImPool_ImGuiTabBar
@C
public struct ImPool_ImGuiTabBar {
    public ImPool_ImGuiTabBar(public var Buf!: ImVector_ImGuiTabBar, public var Map!: ImGuiStorage, public var FreeIdx!: ImPoolIdx, public var AliveCount!: ImPoolIdx) {
    }

    public init() {
        Buf = ImVector_ImGuiTabBar()
        Map = ImGuiStorage()
        FreeIdx = 0
        AliveCount = 0
    }
}

// struct ImPool_ImGuiTable
@C
public struct ImPool_ImGuiTable {
    public ImPool_ImGuiTable(public var Buf!: ImVector_ImGuiTable, public var Map!: ImGuiStorage, public var FreeIdx!: ImPoolIdx, public var AliveCount!: ImPoolIdx) {
    }

    public init() {
        Buf = ImVector_ImGuiTable()
        Map = ImGuiStorage()
        FreeIdx = 0
        AliveCount = 0
    }
}

// struct ImSpan_ImGuiTableCellData
@C
public struct ImSpan_ImGuiTableCellData {
    public ImSpan_ImGuiTableCellData(public var Data!: CPointer<ImGuiTableCellData>, public var DataEnd!: CPointer<ImGuiTableCellData>) {
    }

    public init() {
        Data = CPointer<ImGuiTableCellData>()
        DataEnd = CPointer<ImGuiTableCellData>()
    }
}

// struct ImSpan_ImGuiTableColumn
@C
public struct ImSpan_ImGuiTableColumn {
    public ImSpan_ImGuiTableColumn(public var Data!: CPointer<ImGuiTableColumn>, public var DataEnd!: CPointer<ImGuiTableColumn>) {
    }

    public init() {
        Data = CPointer<ImGuiTableColumn>()
        DataEnd = CPointer<ImGuiTableColumn>()
    }
}

// struct ImSpan_ImGuiTableColumnIdx
@C
public struct ImSpan_ImGuiTableColumnIdx {
    public ImSpan_ImGuiTableColumnIdx(public var Data!: CPointer<ImGuiTableColumnIdx>, public var DataEnd!: CPointer<ImGuiTableColumnIdx>) {
    }

    public init() {
        Data = CPointer<ImGuiTableColumnIdx>()
        DataEnd = CPointer<ImGuiTableColumnIdx>()
    }
}

// struct ImVector_ImDrawChannel
@C
public struct ImVector_ImDrawChannel {
    public ImVector_ImDrawChannel(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImDrawChannel>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImDrawChannel>()
    }
}

// struct ImVector_ImDrawCmd
@C
public struct ImVector_ImDrawCmd {
    public ImVector_ImDrawCmd(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImDrawCmd>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImDrawCmd>()
    }
}

// struct ImVector_ImDrawIdx
@C
public struct ImVector_ImDrawIdx {
    public ImVector_ImDrawIdx(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImDrawIdx>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImDrawIdx>()
    }
}

// struct ImVector_ImDrawListPtr
@C
public struct ImVector_ImDrawListPtr {
    public ImVector_ImDrawListPtr(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<CPointer<ImDrawList>>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<CPointer<ImDrawList>>()
    }
}

// struct ImVector_ImDrawVert
@C
public struct ImVector_ImDrawVert {
    public ImVector_ImDrawVert(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImDrawVert>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImDrawVert>()
    }
}

// struct ImVector_ImFontPtr
@C
public struct ImVector_ImFontPtr {
    public ImVector_ImFontPtr(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<CPointer<ImFont>>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<CPointer<ImFont>>()
    }
}

// struct ImVector_ImFontAtlasCustomRect
@C
public struct ImVector_ImFontAtlasCustomRect {
    public ImVector_ImFontAtlasCustomRect(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImFontAtlasCustomRect>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImFontAtlasCustomRect>()
    }
}

// struct ImVector_ImFontConfig
@C
public struct ImVector_ImFontConfig {
    public ImVector_ImFontConfig(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImFontConfig>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImFontConfig>()
    }
}

// struct ImVector_ImFontGlyph
@C
public struct ImVector_ImFontGlyph {
    public ImVector_ImFontGlyph(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImFontGlyph>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImFontGlyph>()
    }
}

// struct ImVector_ImGuiColorMod
@C
public struct ImVector_ImGuiColorMod {
    public ImVector_ImGuiColorMod(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiColorMod>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiColorMod>()
    }
}

// struct ImVector_ImGuiContextHook
@C
public struct ImVector_ImGuiContextHook {
    public ImVector_ImGuiContextHook(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiContextHook>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiContextHook>()
    }
}

// struct ImVector_ImGuiDockNodeSettings
@C
public struct ImVector_ImGuiDockNodeSettings {
    public ImVector_ImGuiDockNodeSettings(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiDockNodeSettings>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiDockNodeSettings>()
    }
}

// struct ImVector_ImGuiDockRequest
@C
public struct ImVector_ImGuiDockRequest {
    public ImVector_ImGuiDockRequest(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiDockRequest>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiDockRequest>()
    }
}

// struct ImVector_ImGuiFocusScopeData
@C
public struct ImVector_ImGuiFocusScopeData {
    public ImVector_ImGuiFocusScopeData(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiFocusScopeData>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiFocusScopeData>()
    }
}

// struct ImVector_ImGuiGroupData
@C
public struct ImVector_ImGuiGroupData {
    public ImVector_ImGuiGroupData(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiGroupData>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiGroupData>()
    }
}

// struct ImVector_ImGuiID
@C
public struct ImVector_ImGuiID {
    public ImVector_ImGuiID(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiID>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiID>()
    }
}

// struct ImVector_ImGuiInputEvent
@C
public struct ImVector_ImGuiInputEvent {
    public ImVector_ImGuiInputEvent(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiInputEvent>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiInputEvent>()
    }
}

// struct ImVector_ImGuiItemFlags
@C
public struct ImVector_ImGuiItemFlags {
    public ImVector_ImGuiItemFlags(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiItemFlags>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiItemFlags>()
    }
}

// struct ImVector_ImGuiKeyRoutingData
@C
public struct ImVector_ImGuiKeyRoutingData {
    public ImVector_ImGuiKeyRoutingData(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiKeyRoutingData>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiKeyRoutingData>()
    }
}

// struct ImVector_ImGuiListClipperData
@C
public struct ImVector_ImGuiListClipperData {
    public ImVector_ImGuiListClipperData(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiListClipperData>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiListClipperData>()
    }
}

// struct ImVector_ImGuiListClipperRange
@C
public struct ImVector_ImGuiListClipperRange {
    public ImVector_ImGuiListClipperRange(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiListClipperRange>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiListClipperRange>()
    }
}

// struct ImVector_ImGuiNavTreeNodeData
@C
public struct ImVector_ImGuiNavTreeNodeData {
    public ImVector_ImGuiNavTreeNodeData(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiNavTreeNodeData>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiNavTreeNodeData>()
    }
}

// struct ImVector_ImGuiOldColumnData
@C
public struct ImVector_ImGuiOldColumnData {
    public ImVector_ImGuiOldColumnData(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiOldColumnData>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiOldColumnData>()
    }
}

// struct ImVector_ImGuiOldColumns
@C
public struct ImVector_ImGuiOldColumns {
    public ImVector_ImGuiOldColumns(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiOldColumns>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiOldColumns>()
    }
}

// struct ImVector_ImGuiPlatformMonitor
@C
public struct ImVector_ImGuiPlatformMonitor {
    public ImVector_ImGuiPlatformMonitor(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiPlatformMonitor>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiPlatformMonitor>()
    }
}

// struct ImVector_ImGuiPopupData
@C
public struct ImVector_ImGuiPopupData {
    public ImVector_ImGuiPopupData(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiPopupData>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiPopupData>()
    }
}

// struct ImVector_ImGuiPtrOrIndex
@C
public struct ImVector_ImGuiPtrOrIndex {
    public ImVector_ImGuiPtrOrIndex(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiPtrOrIndex>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiPtrOrIndex>()
    }
}

// struct ImVector_ImGuiSettingsHandler
@C
public struct ImVector_ImGuiSettingsHandler {
    public ImVector_ImGuiSettingsHandler(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiSettingsHandler>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiSettingsHandler>()
    }
}

// struct ImVector_ImGuiShrinkWidthItem
@C
public struct ImVector_ImGuiShrinkWidthItem {
    public ImVector_ImGuiShrinkWidthItem(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiShrinkWidthItem>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiShrinkWidthItem>()
    }
}

// struct ImVector_ImGuiStackLevelInfo
@C
public struct ImVector_ImGuiStackLevelInfo {
    public ImVector_ImGuiStackLevelInfo(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiStackLevelInfo>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiStackLevelInfo>()
    }
}

// struct ImVector_ImGuiStoragePair
@C
public struct ImVector_ImGuiStoragePair {
    public ImVector_ImGuiStoragePair(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiStoragePair>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiStoragePair>()
    }
}

// struct ImVector_ImGuiStyleMod
@C
public struct ImVector_ImGuiStyleMod {
    public ImVector_ImGuiStyleMod(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiStyleMod>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiStyleMod>()
    }
}

// struct ImVector_ImGuiTabBar
@C
public struct ImVector_ImGuiTabBar {
    public ImVector_ImGuiTabBar(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiTabBar>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiTabBar>()
    }
}

// struct ImVector_ImGuiTabItem
@C
public struct ImVector_ImGuiTabItem {
    public ImVector_ImGuiTabItem(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiTabItem>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiTabItem>()
    }
}

// struct ImVector_ImGuiTable
@C
public struct ImVector_ImGuiTable {
    public ImVector_ImGuiTable(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiTable>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiTable>()
    }
}

// struct ImVector_ImGuiTableColumnSortSpecs
@C
public struct ImVector_ImGuiTableColumnSortSpecs {
    public ImVector_ImGuiTableColumnSortSpecs(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiTableColumnSortSpecs>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiTableColumnSortSpecs>()
    }
}

// struct ImVector_ImGuiTableHeaderData
@C
public struct ImVector_ImGuiTableHeaderData {
    public ImVector_ImGuiTableHeaderData(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiTableHeaderData>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiTableHeaderData>()
    }
}

// struct ImVector_ImGuiTableInstanceData
@C
public struct ImVector_ImGuiTableInstanceData {
    public ImVector_ImGuiTableInstanceData(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiTableInstanceData>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiTableInstanceData>()
    }
}

// struct ImVector_ImGuiTableTempData
@C
public struct ImVector_ImGuiTableTempData {
    public ImVector_ImGuiTableTempData(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiTableTempData>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiTableTempData>()
    }
}

// struct ImVector_ImGuiTextRange
@C
public struct ImVector_ImGuiTextRange {
    public ImVector_ImGuiTextRange(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiTextRange>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiTextRange>()
    }
}

// struct ImVector_ImGuiViewportPtr
@C
public struct ImVector_ImGuiViewportPtr {
    public ImVector_ImGuiViewportPtr(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<CPointer<ImGuiViewport>>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<CPointer<ImGuiViewport>>()
    }
}

// struct ImVector_ImGuiViewportPPtr
@C
public struct ImVector_ImGuiViewportPPtr {
    public ImVector_ImGuiViewportPPtr(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<CPointer<ImGuiViewportP>>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<CPointer<ImGuiViewportP>>()
    }
}

// struct ImVector_ImGuiWindowPtr
@C
public struct ImVector_ImGuiWindowPtr {
    public ImVector_ImGuiWindowPtr(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<CPointer<ImGuiWindow>>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<CPointer<ImGuiWindow>>()
    }
}

// struct ImVector_ImGuiWindowStackData
@C
public struct ImVector_ImGuiWindowStackData {
    public ImVector_ImGuiWindowStackData(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImGuiWindowStackData>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImGuiWindowStackData>()
    }
}

// struct ImVector_ImTextureID
@C
public struct ImVector_ImTextureID {
    public ImVector_ImTextureID(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImTextureID>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImTextureID>()
    }
}

// struct ImVector_ImU32
@C
public struct ImVector_ImU32 {
    public ImVector_ImU32(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImU32>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImU32>()
    }
}

// struct ImVector_ImVec2
@C
public struct ImVector_ImVec2 {
    public ImVector_ImVec2(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImVec2>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImVec2>()
    }
}

// struct ImVector_ImVec4
@C
public struct ImVector_ImVec4 {
    public ImVector_ImVec4(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImVec4>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImVec4>()
    }
}

// struct ImVector_ImWchar
@C
public struct ImVector_ImWchar {
    public ImVector_ImWchar(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<ImWchar>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<ImWchar>()
    }
}

// struct ImVector_char
@C
public struct ImVector_char {
    public ImVector_char(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CString) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CString(CPointer<UInt8>())
    }
}

// struct ImVector_const_charPtr
@C
public struct ImVector_const_charPtr {
    public ImVector_const_charPtr(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<CString>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<CString>()
    }
}

// struct ImVector_float
@C
public struct ImVector_float {
    public ImVector_float(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<Float32>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<Float32>()
    }
}

// struct ImVector_int
@C
public struct ImVector_int {
    public ImVector_int(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<Int32>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<Int32>()
    }
}

// struct ImVector_unsigned_char
@C
public struct ImVector_unsigned_char {
    public ImVector_unsigned_char(public var Size!: Int32, public var Capacity!: Int32, public var Data!: CPointer<UInt8>) {
    }

    public init() {
        Size = 0
        Capacity = 0
        Data = CPointer<UInt8>()
    }
}
